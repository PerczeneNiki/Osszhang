%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1140.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: 
%%CreationDate: 9/18/2020
%%BoundingBox: 0 0 3433 1363
%%HiResBoundingBox: 0 0 3432.0745 1362.4826
%%CropBox: 0 0 3432.0745 1362.4826
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.2 x565 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">менеджер</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2020-09-18T14:09:06+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-09-18T14:09:06+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-09-18T14:09:06+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>104</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxbzx+ZflHyVBE+uXRWecVt7OFfUncA0LBBSi/5TEDJx&#xA;gZckEpX5O/O78v8AzXfrp1hdyW2oSGkFreJ6TSnwjYFkJ/yeVfbDLFILbPcrS7FVC/v7LT7Ke+vp&#xA;0trO2QyTzyEKiIoqSScIFq8nf/nKL8uV1E2wh1B7YHj9eWFPTO/2uBkEvH/Y19st8CSLepaNrWla&#xA;3psGp6VdJeWFwvKGeM1B7EGu4IOxB3B65UQRzSjcCuxV5r51/P8A8ieVdUk0qU3Go38B43MdkiMs&#xA;TA7o7yPGOQ8FrQ7GmWxwk7otkHkX8zfKXna3kk0S5b6xCA1xYzr6dxGCaAlasCv+UpIyM4GPNQWV&#xA;ZBLsVS/Xtf0jQNKn1bV7lbSwtgDLM9T1NAABUsxOwAwgEmgrzGy/5yg/Li41EWssV/aW7MFW+mhQ&#xA;xD3ZY5HkA/2J+jLTgki3rNneWt7aw3dpMlxa3CCSCeMhkdGFVZWGxBGUkJVcVdirynzF/wA5J/l5&#xA;o+qPp8Yu9TaF+E1xZpG0II2YK8kkfOh/lFPfLhhkUWzjyd548teb9NOoaFdi4iQhZ4mBSWJyK8ZE&#xA;O49j0PYnK5RMeabT7Iq7FXn/AJy/PP8AL/ypfSafeXMt5qEJpPa2SCVoz/K7M0cYb/J5VHfLI4pF&#xA;FoNfz58o6h5M1nXtFLyXulQiQ6XdKIpuUjrFESFZgyGR1BKMfxGHwiDRW2D+QPzp/MqXzPbRea7K&#xA;NdD1CVIXmMH1f6sX5BWViR8PIfHzqQPDvEzxHaMgS5H5TNV8Mvk+g0dJEV0YOjCqspqCD0IIyDSR&#xA;XNvFDsVdirsVdirsVfIP5xWl1rP54ahpt3M6K8tvbwtQv6cRt0ZeK+HxcvpJy+eXw8JkOgZ4MXiZ&#xA;BHvLHr38vNb0bT7nVJJ1WayKyRNA5BUq6/FyopDb1Wn3+OPj7ThOcYgfU5ubsrJjgZS6PrXyT590&#xA;LX/KNhrDalb+q1vH+kOTpGYrgIPWV1JHGj1+jcbZZKBBp11sqyCXkP8AzlDeXdv+W0UUDlY7vUYI&#xA;bkD9qMRyygf8jIlOXYB6kF4Da/llqV9o+nX9pIEa6ieS4jmJDAhmKemoXoyAdT18MxpdqRjOUSPp&#xA;7v0/F2mPsmc8cZx6je/0PYv+cYZprC982eW5rrmlnNBNawE9a+pHNIF7VCxcvDbL5T44Rn3h1+TH&#xA;wTMe4vesrYKF/K8NjczR7PHE7oduqqSOu2IV8N+WPKd55mh1S4EjfWoQrxzSH928jvV/UajMTxBO&#xA;3frlmr1owyiD1+f4ty9HoTnEq5iq7mU+RNJ1XyV+ZHlWeW7WJr+7+rTuKiMxyFY3T4h8QZZRQkbH&#xA;3GDDq45xKh9P4/Qx1Wjlgri62+wsg4zsVeCf85Z3dwmjeXrRXIgmuLiSSMdGaJECE/L1G+/MjT8y&#xA;xLyZ/wAqNRk+pSwTCO3mghkuVlBM0cjAeqBGqioUnpWv05gjteIErG4Jru8ncHsaZAI5UL7weuz3&#xA;L/nF/UZZPJGoaVcTmSbS9RljSEtX0oZERgF8FaUSn51zLy7kEdQ6mqNPYsqVjX5l3dxafl75jubZ&#xA;zHPHp1yY5F2ZSYyKg9iK7ZKH1BBfHvl3yJd67oU99bN6dxHOscfqkrE0fH4yCFYlgxHtjqNeMWUQ&#xA;O4I+Ln6Xs6WfGZR538Gf/klaaj5U/NzT9JmueCarZzLcx9FfisjKtG7iSH4T3+nDj1Ec2MyHQuPq&#xA;NMcMhE9z6oyDSlPm+8vLHynrd7ZV+u2thdTW1OvqxwsyU/2QGSiNwr4W0jTm1nUWt5LyOC4mDPHJ&#xA;cE0llJ2Tlv8AE5PU/rzJz5vDjxUSPL72eDD4kuGwPf8Ac+h/yo0fRPLN4q36W6m9gjsbu6kWgZjx&#xA;4jkx6PLxA2Hau++aHHrZZMvDzhK9nd6rs+OLCJj641unvn/ybYaPHaz2ExCs0nK2cVYg0JZCqgbE&#xA;71yzwYYjV7y7/JzuyNfLLIiQG3UJRpnmzUfLzWT28jNbsQ09oT8DpT4tv2W32OUaOZ8SX81ydXo4&#xA;ZwbG/QvRvK3nO+8w6pMbbTnj0NRxjvJCA/qgAlWUMRvX9nNoJW85q9DHDAXL953eTLMk612KuxV2&#xA;KobVNRtdM0y71K7JW1sYZLm4YCpEcSF3IHyXCBavkrQvMdz5r/MLUvOOqR8NuNvEgBEdQI40B2rw&#xA;iBBPc75LW6WeTFwQ+NuVoNRDFk459OSU/mj5m1G6v20gKE0yMpNE3EhpCUFSWJ3CszDbKuzuz/BH&#xA;FL62/tHtDxjwx+hj3kvSbXWPM+naVcWtxdpfTpB6VpIsUg5MOT8njmFFWpO30jNlI0LdW+9I0WNF&#xA;RBRUAVR7DYZr2b5B88eb9Q/MX8xTb3Dsvl7TpnW2tUPwiCJuLSHxeag37VA6DMvw5CFQ+opxmPED&#xA;L6eqa+ePOOpaXpsLaNAAr80nldCfRAACFQpoDuaVqNs0+n7EIkTl3Hkebu9R2yOEDFt7xyeVaLre&#xA;saZqsd/p+oy6delqNfI8isA5+IuUDMy/zChr4ZveEVVOgJt9n/lPF5gHkmyudc1ca1d31buK9Xnx&#xA;9CUAxKvqJC/2d/iQbnMLJV7Mg82/5yZ/MTV9M+q+TtLZoDqVv9Y1CdPtvDI7RJChHQMY25+IoOla&#xA;24IA7lBYnojp5d8om1s4TNqUUTykUqslwwrTY1IGw9wM1up7LzZsvHKuG/iA7vTdpYsOLgjfFXwJ&#xA;eTeYNd1PWdSe81BqTD4REoKrGBtxVSSRm10+mhhjwxdTqNRLNLik+hv+ccdR8563c3F/qPmVtS0q&#xA;xg+rtpsjTvLHNIQYy7SxqhoiN9mRvfIZgB0ag9zu7mK0tZrqYkQwRtLIQKkKgLHb5DMdk+Pf8Uap&#xA;+YXn79N64x/R9iTJbWS7xxIG/dRKOhJO7E/aofYZfqMUzjMMf1S/BbtLKAmJT+mKN/MfzzqFlw07&#xA;TQEhvLcmW5Kt6ilmKlUaoANBvseu2azRdkcJvLzB27i7TW9rcQ4cfIjfvYD5W1/XNH1QTaVrD6LL&#xA;OOE14GlCcTv+8WJZWYV/yDm8lEEcnRPt7yXZ6xZ+VdNt9avhqWqLCGur0cqSM5L7cgjUAYAVUH2z&#xA;BkRezN4H/wA5GefNb1HzR/gHTXMVlD6P15FqDPPMqyoHb/faI6mnSu56CmRhhQtB5oXUdTi8r+Sg&#xA;dIRZnsRFEA6txq7gO7gFT8RJPXqc586LJk1FZhw8Vn9gelGtx49PeLfhr+0vHb3W9UvNVOqyXDrf&#xA;eoJY5o2KNGymq+mQarx7Uzo8WGOOIjEbPOZcsskjKXMvqf8A5x7u/Nmq6PfazrXmEa3ZzNHb2kVZ&#xA;i0EkQLShzLHFvR03XkD45RmoGgGITL8+vP8AeeUPJo/R1F1PVZDaW8pAYRJxLSSUOxIXZa9zXtgx&#xA;QsqS+VfJWktf69bO4P1S1kSa5YCuymoX/ZEUzIzxlKBEeZDPTyiJgy5Asw/M6y1/VLyCTTo5rjTF&#xA;gUSRRmo9YOxNYgak8eO9M1HZ8YacGOShO+fl7/m7btAz1BEsdmFcvP3Jl+Xt95zvLZZL/wAyXElj&#xA;Y+pAdCne5MxMsZjQVdPT9IA8qepsVpx75d2jmxxxmq4jy/S4/Z2nnLKNjQ5/oehW2i6hOi6hBZJe&#xA;22mUe6jkK8SgHIgqxqQQp6ZqOzgfUfd+l6iebGP3cpcMp7B7FoZRtItHS0WxWSJXFogAWPkK8aAL&#xA;4+GbocnjtSKySF8VHn3o3C0OxV2KuxVLvMejR635f1LR5W4JqNrNamSlePqoU5U/ya1wxNG1fKfl&#xA;bRr7RIr/AEnUYTBqFneSRXMbfzBUoR4qw3U9CN82uMgi2qSY6npNjqVuIbyISId0boynpVSNx0yZ&#xA;FsXqX5F+RrSx0z9N3c8eoagjyW9jM0EazW8I+Eo0wHqSFlp9o0UbLQVzXag0abYvWsx2T5S1byVd&#xA;+U/zI1q2lhZbG853OlT0PB4JJA/BW/mj5BWHtXoRmywTsNckWy1X4hVWqCD0OXsEX5N8g+Tde80W&#xA;FlqdgPT5PIvoH0g5jUyenKBs0Z4mv7XgQMozio2GUS+lkRI0WONQiIAqIooABsAAM1ra8J/5yO8m&#xA;X0+r6F5wtYXntbEx2uqFBX0okm9WOQj+Wsjhj22zJ08hyLGTFQCenzzYNSCutF0a8dmvbKOfmOLt&#xA;9l6diHWjAjt/EVGCUbSC+jvInlbQfLPlmz07RIWitGRZmeShmlkkUEyTEAVc7V226CgGaqZJO7aE&#xA;8ubeK5tpbaYcopkaORfFXFCPuOQS+TdK8m6l5S1TV9K1CJkmiuAsMpFBNAAfSlQ91YE/I1HUZtMM&#xA;gRbVJE6vo1lqdmIbpeSmpVxsyMO6n5ZYRaEV5I8oeW9MNrq+uWUGp3VhMRZQQuYVlRR8LXkTI6My&#xA;Egrw+1+3XNVq9SccxAC7+x2/Z3ZktSCb4R7n0zpWow6lp1vfQgrHcIHVW6ivY/LK4mxbiZ8JxTMD&#xA;zBeDfnH5GvLX8zLfzZHE0mn6jAEmmXpHdRRekFf2eIDj8j4Zm6aXIOPIJNbNGC4lQSwspSaFgCrx&#xA;tswIOT1mn8WHDylzB7i2aTUeFOzuORHeEri/LLQ1v3cmOXQLpC0kbMUu4XH2DbTBWB3NCsgIp2LU&#xA;zS4+05xBjOJ8SP2+93MuxxkkJYj6JfY+hfy0utGfyzDZaTYjT7XTz6AtweQ6BuZai8metWJ3rmTH&#xA;Jxblw+0NCdNMRuwQxv8A5yE8lX3mfyL6mmxNPqOkzC7jgQVeSPiUlRR3NG5U78aDL8MqLry8F/LD&#xA;jbWs8zLSVbnjIpFGAVF23/1jmVnw+LilAdQz0+bw8kZHoXp63NlOoIdGB7EgH7jvnF5NJmxmjEvY&#xA;49XhmLEgmGkaDeak/wDuOtzKobi0w+wp60LnYbHpgjpssjXCVyazFAWZB6t5b0NNH01bbkHmc+pO&#xA;46FyKUHsAKZvdLp/ChXV5fW6o5p8XTommZLiOxV2KuxV2KuxV5j+dGlxCLT9URAsnNreaQDdgRzj&#xA;BPtxamZmklzDCby590Q+AI/Gv8czWt7h+VVr6Pk22fobiSWX/hyn/Gma3Un1tseTL8oZJV5o0GHX&#xA;dEudOegdxygkP7Eq7o38D7VyeOfDK0EW+epraa3mms50Mc8TFXQ9Q6Egrm1BvdpZB5Sv7XSLu11M&#xA;yIkqPSRj8VI2PFhTf9nwFc0GrzaiWo4IA8Fjpt83eafBpxpzKdcdHrv5bPeUdHRXQhkYAqw3BB3B&#xA;GXuqbIBFD0xV4F568uHy/wCYZI0X/Qris1r4cGPxJ/sTt8qZtMOTij5tUhRSnTba2kuHFwV4KAVq&#xA;aVr075gdq58uOA8O7J7rdj2ZgxTmfEqh509s8kebtP1myW09dTqNqvGaKgXkqmgdKbEUpWnQ/RlG&#xA;LHkGMGfMtOp4PEkIfSyfJNLz785NKE+i2upKP3lnLwf/AIxzbfgyr9+ZWllRphMPJrOCWd/TVCyj&#xA;dvamT1upjihZNHo5vZenGXMBIXDqyPQNGvry9S1hjBeSgA2oBXdiRWijOXzz8YiMDcntNTnx4oXy&#xA;A/FB7hY2kdnZQWkZqkEaxqelQopXbxzcwjwxA7nhcuQzkZHqbQPmrSv0r5dv7AAl5oiYgO8ifHH/&#xA;AMOoyyEuEgtdPnaFJGkCxqWZtqfPbNnlyxhEykaAYY8cpyAAslO7LT7lZ40SPuAqijEknoBvuc5L&#xA;U6uOQHe5H3vocBixY+GO0Q9q8paNJpWjpBN/fysZpl/lZgBx28AozO0eE48dHm8Z2hqRmy2OQ2Cc&#xA;5lOE8z/OLQbYWVrrEEKRzLKYrp0UAuJFqrOR14lKfTmZpJ7kMJh5Tmc1vY/yZgK+XryYk/vLoqB2&#xA;okab/wDDZr9WfUGyHJn+YrN2KuxV2KuxV2KuxV51+dF9EulafYkgyS3Bnp34xIV/5mZl6WJslhIv&#xA;N9Ts7ZLSKa3WikjepNQwr3zXdl6zLPNKGQ7/AKQ7ntLSYo4Yzxjb9b138qbxbjydbxA1a1llhb6W&#xA;9QfhJmdqRU3Tx5MwzHZKF/fWthZTXl04jt7dC8jnwHh7+GGIJNBXz5JqNvqWv3d9cxhfrcryIp3V&#xA;SzVAP0bZZ2nHKMH7s8udc6cvsw4vF/eDny7rQmqWRt5yyikL7rToD3GHsrW+Njon1x5/rXtPR+Dk&#xA;sD0S5fqe5/l3dS3PkzS5JTVljaIH/JikaNf+FUYM4qZcOPJkWVJeMfmv5gtdQ1+Cyi/eQaZySVh3&#xA;kcj1FH+rxA+dczsOOQga2keX6GPEOIXyY5qNnBJapcWijio+IKOq+P0Zp+ztbkhlOLMTZ7+/9rvO&#xA;0NHCeIZMIFDu7v2LfKd1Pa+ZtLmgJEn1mJNu6uwRl+lWIzoMouJefHN9GZqW5iP5pX9rbeT7qCYj&#xA;1bto4oE7lg6uT/sQtcv00SZsZcnjVvq9xBEIgqsF2Umu33ZXqOxseWZnZFuzw9szhAR4Rs9P/J68&#xA;F1aakZApuI5UJYAAhHU0XxpVDglo8eAAQDiZtXkzG5n9T0TItKld3dvZ2st1cOI4IEMkrnsqipxA&#xA;V83w6nLBNK0Sj05HLcD2qfbMjVdmwzgcRIkBWzl6TtOeAEAAgm2T/l3qss3nSwWYqsb+qqr0HL0m&#xA;I699qZSOzMWGNx3l3lc/aOXNsdh3B7dkXEdirC/zav7WDyo9rIR693JGsC9/3bh2b6AKfTmRpoky&#xA;tjPk8RzZNT2L8mLgN5fvLetWiui9PBXjQD8VOa/Vj1Bsg9AzFZuxV2KuxV2KuxV2KvBvzK1V9Q82&#xA;3gJrFaEW0S+Hp/a/4flmz08agGqR3SvS2NzbzWch+HjVD4b/ANc0vakRgywzx53v5/gO87Mkc2OW&#xA;GXKtvL8Fm/5NakYb7UdIkNC6ieNT2aM8H+/kPuzZ6giURMci6bhMZGJ5h6tmGyef/nJqj2+h2uno&#xA;afXZS0nukIBp/wAEynMrSRuV9zCZeO5sGtNtMmF0j2dyea0rHXqKeBzne1MBwSGfFsb3d/2bmGeJ&#xA;w5dxWz23yHbx2/lLT4YySqq9SRSpMjFvxOXRz+KOPlbrM+DwpmHcmOu6h+jtGvr7blbQSSJXuyqe&#xA;I+lsshGyA0l82u7u7O5LOxLMx6kncnNu0ojT72S3mX4v3TH94vanjmB2hoo5oHb1gbOfoNZLDMb+&#xA;gndnv5feVbO68xfpB2/d2QWaOADYyEnia+C9aeOa3Q9oSyYzCX1Dr5frcrtPRRxyE4/TLp+Oj1vM&#xA;h1rxX83dUe68ziyB/dWESoF7c5AJGP3FR9GbHSxqN97VM7sHzJYvQPyav/R1+6s2NFurfko8XiYE&#xA;f8KzZi6uPptnB7FmvbGA/nHqj2+g21gjFWvpqyU6GOEciD/smU5kaWNy9yJHZ43myaUfoN+NP1uw&#xA;vW+xb3Ecj/6qsCw+7K8sbiQygd30nmpbXYq8O/NXVHvPNktuGrDYokKDtyI5ufnVqfRmy00aj72q&#xA;R3YdmQxej/ktf+nqmoWBO08KzKD4xNx2+iTMPVx2BZwet5gtjsVdirsVdirsVdir5r12X1tc1GXf&#xA;95czPv1+KQnNvAekNJULO7ktZvUQA7UIPhmPrNJHPDhOzk6TVSwT4gnnkjVGt/Omn3THiJp/Sfwp&#xA;MDHv9LYfAEMPAP4Q15MpnMyPUvf816Xkf51TE6rp0PZIGf8A4N6f8aZn6QbFrm85zLYNqzKQVNCO&#xA;hGRlEEUeSYyINh73+W10bnyZp7Maugkjc+6yMB+FM1maAjKgKDdxGW5Nl35luyeSNTKmhIiX6GnQ&#xA;H8Dh0/1hjLk8DzaNTsVek/kvev8ApPUbVmJ5wJIoJrQRtx2/4PMDU4ox3AAbhkkdiXrOYiXz154l&#xA;aXzdqzN1Fw6fQnwj9WbXCPQGmXNIstQm3lTVf0V5isL4miRSqJT/AMVv8D/8KxyvJHiiQkF9GZqW&#xA;55L+dU7NqWmQfsxwu48Ku4B/4hmbo+rGfIPN8zWp2KvofyVqv6U8r6fdk1k9IRS71POL92xPz41z&#xA;UZI8MiG+73TvIK+dPN0jP5p1dm6i8nX6FkKj9WbbF9I9zSeaUZYhPPJOqnTPNOn3RNIzKIpf9SX4&#xA;CT8uVcqzRuJCQd30NmqbnYq7FXYq7FXYq7FXnV9+TlpdXtxcjU3jE8ryCMQghebFuNeQ6VzLGqIF&#xA;Uw4FD/lSdr/1dn/5Ej/mvD+bPcvAvh/JmGGaOaPV3EkbB0PojYqaj9vE6vyXgek5hs2KecvIMHmW&#xA;6t7h7trV4EMdFjD8gTUdSvTL8WfgHJiY2x7/AJUna/8AV2f/AJEj/mvLfzZ7kcDv+VJ2v/V2f/kS&#xA;P+a8fzZ7l4GZ+U/Li+XtK/R63BuVEjSCRlCU5U2oCfDMfLk4zbIClfzJoia3otzpbymFbjhWUDkR&#xA;wdXG1R/Lgxz4TakWwX/lSdr/ANXZ/wDkSP8AmvMn82e5jwO/5Una/wDV2f8A5Ej/AJrx/NnuXgTv&#xA;yj+XMXlzVGv4797gtE0JjMYQUYq1ahj/AC5Xlz8YqkiNMxzHZMA1r8pbbU9WutQ/SLwm6kMpiEQY&#xA;At135DMqGpIFUwMEF/ypO1/6uz/8iR/zXkvzZ7l4Hf8AKk7X/q7P/wAiR/zXj+bPcvA9JgjaOCON&#xA;39R0VVZ6U5EChNPfMQs2LedPIMXma5trg3htHt0aM0j9TkCaj9pKU3yzFlMLUi2O/wDKko/+rw3/&#xA;AEjj/qpl35s9zHgDv+VJR/8AV4b/AKRx/wBVMfzZ7l4AzPyh5aPl3Sm0/wCtG7UytKrlPToGCjjT&#xA;k3da5j5J8RtkneQV57qv5Q2uoand336SeI3UzzGP0g3EyMWIryHjmVHVEACmBghf+VJ2v/V2f/kS&#xA;P+a8l+bPcvA2PyUtwQRq8gI3BEI/5rx/N+S8D0pQQoBNSBuelTmGzbxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:94f6754d-45b2-c14c-b4e5-9b1796f08887</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:94f6754d-45b2-c14c-b4e5-9b1796f08887</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:ba6f50c3-7ac4-7244-ba2e-0465456dc28e</stRef:instanceID>
            <stRef:documentID>xmp.did:ba6f50c3-7ac4-7244-ba2e-0465456dc28e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95410686-0968-b941-a846-e2db5259eaf3</stEvt:instanceID>
                  <stEvt:when>2019-06-07T12:55:30+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fb95ef5a-053f-5b41-9ab7-50722ec10b05</stEvt:instanceID>
                  <stEvt:when>2019-06-21T13:31:33+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3596cf67-da22-4642-bea2-8e64ff096504</stEvt:instanceID>
                  <stEvt:when>2019-06-24T19:30:03+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:839b39e3-c721-8949-9dd7-1440fb021a41</stEvt:instanceID>
                  <stEvt:when>2019-06-25T20:30:14+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f8388b82-e582-c94b-af0b-2e34af2f7aad</stEvt:instanceID>
                  <stEvt:when>2019-07-15T22:28:50+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cda1305d-c3b0-6441-b9e8-3f602aad8996</stEvt:instanceID>
                  <stEvt:when>2020-07-31T17:29:50+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b7dc7d09-6b65-534c-b1a9-f4d2d55f221a</stEvt:instanceID>
                  <stEvt:when>2020-08-02T16:08:49+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b20f656e-cf48-cb44-ba55-22b00084989a</stEvt:instanceID>
                  <stEvt:when>2020-08-02T16:24:49+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b6319c15-a626-b44f-9b59-b3f4c1ee62b7</stEvt:instanceID>
                  <stEvt:when>2020-08-06T17:53:46+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c06928c5-23d3-4646-bc06-f0192de7a96e</stEvt:instanceID>
                  <stEvt:when>2020-08-08T16:40:28+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c314604a-08f5-c64a-bbdc-82ca69b856cc</stEvt:instanceID>
                  <stEvt:when>2020-08-08T16:44:31+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:88a97008-0614-044f-b91d-2a4a21d4896d</stEvt:instanceID>
                  <stEvt:when>2020-08-16T22:40:13+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9a84c3c8-4565-4d41-adb2-29570a529410</stEvt:instanceID>
                  <stEvt:when>2020-09-18T12:54:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ba6f50c3-7ac4-7244-ba2e-0465456dc28e</stEvt:instanceID>
                  <stEvt:when>2020-09-18T13:11:24+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:94f6754d-45b2-c14c-b4e5-9b1796f08887</stEvt:instanceID>
                  <stEvt:when>2020-09-18T14:09:06+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3432.074481</stDim:w>
            <stDim:h>1362.482594</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1362.48 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1362.48 li
3432.07 1362.48 li
3432.07 0 li
cp
clp
3432.08 1362.48 mo
0 1362.48 li
0 0 li
3432.08 0 li
3432.08 1362.48 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
2058.98 450.635 mo
2020.7 454.14 1983.73 451.067 1972.57 406.879 cv
1968.41 390.426 1971.18 372.772 1966.65 356.419 cv
1959.27 329.795 1930.86 309.031 1903.3 315.494 cv
1890.88 318.407 1880.7 322.986 1867.65 324.116 cv
1849.93 325.651 1832.97 327.397 1819.22 340.079 cv
1806.92 351.417 1800.22 368.725 1796.58 384.651 cv
1792.26 403.543 1783.16 418.444 1769.93 432.716 cv
1757.28 446.362 1742.91 458.443 1731.41 473.07 cv
1701.27 511.411 1706.8 550.142 1724.83 593.618 cv
1768.66 699.315 1918.89 633.896 1986.74 590.458 cv
1965.26 578.666 1947.03 561.022 1934.54 539.938 cv
1955.93 552.191 1977.33 564.443 1998.72 576.695 cv
2010.75 563.103 2022.78 549.511 2034.81 535.919 cv
2038.64 531.59 2042.73 526.537 2042.17 520.783 cv
2040.6 504.643 2010.88 510.087 2003.69 495.549 cv
2014.35 507.819 2035.52 506.524 2047.3 495.333 cv
2058.89 484.324 2062.75 465.787 2058.98 450.635 cv
.152941 .172549 .301961 rgb
f
1865.46 487.454 mo
1866.07 485.608 1866.7 483.769 1867.32 481.937 cv
1875.35 458.424 1883.22 433.769 1887.6 409.222 cv
1888.89 401.976 1889.76 393.951 1885.79 387.754 cv
1858.4 344.984 1810.06 452.174 1802.15 469.611 cv
1789.49 497.484 1774.7 523.709 1771.62 554.786 cv
1771.09 560.084 1771.03 566.15 1774.86 569.848 cv
1777.92 572.803 1782.57 573.292 1786.82 573.186 cv
1799.18 572.879 1816.23 560.377 1826.38 565.331 cv
1840.87 572.403 1857.24 574.445 1872.24 580.215 cv
1881.96 583.959 1896.6 591.302 1898.53 575.129 cv
1899.85 564.044 1886.53 556.227 1879.53 549.729 cv
1868.45 539.437 1859.87 531.297 1859.97 514.724 cv
1860.03 505.408 1862.54 496.341 1865.46 487.454 cv
cp
.964706 .584314 .364706 rgb
f
1934.22 429.515 mo
1934.1 430.22 1933.97 430.925 1933.82 431.63 cv
1932.11 439.849 1923.69 433.875 1918.66 436.105 cv
1916.55 437.037 1916.12 439.807 1916.21 442.106 cv
1916.26 443.63 1916.5 445.451 1915.93 446.91 cv
1915.18 448.806 1913.49 449.217 1912.46 450.783 cv
1910.48 453.791 1912.23 456.929 1907.77 457.942 cv
1906.1 458.325 1904.23 458.456 1902.97 459.632 cv
1901.58 460.93 1901.42 463.035 1901.29 464.93 cv
1900.52 475.387 1890.28 470.369 1884.09 468.926 cv
1878.67 467.665 1873.32 465.185 1868.64 462.209 cv
1864.42 459.526 1862.24 453.624 1860.27 449.163 cv
1856.53 440.713 1854.19 431.652 1853.36 422.451 cv
1852.66 414.651 1849.94 407.857 1850.15 399.878 cv
1850.74 376.536 1863.57 353.255 1884.3 342.499 cv
1884.93 342.17 1885.57 341.855 1886.22 341.553 cv
1902.08 334.201 1924.43 333.947 1939.09 344.438 cv
1944.84 348.554 1945.04 354.855 1944.79 361.428 cv
1944.4 372.155 1941.18 382.399 1937.96 392.553 cv
1934.09 404.781 1936.27 417.159 1934.22 429.515 cv
cp
f
1881.01 404.492 mo
1886.67 402.952 1893.09 406.205 1895.65 411.481 cv
1900.09 420.62 1893.27 427.866 1883.76 426.488 cv
1879.06 425.807 1874.52 422.701 1873.13 418.159 cv
1871.41 412.55 1875.35 406.031 1881.01 404.492 cv
cp
.952941 .427451 .501961 rgb
f
1910.07 396.652 mo
1909.67 396.075 1909.27 395.456 1908.67 395.1 cv
1908.06 394.744 1907.16 394.762 1906.76 395.341 cv
1906.43 395.817 1906.55 396.461 1906.71 397.015 cv
1908.39 402.775 1913.6 407.345 1919.52 408.258 cv
1920.82 408.457 1923.91 408.419 1923.93 406.432 cv
1923.94 404.97 1920.78 404.702 1919.75 404.29 cv
1915.88 402.749 1912.45 400.075 1910.07 396.652 cv
cp
.152941 .172549 .301961 rgb
f
1939.83 351.585 mo
1940 354.212 1936.43 358.172 1934.99 360.242 cv
1932.92 363.228 1930.63 366.067 1928.15 368.722 cv
1923.19 374.02 1917.44 378.593 1911.07 382.075 cv
1904.29 385.779 1896.93 388.184 1889.42 389.255 cv
1882.87 390.189 1876.04 390.222 1869.51 388.981 cv
1864.88 388.098 1860.03 383.194 1855.31 383.536 cv
1850.53 383.881 1843.65 390.62 1839.9 393.396 cv
1829.11 401.367 1819.17 410.475 1810.3 420.529 cv
1805.34 426.151 1799.81 432.546 1792.32 432.969 cv
1785.31 433.365 1778.98 427.977 1776.15 421.548 cv
1773.32 415.12 1773.28 407.847 1773.54 400.828 cv
1774.09 385.588 1772.81 371.958 1775.84 356.776 cv
1783.55 318.15 1816 288.103 1851.79 282.287 cv
1887.58 276.471 1924.91 293.22 1949.52 322.196 cv
1957.72 331.842 1964.75 342.992 1968.13 355.624 cv
1970.69 365.195 1971.01 375.576 1968.26 385.144 cv
1967.58 387.536 1966.67 389.835 1965.62 392.087 cv
1964.75 393.937 1964.58 395.992 1963.55 397.735 cv
1960.77 402.448 1953.48 405.277 1948.52 402.484 cv
1943.27 399.519 1937.27 396.714 1932.9 392.474 cv
1931.17 390.792 1929.55 388.665 1929.63 386.252 cv
1929.73 383.488 1931.9 381.459 1932.78 378.963 cv
1933.68 376.396 1934.41 373.678 1935.24 371.064 cv
1937.25 364.696 1938.76 358.176 1939.83 351.585 cv
cp
f
1854.73 366.655 mo
1854.5 366.462 1854.26 366.277 1854 366.1 cv
1850.12 363.426 1845.31 361.262 1840.93 364.453 cv
1835.06 368.729 1834.91 380.259 1835.57 386.664 cv
1835.98 390.697 1837.3 394.746 1839.98 397.789 cv
1840.84 398.768 1841.87 399.655 1843.12 400.029 cv
1844.95 400.579 1850.09 400.776 1851.64 399.58 cv
1852.82 398.665 1853.33 397.15 1853.79 395.724 cv
1855.53 390.244 1858.18 384.808 1858.15 378.947 cv
1858.12 374.129 1858.15 369.566 1854.73 366.655 cv
cp
.964706 .584314 .364706 rgb
f
1996.57 927.009 mo
2000.04 943.127 2004.04 959.135 2008.4 975.016 cv
2015.56 1001.15 2023.73 1027 2032.17 1052.75 cv
2033.52 1056.85 2051.06 1120.77 2045.16 1120.77 cv
1739.66 1120.77 li
1734.79 1093.86 1733.41 1066.14 1734.81 1038.92 cv
1737.51 986.604 1744.26 933.179 1762.53 883.807 cv
1771.13 860.56 1787.46 841.359 1796.07 819.227 cv
1804.69 797.081 1801.93 771.862 1796.72 749.258 cv
1792.2 729.663 1787.99 709.373 1780.69 690.74 cv
1762.71 644.803 1756.9 593.789 1771.45 546.068 cv
1775.08 534.158 1780.05 522.245 1788.87 513.456 cv
1810.15 492.264 1836.95 500.856 1857.57 518.005 cv
1867.56 526.31 1874.81 536.313 1883.22 545.945 cv
1903.88 569.601 1934.53 583.065 1955.63 607.185 cv
1966.56 619.683 1973.92 634.523 1977.78 650.633 cv
1982.1 668.656 1976.49 683.487 1974.12 701.531 cv
1964.42 775.216 1981.07 855.107 1996.57 927.009 cv
.482353 .517647 .686275 rgb
f
2054.28 633.409 mo
2055.53 608.734 2037.75 592.11 2012.85 591.644 cv
1994.81 591.306 1979.99 608.668 1975.33 625.133 cv
1972.37 635.611 1971.6 650.286 1981.44 656.978 cv
1986.41 660.359 1991.84 659.408 1997.19 660.648 cv
2009.99 663.619 2023.12 666.81 2036.24 663.796 cv
2047.19 661.279 2052.42 648.495 2053.88 637.678 cv
2054.07 636.23 2054.21 634.806 2054.28 633.409 cv
cp
.964706 .584314 .364706 rgb
f
2051.66 652.553 mo
2055.72 642.592 2059.01 632.386 2056.03 621.485 cv
2051.66 605.521 2035.37 592.382 2019.11 590.528 cv
2018.03 603.148 2016.18 624.411 2004.35 632.035 cv
1992.62 639.61 1975.62 635.361 1962.72 641.555 cv
1935.68 654.532 1913.69 676.184 1892.4 696.811 cv
1874.14 714.499 1845.55 732.103 1839.26 758.118 cv
1836.79 768.308 1838.49 779.933 1845.6 787.642 cv
1854.66 797.478 1869.89 798.706 1883.03 796.21 cv
1902.15 792.577 1924.14 789.175 1940.35 778.555 cv
1958.6 766.595 1981.45 761.304 1995.43 743.318 cv
2003.33 733.16 2014.48 726.194 2021.19 715.285 cv
2030.93 699.457 2039.82 682.946 2046.36 665.515 cv
2047.97 661.216 2049.89 656.908 2051.66 652.553 cv
cp
.952941 .427451 .501961 rgb
f
1995.56 747.917 mo
1954.47 780.159 1896.94 820.569 1852.89 770.402 cv
1840.3 756.07 1833.04 738.153 1821.55 723.236 cv
1812.33 711.267 1797.92 689.928 1815.74 677.691 cv
1829.51 668.235 1845.25 651.543 1864.03 655.922 cv
1872.34 657.861 1877.3 666.153 1881.31 673.684 cv
1889.05 688.211 1896.78 702.739 1904.52 717.267 cv
1906.53 721.035 1908.63 724.918 1911.99 727.545 cv
1918.71 732.794 1940.19 729.707 1948.66 728.747 cv
1975.31 725.726 1997.21 714.997 2022.64 708.376 cv
2022.74 716.717 2018.79 724.697 2013.35 731.027 cv
2008.22 737.016 2002.21 742.699 1995.56 747.917 cv
cp
.964706 .584314 .364706 rgb
f
1990.98 670.38 mo
1985.33 672.089 1979.64 674.236 1974.89 669.586 cv
1978.33 665.118 1983.26 662.076 1988.07 659.132 cv
1992.14 656.646 1995.14 653.058 1999.35 650.891 cv
2003.65 648.681 2008.46 647.548 2013.26 647.167 cv
2019.4 646.678 2025.34 647.582 2031.44 648.155 cv
2036.19 648.602 2039.82 646.055 2044.71 648.422 cv
2053.91 652.876 2054.36 664.511 2050.53 672.773 cv
2048.7 676.712 2046.3 680.348 2043.97 683.995 cv
2041.97 687.112 2041.5 690.186 2039.8 693.349 cv
2036.49 699.495 2031.69 705.29 2027.34 710.695 cv
2023 716.099 2019.61 721.763 2014.32 726.425 cv
2012.78 727.78 2000.63 738.282 1999.96 733.003 cv
1999.9 732.462 2000.08 731.919 2000.06 731.374 cv
2000.05 730.828 1999.73 730.203 1999.18 730.182 cv
1998.35 730.15 1998.12 731.409 1997.37 731.786 cv
1996.74 732.105 1995.95 731.644 1995.65 731.004 cv
1995.36 730.365 1995.43 729.625 1995.52 728.927 cv
1995.8 726.693 1996.18 724.474 1996.68 722.277 cv
1996.17 721.947 1995.71 722.743 1995.23 723.12 cv
1994.54 723.67 1993.43 723.227 1992.98 722.461 cv
1992.54 721.695 1992.57 720.753 1992.62 719.867 cv
1992.72 718.251 1992.12 716.918 1992.03 715.342 cv
1991.9 713.133 1992.53 710.612 1992.89 708.438 cv
1993.65 703.862 1994.76 699.348 1996.09 694.907 cv
1997.61 689.825 1999.44 684.837 2001.4 679.906 cv
2002.85 676.257 2007 670.828 2000.7 669.283 cv
1997.6 668.524 1994.3 669.377 1990.98 670.38 cv
cp
f
1766.1 628.261 mo
1767.8 643.664 1772.38 658.521 1781.14 672.046 cv
1790.46 686.443 1798.83 701.44 1808.79 715.421 cv
1814.32 723.176 1820.89 730.166 1827.04 737.423 cv
1831.06 742.172 1833.76 748.706 1838.19 752.857 cv
1846.85 760.958 1867.23 749.872 1875.92 745.468 cv
1885.01 740.857 1905.24 728.826 1905.81 717.501 cv
1906.12 711.4 1903.48 705.582 1900.91 700.045 cv
1889.1 674.675 1877.97 648.77 1864.89 624.073 cv
1858.11 611.276 1851.26 598.538 1844.16 585.912 cv
1841.88 581.853 1827.22 549.91 1823.92 549.91 cv
1815.78 535.171 1799.29 530.63 1785.47 542.615 cv
1775.82 550.984 1771.65 563.979 1769.2 576.515 cv
1765.83 593.726 1764.22 611.324 1766.1 628.261 cv
.482353 .517647 .686275 rgb
f
1892.58 681.927 mo
1883.71 662.456 1874.86 642.912 1864.89 624.073 cv
1862.44 619.464 1859.99 614.863 1857.53 610.272 cv
1855.72 604.756 1854.07 599.19 1852.62 593.571 cv
1852.73 590.654 1853.36 587.829 1854.41 585.032 cv
1854.55 585.177 1854.69 585.312 1854.87 585.415 cv
1854.98 585.477 li
1857.45 588.114 1858.67 592.238 1860.01 595.545 cv
1862.13 603.407 1864.6 611.177 1867.34 618.837 cv
1871.17 629.531 1875.51 640.028 1880.05 650.437 cv
1882.38 655.783 1884.77 661.102 1887.2 666.406 cv
1889.57 671.584 1892.06 676.288 1892.58 681.927 cv
.576471 .603922 .741176 rgb
f
1891.58 683.727 mo
1891.31 683.727 1891.02 683.62 1890.77 683.379 cv
1886.67 679.535 1884.62 674.858 1882.21 669.787 cv
1879.59 664.258 1876.99 658.714 1874.47 653.135 cv
1869.56 642.267 1864.96 631.247 1860.9 620.032 cv
1859.72 616.796 1858.6 613.543 1857.53 610.272 cv
1859.99 614.863 1862.44 619.464 1864.89 624.073 cv
1874.86 642.912 1883.71 662.456 1892.58 681.927 cv
1892.6 682.112 1892.61 682.297 1892.63 682.483 cv
1892.68 683.227 1892.17 683.727 1891.58 683.727 cv
f
2978.8 455.716 mo
2979.54 450.679 2979.87 445.775 2979.92 441.388 cv
2941.86 462.644 2899.95 443.179 2873.49 413.222 cv
2858.88 396.676 2848.84 376.562 2841.08 355.896 cv
2837.76 347.049 2834.75 335.265 2828.17 328.165 cv
2815.38 314.355 2810.37 322.623 2793.13 324.116 cv
2775.41 325.651 2758.46 327.397 2744.7 340.079 cv
2732.4 351.418 2725.7 368.725 2722.06 384.65 cv
2717.74 403.544 2708.65 418.444 2695.42 432.716 cv
2682.77 446.362 2668.4 458.443 2656.9 473.07 cv
2626.75 511.412 2632.28 550.142 2650.31 593.618 cv
2694.15 699.315 2844.37 633.896 2912.23 590.458 cv
2890.74 578.666 2872.51 561.022 2860.02 539.938 cv
2881.42 552.19 2902.81 564.442 2924.2 576.695 cv
2927.86 572.565 2966.62 521.803 2965.84 521.763 cv
2947.01 520.815 2929.21 508.451 2921.75 491.136 cv
2931.75 499.701 2947.32 500.768 2958.65 494.047 cv
2970.9 486.782 2976.61 470.662 2978.8 455.716 cv
cp
.152941 .172549 .301961 rgb
f
2908.52 531.362 mo
2913.11 532.71 2917.83 533.683 2922.91 533.845 cv
2943.32 534.496 2959.47 525.119 2970.18 507.951 cv
2991.71 473.445 2989.71 428.374 2996.65 389.64 cv
2997.32 385.868 2998.16 381.799 3001.03 379.258 cv
3004.05 376.587 3008.71 376.383 3012.41 377.988 cv
3016.11 379.593 3018.94 382.72 3021.12 386.11 cv
3028.86 398.144 3029.21 413.356 3028.71 427.652 cv
3027.9 450.752 3028.53 478.72 3017.83 499.81 cv
3009.1 517.022 2998.48 533.042 2989.9 550.59 cv
2970.24 590.791 2925.42 605.023 2882.99 599.866 cv
2842.78 594.981 2814.83 572.088 2794.59 537.909 cv
2790.19 530.47 2785.69 521.296 2789.69 513.631 cv
2792.31 508.614 2798.05 505.856 2803.69 505.328 cv
2809.32 504.8 2814.94 506.149 2820.44 507.488 cv
2841.32 512.573 2862.33 517.32 2883.12 522.752 cv
2892 525.071 2900.02 528.862 2908.52 531.362 cv
cp
.878431 .517647 .333333 rgb
f
2950.27 258.868 mo
2937.04 254.13 2921.79 256.302 2909.72 263.501 cv
2897.64 270.699 2888.69 282.58 2883.86 295.78 cv
2881.26 302.87 2880.29 311.241 2882.33 318.603 cv
2883.39 322.406 2884.93 326.21 2887.21 329.454 cv
2889.57 332.818 2896.63 335.65 2896.24 340.379 cv
2896.09 342.271 2894.64 343.867 2894.45 345.757 cv
2894.29 347.348 2895.07 348.919 2896.18 350.075 cv
2897.28 351.232 2898.69 352.042 2900.08 352.83 cv
2905.78 356.061 2911.59 359.201 2917.79 361.319 cv
2924.63 363.652 2933.08 365.274 2940.06 362.618 cv
2945.99 360.361 2949.13 354.528 2952.6 349.61 cv
2954.16 347.395 2954.65 342.379 2956.22 340.775 cv
2963.66 333.192 2968.8 323.445 2971.08 313.087 cv
2972.05 308.667 2972 304.173 2973.88 300.006 cv
2975.4 296.605 2976.98 293.97 2977.01 290.048 cv
2977.13 276.067 2962.41 263.213 2950.27 258.868 cv
cp
.964706 .584314 .364706 rgb
f
2964.73 431.674 mo
2964.76 431.572 2964.78 431.467 2964.8 431.359 cv
2964.85 430.901 2964.65 430.369 2964.21 430.221 cv
2963.77 430.072 2963.32 430.354 2962.94 430.622 cv
2961.07 431.94 2959.28 434.034 2957.05 434.667 cv
2956.65 434.781 2956.23 434.861 2955.82 434.771 cv
2955.42 434.68 2955.03 434.382 2954.95 433.974 cv
2954.87 433.575 2955.08 433.185 2955.23 432.806 cv
2955.37 432.427 2955.44 431.942 2955.15 431.662 cv
2954.85 431.376 2954.35 431.476 2953.99 431.679 cv
2950.19 433.815 2951.74 428.305 2952.94 426.617 cv
2957.73 419.857 2948.95 425.068 2948.89 421.196 cv
2948.86 419.977 2950.77 418.756 2951.57 418.11 cv
2952.34 417.486 2957.68 414.077 2956.29 412.717 cv
2955.36 411.807 2953.32 412.379 2952.34 411.201 cv
2951.41 410.084 2951.98 408.714 2952.82 407.794 cv
2954.86 405.571 2958.28 404.482 2961.2 404.22 cv
2964.05 403.965 2966.77 403.431 2969.63 404.156 cv
2975.07 405.537 2979.87 410.046 2980.8 415.7 cv
2981.7 421.185 2979.04 425.946 2975.45 429.875 cv
2974.07 431.377 2964.04 439.199 2963.72 434.693 cv
2963.67 433.975 2963.94 433.271 2964.28 432.633 cv
2964.44 432.32 2964.62 432.009 2964.73 431.674 cv
cp
f
2953.59 328.97 mo
2947.34 338.589 2944.35 350.359 2946.66 360.869 cv
2952.99 389.693 2986.64 403.848 3009.83 416.537 cv
3030.93 428.08 3089.47 434.919 3105.93 412.08 cv
3110.84 405.254 3111.01 395.891 3108.41 387.888 cv
3104.18 374.864 3091.66 355.878 3079.61 348.789 cv
3071.52 344.029 3061.74 343.451 3052.67 341.03 cv
3030.02 334.988 3012.81 312.839 2989.37 309.765 cv
2974.94 307.872 2961.59 316.659 2953.59 328.97 cv
cp
.847059 .392157 .478431 rgb
f
3085.04 508.671 mo
3090.09 508.43 3096.3 507.975 3098.45 512.413 cv
3100.19 516.019 3099.56 520.25 3099.66 524.253 cv
3099.76 528.257 3101.15 532.871 3104.91 534.258 cv
3109.76 536.051 3114.41 531.327 3117.32 527.027 cv
3124.47 516.456 3130.58 507.066 3128.52 493.868 cv
3127.91 489.945 3125.57 486.04 3121.82 484.715 cv
3111.2 480.972 3106.4 486.839 3098.46 477.262 cv
3092.27 469.793 3092.56 460.373 3089.11 452.02 cv
3082.82 436.784 3065.44 405.027 3047.51 400.9 cv
3021.41 394.891 3014.69 423.857 3020.5 442.694 cv
3028.24 467.72 3052.6 506.765 3081.21 508.712 cv
3082.32 508.787 3083.64 508.737 3085.04 508.671 cv
cp
.952941 .427451 .501961 rgb
f
3163.32 365.123 mo
3168.59 366.992 3173.01 371.783 3176.25 377.342 cv
3179.24 382.458 3182 387.909 3183.21 393.753 cv
3183.9 397.075 3184.45 401.107 3182.95 404.295 cv
3180.45 409.629 3173.32 406.461 3169.52 405.176 cv
3165.9 403.951 3162.4 402.359 3159.1 400.425 cv
3141.59 440.353 3107.58 450.148 3066.06 440.986 cv
3046.19 436.603 3039.08 428.29 3037 409.755 cv
3035.31 394.712 3030.03 370.447 3049.51 364.075 cv
3058.44 361.154 3068.17 365.61 3075.47 371.526 cv
3082.77 377.442 3088.85 384.933 3096.95 389.712 cv
3104.91 394.418 3121.13 396.421 3129.63 391.777 cv
3139.56 386.355 3140.33 372.621 3149.9 366.873 cv
3154.79 363.97 3159.3 363.702 3163.32 365.123 cv
cp
.847059 .392157 .478431 rgb
f
2907.28 330.608 mo
2907.79 327.96 2908.88 324.549 2911.11 322.852 cv
2913.41 321.099 2916.4 321.375 2919 320.439 cv
2920.75 319.812 2921.83 322.798 2920.1 323.51 cv
2918.17 324.307 2915.61 324.241 2913.89 325.395 cv
2911.83 326.775 2906.76 333.337 2907.28 330.608 cv
cp
.152941 .172549 .301961 rgb
f
2941.39 315.886 mo
2938.37 312.986 2932.98 313.093 2930.08 316.111 cv
2927.18 319.129 2927.29 324.515 2930.31 327.415 cv
2933.32 330.316 2938.71 330.209 2941.61 327.191 cv
2944.51 324.172 2944.4 318.787 2941.39 315.886 cv
cp
.952941 .427451 .501961 rgb
f
2955.72 256.35 mo
2952.77 255.599 2947.48 255.271 2945.34 252.986 cv
2944.04 251.601 2943.56 249.501 2944.13 247.69 cv
2944.32 247.079 2944.62 246.423 2944.38 245.831 cv
2944.07 245.083 2943.07 244.899 2942.28 245.075 cv
2941.49 245.251 2940.76 245.67 2939.95 245.709 cv
2938.63 245.774 2937.49 244.819 2936.55 243.881 cv
2935.61 242.943 2934.61 241.905 2933.29 241.726 cv
2931.98 241.546 2930.46 242.851 2931.01 244.06 cv
2932.31 244.507 2933.71 245.031 2934.45 246.196 cv
2935.18 247.361 2934.69 249.323 2933.32 249.463 cv
2932.77 249.52 2932.23 249.272 2931.72 249.049 cv
2923.53 245.476 2916.21 248.171 2908.26 250.538 cv
2901.74 252.482 2895.99 256.5 2891.27 261.334 cv
2881.86 270.958 2875.38 284.437 2874.06 297.861 cv
2873.22 306.406 2878.82 314.753 2871.29 321.896 cv
2872.4 325.916 2878.09 326.865 2881.75 324.861 cv
2885.4 322.857 2887.64 319.07 2890.23 315.8 cv
2891.66 313.987 2893.28 312.321 2895.03 310.807 cv
2902.85 304.023 2913.3 300.107 2923.64 299.946 cv
2928.74 299.867 2933.88 300.735 2938.57 302.77 cv
2942.2 304.345 2948.53 309.703 2952.7 307.996 cv
2953.84 307.528 2954.74 306.377 2954.67 305.146 cv
2954.61 303.94 2953.72 302.967 2952.98 302.013 cv
2950.43 298.721 2947.53 292.054 2951.69 288.882 cv
2956.29 285.367 2965.25 289.903 2967.92 294.105 cv
2971.38 299.553 2970.36 306.595 2970.37 312.622 cv
2970.37 313.017 2970.39 313.461 2970.68 313.732 cv
2971.12 314.15 2971.84 313.877 2972.38 313.6 cv
2976.13 311.692 2980.24 310.502 2984.43 310.115 cv
2987 291.056 2978.49 267.12 2960.51 258.013 cv
2959.06 257.279 2957.42 256.782 2955.72 256.35 cv
cp
.152941 .172549 .301961 rgb
f
3029.26 420.426 mo
3020.42 417.324 3010.9 403.667 3006.23 396.806 cv
3002.93 391.941 2999.62 386.234 2997.83 380.601 cv
2997.18 378.541 2997.19 376.887 2995.88 375.045 cv
2994.5 373.083 2988.08 368.379 2988.92 365.753 cv
2989.71 363.318 2996.52 363.384 2998.46 363.748 cv
3000.73 364.174 3003.26 365.391 3004.75 367.223 cv
3005.9 368.647 3006.48 370.637 3007.47 372.229 cv
3008.38 373.711 3009.17 375.289 3010.12 376.75 cv
3011.68 379.163 3011.84 377.683 3011.26 375.644 cv
3007.65 362.842 3008.65 349.292 3010.52 336.304 cv
3010.66 335.358 3010.85 334.314 3011.6 333.728 cv
3012.41 333.097 3013.63 333.255 3014.48 333.835 cv
3015.33 334.415 3015.89 335.326 3016.39 336.228 cv
3019.28 341.496 3020.19 347.421 3021.47 353.212 cv
3021.84 354.878 3022.77 359.336 3024.29 356.039 cv
3025.25 353.962 3024.23 350.777 3024.2 348.585 cv
3024.13 343.832 3023.2 339.148 3022.97 334.407 cv
3022.82 331.388 3023.03 323.818 3026.28 322.189 cv
3029.18 320.742 3032.44 325.45 3033.19 327.69 cv
3033.41 328.356 3033.54 329.063 3033.9 329.665 cv
3034.26 330.267 3034.95 330.753 3035.63 330.611 cv
3036.22 330.491 3036.62 329.973 3036.91 329.457 cv
3037.4 328.603 3037.71 327.65 3038.32 326.88 cv
3040.7 323.856 3045.02 329.596 3045.96 331.861 cv
3048.68 338.347 3050.9 344.592 3051.54 351.536 cv
3051.65 352.713 3052.28 364.509 3054.07 364.2 cv
3055.53 363.943 3056.59 358.389 3056.88 357.14 cv
3057.47 354.623 3056.98 343.122 3061.28 343.216 cv
3062.13 343.235 3062.77 343.97 3063.27 344.664 cv
3067.45 350.545 3067.35 355.845 3066.9 362.767 cv
3066.45 369.656 3065.44 376.508 3063.87 383.233 cv
3061.45 393.651 3057.81 404.675 3050.46 412.778 cv
3045.75 417.969 3038.91 421.653 3031.93 421.026 cv
3031.05 420.947 3030.16 420.741 3029.26 420.426 cv
cp
.964706 .584314 .364706 rgb
f
2986.35 423.754 mo
2981.5 425.197 2976.88 424.284 2973.09 419.557 cv
2966.16 410.922 2972.45 401.189 2977.2 393.28 cv
2991.72 369.095 2957.33 350.749 2968.28 329.548 cv
2973.14 320.118 2985.32 315.391 2995.45 318.548 cv
3008.44 322.596 3018.26 344.037 3021.67 356.334 cv
3024.48 366.492 3023.07 377.477 3019.41 387.36 cv
3016.35 395.598 3000.41 419.572 2986.35 423.754 cv
cp
.952941 .427451 .501961 rgb
f
2828.52 509.503 mo
2828.23 508.315 2827.99 507.133 2827.78 505.961 cv
2821.92 472.077 2841.09 421.48 2819.12 391.113 cv
2816.78 387.881 2813.52 385.315 2809.88 383.683 cv
2806.41 382.121 2802.64 382.22 2799.18 380.791 cv
2792.07 377.846 2783.53 379.241 2778.57 385.542 cv
2774.36 390.891 2773.75 398.198 2774.02 404.998 cv
2774.32 412.452 2775.72 420.888 2772.92 427.998 cv
2769.77 435.973 2766.34 443.839 2763.09 451.773 cv
2756.65 467.495 2750.44 483.351 2745.62 499.654 cv
2744.36 503.927 2743.19 508.229 2742.16 512.562 cv
2737.18 533.332 2738.95 571.205 2757.65 585.677 cv
2765.16 591.493 2778.72 594.019 2787.53 597.387 cv
2798.12 601.265 2809.1 603.971 2820.15 606.188 cv
2827.38 607.639 2834.04 607.803 2841.07 610.137 cv
2864.49 617.92 2889.88 593.074 2872.24 571.035 cv
2867.83 565.525 2862.14 561.201 2857.03 556.336 cv
2844.95 544.842 2832.61 526.483 2828.52 509.503 cv
cp
.964706 .584314 .364706 rgb
f
2861.62 366.083 mo
2862.22 366.57 2862.83 367.004 2863.34 367.61 cv
2869.31 374.677 2861.73 376.726 2859.54 382.87 cv
2858.62 385.437 2861.48 386.409 2863.16 387.589 cv
2864.26 388.372 2866.25 389.082 2867.04 390.466 cv
2868.07 392.264 2867.45 393.997 2868.15 395.966 cv
2869.5 399.749 2872.55 400.927 2870.83 405.513 cv
2870.18 407.242 2868.67 409.433 2868.67 411.66 cv
2868.67 413.888 2870.09 415.878 2871.29 417.638 cv
2878.25 427.897 2866.37 433.557 2859.1 436.416 cv
2846.13 441.52 2835.42 442.829 2822.4 441.18 cv
2811.38 439.783 2802.15 435.158 2793.19 429.14 cv
2789.24 426.489 2787.1 422.974 2783.84 419.705 cv
2780.07 415.93 2775.79 413.043 2772.24 408.849 cv
2758.58 392.735 2751.63 372.509 2754.82 351.365 cv
2754.94 350.583 2755.06 349.83 2755.27 349.043 cv
2760.34 329.813 2773.45 312.011 2792.81 305.901 cv
2800.41 303.504 2805.57 307.7 2811.08 312.201 cv
2820.09 319.547 2826.43 329.534 2833.26 338.72 cv
2841.48 349.781 2851.03 357.55 2861.62 366.083 cv
cp
f
2818.18 365.37 mo
2817.42 365.329 2816.63 365.254 2815.92 365.536 cv
2815.21 365.817 2814.63 366.594 2814.86 367.321 cv
2815.05 367.917 2815.67 368.244 2816.26 368.475 cv
2822.28 370.876 2829.64 369.472 2834.36 365.023 cv
2835.39 364.054 2837.42 361.387 2835.73 360.051 cv
2834.49 359.068 2832.17 361.585 2831.13 362.195 cv
2827.24 364.471 2822.68 365.613 2818.18 365.37 cv
cp
.152941 .172549 .301961 rgb
f
2799.03 312.101 mo
2801.38 313.703 2802.38 319.388 2803.19 321.989 cv
2804.36 325.742 2805.26 329.58 2805.88 333.463 cv
2807.1 341.213 2807.18 349.16 2805.91 356.91 cv
2804.56 365.153 2801.72 373.028 2797.64 380.147 cv
2794.08 386.355 2789.57 392.201 2784.17 396.942 cv
2771.79 407.748 2777.51 420.179 2778.53 433.656 cv
2779.65 448.476 2774.1 463.981 2768.41 477.792 cv
2759.66 499.032 2746.85 518.613 2730.81 535.067 cv
2715.9 550.368 2697.2 565.767 2693.85 588.176 cv
2694 587.202 2684.42 577.108 2683.32 575.133 cv
2680.34 569.754 2677.93 563.327 2677.47 557.143 cv
2676.68 546.443 2682.57 537.875 2683.88 527.368 cv
2686.86 503.573 2690.78 473.474 2684.79 450.053 cv
2680.18 432.012 2671.25 417.219 2669.99 397.658 cv
2668.75 378.244 2671.97 358.314 2681.39 341.126 cv
2700.22 306.733 2739.32 286.028 2780.4 284.298 cv
2794.08 283.722 2808.27 285.135 2821.29 290.65 cv
2831.16 294.828 2840.22 301.461 2846.55 310.166 cv
2848.14 312.342 2849.5 314.641 2850.72 317.039 cv
2851.72 319.008 2853.36 320.521 2854.16 322.557 cv
2856.33 328.061 2853.9 336.161 2848.22 338.529 cv
2842.2 341.043 2835.82 344.293 2829.3 345.199 cv
2826.71 345.558 2823.82 345.529 2821.82 343.851 cv
2819.53 341.929 2819.24 338.732 2817.69 336.322 cv
2816.1 333.845 2814.27 331.417 2812.59 328.974 cv
2808.49 323.025 2803.94 317.398 2799.03 312.101 cv
cp
f
2763.34 381.602 mo
2762.4 381.518 2761.47 381.534 2760.58 381.668 cv
2755.69 382.401 2749.66 387.689 2749.5 392.756 cv
2749.24 400.609 2758.97 408.403 2764.87 412.098 cv
2768.59 414.425 2772.92 415.993 2777.3 415.732 cv
2778.7 415.648 2780.15 415.357 2781.3 414.54 cv
2785.71 411.402 2786.19 407.61 2785.16 402.609 cv
2784.16 397.729 2781.79 393.12 2778.32 389.533 cv
2774.88 385.971 2768.84 382.088 2763.34 381.602 cv
cp
.964706 .584314 .364706 rgb
f
2805.54 395.373 mo
2807.99 389.521 2815.03 386.208 2821.24 387.528 cv
2831.99 389.816 2833.63 400.451 2826.14 407.646 cv
2822.43 411.203 2816.76 413.007 2811.96 411.176 cv
2806.03 408.916 2803.09 401.225 2805.54 395.373 cv
cp
.952941 .427451 .501961 rgb
f
2957.51 927.009 mo
2960.99 943.127 2964.99 959.135 2969.34 975.016 cv
2976.51 1001.15 2984.68 1027 2993.12 1052.75 cv
2994.46 1056.85 3012 1120.77 3006.1 1120.77 cv
2700.6 1120.77 li
2695.74 1093.86 2694.35 1066.14 2695.76 1038.92 cv
2698.46 986.604 2705.2 933.179 2723.47 883.807 cv
2732.07 860.561 2748.4 841.359 2757.02 819.227 cv
2765.64 797.081 2762.88 771.861 2757.66 749.258 cv
2753.14 729.663 2748.93 709.373 2741.64 690.74 cv
2723.66 644.803 2717.84 593.789 2732.39 546.068 cv
2736.03 534.158 2740.99 522.245 2749.82 513.456 cv
2771.1 492.264 2797.89 500.856 2818.51 518.005 cv
2828.5 526.31 2835.75 536.313 2844.16 545.945 cv
2864.82 569.602 2895.47 583.065 2916.57 607.185 cv
2927.5 619.683 2934.86 634.523 2938.73 650.634 cv
2943.04 668.655 2937.44 683.487 2935.06 701.53 cv
2925.36 775.216 2942.02 855.107 2957.51 927.009 cv
cp
.482353 .517647 .686275 rgb
f
2781.51 598.136 mo
2808.98 631.567 2851.96 634.162 2892.48 634.269 cv
2933.47 634.377 2976.77 626.135 3008.91 599.041 cv
3051.02 563.543 3058.19 503.11 3054.36 451.46 cv
3052.87 431.345 3052.53 388.86 3039.85 372.268 cv
3023.18 350.447 3016.84 405.987 3017.3 416.993 cv
3019.06 458.86 3015.2 502.157 2986.44 534.649 cv
2962.67 561.501 2925.28 564.238 2891.89 559.796 cv
2865.54 556.288 2781.77 510.13 2767.25 550.104 cv
2763.06 561.656 2766.81 574.673 2772.81 585.399 cv
2775.36 589.949 2778.28 594.193 2781.51 598.136 cv
cp
.964706 .584314 .364706 rgb
f
2521.72 450.635 mo
2483.44 454.14 2446.47 451.067 2435.31 406.879 cv
2431.15 390.426 2433.92 372.772 2429.39 356.419 cv
2422.02 329.795 2393.6 309.031 2366.04 315.494 cv
2353.62 318.407 2343.44 322.986 2330.39 324.116 cv
2312.67 325.651 2295.72 327.397 2281.96 340.079 cv
2269.66 351.417 2262.96 368.725 2259.32 384.651 cv
2255 403.543 2245.9 418.444 2232.68 432.716 cv
2220.03 446.362 2205.66 458.443 2194.15 473.07 cv
2164.01 511.411 2169.54 550.142 2187.57 593.618 cv
2231.41 699.315 2381.63 633.896 2449.48 590.458 cv
2428 578.666 2409.77 561.022 2397.28 539.938 cv
2418.67 552.191 2440.07 564.443 2461.46 576.695 cv
2473.49 563.103 2485.52 549.511 2497.55 535.919 cv
2501.39 531.59 2505.47 526.537 2504.91 520.783 cv
2503.35 504.643 2473.62 510.087 2466.44 495.549 cv
2477.09 507.819 2498.26 506.524 2510.05 495.333 cv
2521.63 484.324 2525.5 465.787 2521.72 450.635 cv
.152941 .172549 .301961 rgb
f
2328.2 487.454 mo
2328.81 485.608 2329.44 483.769 2330.06 481.937 cv
2338.09 458.424 2345.96 433.769 2350.34 409.222 cv
2351.64 401.976 2352.5 393.951 2348.53 387.754 cv
2321.14 344.984 2272.81 452.174 2264.89 469.611 cv
2252.23 497.484 2237.44 523.709 2234.36 554.786 cv
2233.83 560.084 2233.77 566.15 2237.6 569.848 cv
2240.66 572.803 2245.31 573.292 2249.57 573.186 cv
2261.92 572.879 2278.98 560.377 2289.12 565.331 cv
2303.61 572.403 2319.99 574.445 2334.98 580.215 cv
2344.71 583.959 2359.34 591.302 2361.27 575.129 cv
2362.59 564.044 2349.27 556.227 2342.27 549.729 cv
2331.19 539.437 2322.62 531.297 2322.72 514.724 cv
2322.77 505.408 2325.28 496.341 2328.2 487.454 cv
cp
.964706 .584314 .364706 rgb
f
2396.96 429.515 mo
2396.84 430.22 2396.71 430.925 2396.56 431.63 cv
2394.85 439.849 2386.43 433.875 2381.4 436.105 cv
2379.3 437.037 2378.86 439.807 2378.95 442.106 cv
2379.01 443.63 2379.24 445.451 2378.67 446.91 cv
2377.92 448.806 2376.24 449.217 2375.2 450.783 cv
2373.22 453.791 2374.97 456.929 2370.52 457.942 cv
2368.84 458.325 2366.97 458.456 2365.71 459.632 cv
2364.32 460.93 2364.17 463.035 2364.03 464.93 cv
2363.26 475.387 2353.02 470.369 2346.83 468.926 cv
2341.42 467.665 2336.06 465.185 2331.38 462.209 cv
2327.17 459.526 2324.98 453.624 2323.01 449.163 cv
2319.28 440.713 2316.93 431.652 2316.1 422.451 cv
2315.41 414.651 2312.68 407.857 2312.89 399.878 cv
2313.49 376.536 2326.31 353.255 2347.04 342.499 cv
2347.67 342.17 2348.32 341.855 2348.97 341.553 cv
2364.82 334.201 2387.17 333.947 2401.83 344.438 cv
2407.58 348.554 2407.78 354.855 2407.54 361.428 cv
2407.14 372.155 2403.92 382.399 2400.7 392.553 cv
2396.83 404.781 2399.01 417.159 2396.96 429.515 cv
cp
f
2343.75 404.492 mo
2349.41 402.952 2355.83 406.205 2358.39 411.481 cv
2362.83 420.62 2356.01 427.866 2346.5 426.488 cv
2341.8 425.807 2337.27 422.701 2335.87 418.159 cv
2334.15 412.55 2338.09 406.031 2343.75 404.492 cv
cp
.952941 .427451 .501961 rgb
f
2372.81 396.652 mo
2372.41 396.075 2372.02 395.456 2371.41 395.1 cv
2370.8 394.744 2369.9 394.762 2369.5 395.341 cv
2369.18 395.817 2369.29 396.461 2369.45 397.015 cv
2371.13 402.775 2376.34 407.345 2382.27 408.258 cv
2383.56 408.457 2386.65 408.419 2386.67 406.432 cv
2386.68 404.97 2383.52 404.702 2382.49 404.29 cv
2378.62 402.749 2375.2 400.075 2372.81 396.652 cv
cp
.152941 .172549 .301961 rgb
f
2402.58 351.585 mo
2402.75 354.212 2399.17 358.172 2397.73 360.242 cv
2395.66 363.228 2393.37 366.067 2390.89 368.722 cv
2385.93 374.02 2380.18 378.593 2373.81 382.075 cv
2367.03 385.779 2359.67 388.184 2352.16 389.255 cv
2345.61 390.189 2338.78 390.222 2332.26 388.981 cv
2327.62 388.098 2322.77 383.194 2318.05 383.536 cv
2313.27 383.881 2306.39 390.62 2302.64 393.396 cv
2291.86 401.367 2281.91 410.475 2273.04 420.529 cv
2268.08 426.151 2262.55 432.546 2255.06 432.969 cv
2248.05 433.365 2241.72 427.977 2238.89 421.548 cv
2236.06 415.12 2236.02 407.847 2236.28 400.828 cv
2236.83 385.588 2235.55 371.958 2238.58 356.776 cv
2246.29 318.15 2278.74 288.103 2314.53 282.287 cv
2350.32 276.471 2387.65 293.22 2412.26 322.196 cv
2420.46 331.842 2427.49 342.992 2430.87 355.624 cv
2433.44 365.195 2433.75 375.576 2431 385.144 cv
2430.32 387.536 2429.41 389.835 2428.36 392.087 cv
2427.49 393.937 2427.32 395.992 2426.29 397.735 cv
2423.51 402.448 2416.22 405.277 2411.27 402.484 cv
2406.01 399.519 2400.01 396.714 2395.65 392.474 cv
2393.91 390.792 2392.29 388.665 2392.38 386.252 cv
2392.47 383.488 2394.64 381.459 2395.52 378.963 cv
2396.42 376.396 2397.15 373.678 2397.98 371.064 cv
2399.99 364.696 2401.5 358.176 2402.58 351.585 cv
cp
f
2317.47 366.655 mo
2317.24 366.462 2317 366.277 2316.74 366.1 cv
2312.86 363.426 2308.05 361.262 2303.67 364.453 cv
2297.8 368.729 2297.65 380.259 2298.31 386.664 cv
2298.72 390.697 2300.04 394.746 2302.72 397.789 cv
2303.58 398.768 2304.61 399.655 2305.86 400.029 cv
2307.7 400.579 2312.83 400.776 2314.38 399.58 cv
2315.56 398.665 2316.08 397.15 2316.53 395.724 cv
2318.27 390.244 2320.92 384.808 2320.89 378.947 cv
2320.86 374.129 2320.89 369.566 2317.47 366.655 cv
cp
.964706 .584314 .364706 rgb
f
2456.2 927.009 mo
2459.67 943.127 2463.67 959.135 2468.03 975.016 cv
2475.19 1001.15 2483.36 1027 2491.8 1052.75 cv
2493.15 1056.85 2510.69 1120.77 2504.78 1120.77 cv
2199.28 1120.77 li
2194.42 1093.86 2193.04 1066.14 2194.44 1038.92 cv
2197.14 986.604 2203.89 933.179 2222.16 883.807 cv
2230.76 860.56 2247.08 841.359 2255.7 819.227 cv
2264.32 797.081 2261.56 771.862 2256.35 749.258 cv
2251.82 729.663 2247.62 709.373 2240.32 690.74 cv
2222.34 644.803 2216.53 593.789 2231.08 546.068 cv
2234.71 534.158 2239.68 522.245 2248.5 513.456 cv
2269.78 492.264 2296.58 500.856 2317.2 518.005 cv
2327.18 526.31 2334.44 536.312 2342.85 545.944 cv
2363.44 569.526 2393.5 582.528 2415.56 604.584 cv
2443.59 632.597 2438.49 665.472 2433.75 701.531 cv
2424.05 775.216 2440.7 855.107 2456.2 927.009 cv
f
2456.2 927.009 mo
2459.67 943.127 2463.67 959.135 2468.03 975.016 cv
2475.19 1001.15 2483.36 1027 2491.8 1052.75 cv
2493.15 1056.85 2510.69 1120.77 2504.78 1120.77 cv
2199.28 1120.77 li
2194.42 1093.86 2193.04 1066.14 2194.44 1038.92 cv
2197.14 986.604 2203.89 933.179 2222.16 883.807 cv
2230.76 860.56 2247.08 841.359 2255.7 819.227 cv
2264.32 797.081 2261.56 771.862 2256.35 749.258 cv
2251.82 729.663 2247.62 709.373 2240.32 690.74 cv
2222.34 644.803 2216.53 593.789 2231.08 546.059 cv
2234.91 533.518 2240.63 514.86 2254.53 510.159 cv
2286.59 499.317 2312.87 533.827 2324.91 558.298 cv
2341.5 591.987 2363.44 622.795 2390.39 648.996 cv
2404.32 662.537 2425.59 679.053 2431.74 698.375 cv
2438.25 718.841 2430.38 749.325 2431.49 771.147 cv
2434.16 823.79 2445.12 875.619 2456.2 927.009 cv
.482353 .517647 .686275 rgb
f
2508.5 631.878 mo
2509.76 607.203 2491.98 590.579 2467.07 590.113 cv
2449.03 589.775 2434.21 607.137 2429.55 623.602 cv
2426.59 634.08 2425.83 648.755 2435.66 655.446 cv
2440.64 658.829 2446.07 657.877 2451.41 659.117 cv
2464.21 662.087 2477.34 665.279 2490.46 662.265 cv
2501.41 659.748 2506.64 646.964 2508.1 636.147 cv
2508.3 634.699 2508.43 633.275 2508.5 631.878 cv
cp
.964706 .584314 .364706 rgb
f
2505.89 651.023 mo
2509.95 641.061 2513.23 630.855 2510.25 619.954 cv
2505.88 603.99 2489.59 590.851 2473.34 588.997 cv
2472.25 601.617 2470.4 622.879 2458.57 630.503 cv
2446.84 638.079 2429.85 633.83 2416.94 640.024 cv
2389.9 653.001 2367.91 674.652 2346.62 695.279 cv
2328.36 712.969 2299.77 730.571 2293.48 756.588 cv
2291.02 766.777 2292.72 778.401 2299.82 786.111 cv
2308.88 795.946 2324.11 797.175 2337.25 794.679 cv
2356.37 791.046 2378.36 787.644 2394.57 777.023 cv
2412.82 765.064 2435.67 759.773 2449.66 741.787 cv
2457.55 731.629 2468.7 724.663 2475.41 713.754 cv
2485.15 697.926 2494.05 681.415 2500.58 663.984 cv
2502.19 659.685 2504.11 655.377 2505.89 651.023 cv
cp
.952941 .427451 .501961 rgb
f
2449.79 746.386 mo
2408.69 778.629 2351.16 819.038 2307.11 768.872 cv
2294.52 754.539 2287.27 736.622 2275.77 721.705 cv
2266.55 709.736 2252.15 688.397 2269.96 676.16 cv
2283.73 666.704 2299.48 650.012 2318.26 654.392 cv
2326.57 656.331 2331.52 664.622 2335.53 672.152 cv
2343.27 686.681 2351.01 701.208 2358.74 715.736 cv
2360.75 719.504 2362.85 723.387 2366.21 726.015 cv
2372.93 731.263 2394.41 728.176 2402.88 727.216 cv
2429.53 724.194 2451.43 713.467 2476.86 706.845 cv
2476.96 715.186 2473.01 723.166 2467.58 729.496 cv
2462.44 735.485 2456.44 741.168 2449.79 746.386 cv
cp
.964706 .584314 .364706 rgb
f
2445.2 668.849 mo
2439.55 670.558 2433.86 672.705 2429.11 668.055 cv
2432.55 663.587 2437.48 660.545 2442.3 657.602 cv
2446.36 655.115 2449.36 651.527 2453.57 649.359 cv
2457.87 647.15 2462.68 646.018 2467.48 645.636 cv
2473.62 645.148 2479.57 646.051 2485.66 646.624 cv
2490.41 647.071 2494.04 644.524 2498.93 646.891 cv
2508.13 651.345 2508.59 662.98 2504.75 671.242 cv
2502.92 675.181 2500.53 678.816 2498.19 682.465 cv
2496.19 685.581 2495.72 688.654 2494.02 691.817 cv
2490.71 697.964 2485.91 703.759 2481.57 709.164 cv
2477.23 714.568 2473.83 720.232 2468.54 724.895 cv
2467 726.249 2454.85 736.751 2454.19 731.472 cv
2454.12 730.931 2454.3 730.388 2454.28 729.843 cv
2454.27 729.297 2453.95 728.672 2453.4 728.651 cv
2452.57 728.619 2452.34 729.878 2451.59 730.256 cv
2450.97 730.573 2450.17 730.112 2449.87 729.474 cv
2449.58 728.834 2449.65 728.094 2449.74 727.396 cv
2450.02 725.162 2450.41 722.942 2450.9 720.746 cv
2450.39 720.416 2449.93 721.212 2449.46 721.589 cv
2448.76 722.139 2447.65 721.695 2447.21 720.931 cv
2446.76 720.165 2446.79 719.222 2446.84 718.336 cv
2446.95 716.721 2446.34 715.388 2446.25 713.811 cv
2446.12 711.602 2446.75 709.082 2447.11 706.907 cv
2447.87 702.331 2448.98 697.816 2450.31 693.376 cv
2451.84 688.294 2453.66 683.306 2455.62 678.375 cv
2457.07 674.726 2461.22 669.297 2454.92 667.753 cv
2451.82 666.993 2448.52 667.846 2445.2 668.849 cv
cp
f
2231.31 624.108 mo
2232.81 630.383 2234.35 636.253 2235.63 641.427 cv
2241.43 664.8 2248.97 694.187 2263.01 713.89 cv
2268.54 721.644 2275.11 728.634 2281.26 735.892 cv
2285.28 740.641 2287.98 747.176 2292.42 751.326 cv
2301.07 759.427 2321.45 748.341 2330.14 743.937 cv
2339.23 739.326 2359.46 727.295 2360.03 715.97 cv
2360.34 709.87 2357.7 704.052 2355.13 698.514 cv
2343.32 673.144 2332.19 647.239 2319.11 622.542 cv
2312.33 609.745 2305.48 597.007 2298.38 584.381 cv
2296.1 580.322 2281.44 548.379 2278.14 548.379 cv
2270 533.641 2253.51 529.099 2239.69 541.084 cv
2218.57 559.399 2224.57 595.866 2231.31 624.108 cv
.482353 .517647 .686275 rgb
f
2351.21 683.727 mo
2350.94 683.727 2350.65 683.62 2350.39 683.379 cv
2347.63 680.779 2345.79 677.798 2344.15 674.572 cv
2339.98 665.431 2335.8 656.291 2331.47 647.234 cv
2327.55 638.281 2323.85 629.222 2320.52 620.032 cv
2317.37 611.339 2314.56 602.523 2312.24 593.571 cv
2312.36 590.654 2312.99 587.829 2314.04 585.032 cv
2314.17 585.177 2314.32 585.312 2314.5 585.415 cv
2314.61 585.477 li
2317.08 588.114 2318.3 592.238 2319.64 595.545 cv
2321.76 603.407 2324.23 611.177 2326.97 618.837 cv
2330.8 629.531 2335.14 640.028 2339.68 650.437 cv
2342.01 655.783 2344.4 661.102 2346.83 666.406 cv
2349.28 671.754 2351.85 676.595 2352.26 682.483 cv
2352.31 683.227 2351.8 683.727 2351.21 683.727 cv
.576471 .603922 .741176 rgb
f
2344.15 674.572 mo
2343.36 673.028 2342.62 671.429 2341.84 669.787 cv
2339.22 664.258 2336.62 658.714 2334.1 653.135 cv
2333.21 651.173 2332.34 649.206 2331.47 647.234 cv
2335.8 656.291 2339.98 665.431 2344.15 674.572 cv
f
1569.03 450.635 mo
1530.75 454.14 1493.78 451.067 1482.62 406.879 cv
1478.46 390.426 1481.23 372.772 1476.7 356.419 cv
1469.33 329.795 1440.91 309.031 1413.35 315.494 cv
1400.93 318.407 1390.75 322.986 1377.7 324.116 cv
1359.98 325.651 1343.03 327.397 1329.27 340.079 cv
1316.97 351.417 1310.27 368.725 1306.63 384.651 cv
1302.31 403.543 1293.21 418.444 1279.98 432.716 cv
1267.34 446.362 1252.96 458.443 1241.46 473.07 cv
1211.32 511.411 1216.85 550.142 1234.88 593.618 cv
1278.72 699.315 1428.94 633.896 1496.79 590.458 cv
1475.31 578.666 1457.08 561.022 1444.59 539.938 cv
1465.98 552.191 1487.38 564.443 1508.77 576.695 cv
1520.8 563.103 1532.83 549.511 1544.86 535.919 cv
1548.69 531.59 1552.78 526.537 1552.22 520.783 cv
1550.65 504.643 1520.93 510.087 1513.75 495.549 cv
1524.4 507.819 1545.57 506.524 1557.36 495.333 cv
1568.94 484.324 1572.8 465.787 1569.03 450.635 cv
.152941 .172549 .301961 rgb
f
1375.51 487.454 mo
1376.12 485.608 1376.75 483.769 1377.37 481.937 cv
1385.4 458.424 1393.27 433.769 1397.65 409.222 cv
1398.94 401.976 1399.81 393.951 1395.84 387.754 cv
1368.45 344.984 1320.11 452.174 1312.2 469.611 cv
1299.54 497.484 1284.75 523.709 1281.67 554.786 cv
1281.14 560.084 1281.08 566.15 1284.91 569.848 cv
1287.97 572.803 1292.62 573.292 1296.87 573.186 cv
1309.23 572.879 1326.28 560.377 1336.43 565.331 cv
1350.92 572.403 1367.29 574.445 1382.29 580.215 cv
1392.01 583.959 1406.65 591.302 1408.58 575.129 cv
1409.9 564.044 1396.58 556.227 1389.58 549.729 cv
1378.5 539.437 1369.93 531.297 1370.02 514.724 cv
1370.08 505.408 1372.59 496.341 1375.51 487.454 cv
cp
.964706 .584314 .364706 rgb
f
1444.27 429.515 mo
1444.15 430.22 1444.02 430.925 1443.87 431.63 cv
1442.16 439.849 1433.74 433.875 1428.71 436.105 cv
1426.6 437.037 1426.17 439.807 1426.26 442.106 cv
1426.31 443.63 1426.55 445.451 1425.98 446.91 cv
1425.23 448.806 1423.54 449.217 1422.51 450.783 cv
1420.53 453.791 1422.28 456.929 1417.83 457.942 cv
1416.15 458.325 1414.28 458.456 1413.02 459.632 cv
1411.63 460.93 1411.48 463.035 1411.34 464.93 cv
1410.57 475.387 1400.33 470.369 1394.14 468.926 cv
1388.72 467.665 1383.37 465.185 1378.69 462.209 cv
1374.47 459.526 1372.29 453.624 1370.32 449.163 cv
1366.58 440.713 1364.24 431.652 1363.41 422.451 cv
1362.72 414.651 1359.99 407.857 1360.2 399.878 cv
1360.79 376.536 1373.62 353.255 1394.35 342.499 cv
1394.98 342.17 1395.62 341.855 1396.27 341.553 cv
1412.13 334.201 1434.48 333.947 1449.14 344.438 cv
1454.89 348.554 1455.09 354.855 1454.85 361.428 cv
1454.45 372.155 1451.23 382.399 1448.01 392.553 cv
1444.14 404.781 1446.32 417.159 1444.27 429.515 cv
cp
f
1391.06 404.492 mo
1396.72 402.952 1403.14 406.205 1405.7 411.481 cv
1410.14 420.62 1403.32 427.866 1393.81 426.488 cv
1389.11 425.807 1384.57 422.701 1383.18 418.159 cv
1381.46 412.55 1385.4 406.031 1391.06 404.492 cv
cp
.952941 .427451 .501961 rgb
f
1420.12 396.652 mo
1419.72 396.075 1419.32 395.456 1418.72 395.1 cv
1418.11 394.744 1417.21 394.762 1416.81 395.341 cv
1416.48 395.817 1416.6 396.461 1416.76 397.015 cv
1418.44 402.775 1423.65 407.345 1429.57 408.258 cv
1430.87 408.457 1433.96 408.419 1433.98 406.432 cv
1433.99 404.97 1430.83 404.702 1429.8 404.29 cv
1425.93 402.749 1422.5 400.075 1420.12 396.652 cv
cp
.152941 .172549 .301961 rgb
f
1449.89 351.585 mo
1450.05 354.212 1446.48 358.172 1445.04 360.242 cv
1442.97 363.228 1440.68 366.067 1438.2 368.722 cv
1433.24 374.02 1427.49 378.593 1421.12 382.075 cv
1414.34 385.779 1406.98 388.184 1399.47 389.255 cv
1392.92 390.189 1386.09 390.222 1379.57 388.981 cv
1374.93 388.098 1370.08 383.194 1365.36 383.536 cv
1360.58 383.881 1353.7 390.62 1349.95 393.396 cv
1339.16 401.367 1329.22 410.475 1320.35 420.529 cv
1315.39 426.151 1309.86 432.546 1302.37 432.969 cv
1295.36 433.365 1289.03 427.977 1286.2 421.548 cv
1283.37 415.12 1283.33 407.847 1283.59 400.828 cv
1284.14 385.588 1282.86 371.958 1285.89 356.776 cv
1293.6 318.15 1326.05 288.103 1361.84 282.287 cv
1397.63 276.471 1434.96 293.22 1459.57 322.196 cv
1467.77 331.842 1474.8 342.992 1478.18 355.624 cv
1480.74 365.195 1481.06 375.576 1478.31 385.144 cv
1477.63 387.536 1476.72 389.835 1475.67 392.087 cv
1474.8 393.937 1474.63 395.992 1473.6 397.735 cv
1470.82 402.448 1463.53 405.277 1458.58 402.484 cv
1453.32 399.519 1447.32 396.714 1442.95 392.474 cv
1441.22 390.792 1439.6 388.665 1439.68 386.252 cv
1439.78 383.488 1441.95 381.459 1442.83 378.963 cv
1443.73 376.396 1444.46 373.678 1445.29 371.064 cv
1447.3 364.696 1448.81 358.176 1449.89 351.585 cv
cp
f
1364.78 366.655 mo
1364.55 366.462 1364.31 366.277 1364.05 366.1 cv
1360.17 363.426 1355.36 361.262 1350.98 364.453 cv
1345.11 368.729 1344.96 380.259 1345.62 386.664 cv
1346.03 390.697 1347.35 394.746 1350.03 397.789 cv
1350.89 398.768 1351.92 399.655 1353.17 400.029 cv
1355.01 400.579 1360.14 400.776 1361.69 399.58 cv
1362.87 398.665 1363.38 397.15 1363.84 395.724 cv
1365.58 390.244 1368.23 384.808 1368.2 378.947 cv
1368.17 374.129 1368.2 369.566 1364.78 366.655 cv
cp
.964706 .584314 .364706 rgb
f
1557.08 919.632 mo
1546.06 933.239 1549.33 949.448 1552.09 966.698 cv
1553.93 978.13 1555.62 989.586 1557.14 1001.06 cv
1562.06 1038.17 1568.92 1079.48 1571.12 1120.77 cv
1265.62 1120.77 li
1260.76 1093.86 1259.37 1066.14 1260.77 1038.92 cv
1264.33 969.986 1277.08 883.337 1317.75 827.176 cv
1334.86 803.553 1350.24 768.464 1336.54 740.026 cv
1327.18 720.595 1313.78 701.753 1303.82 682.109 cv
1290.61 656.041 1279.97 628.276 1276.68 599.239 cv
1273.38 570.202 1277.86 539.686 1293.08 514.739 cv
1307.45 491.194 1337.66 493.057 1360.34 504.247 cv
1380.07 513.979 1395.07 529.442 1414.01 540.218 cv
1431.99 550.449 1451.69 557.256 1469.71 567.422 cv
1491.33 579.622 1511.56 603.473 1508.22 629.796 cv
1503.87 664.135 1484.92 688.774 1521.33 709.485 cv
1549.88 725.731 1577.01 744.416 1588.97 776.539 cv
1601.67 810.668 1600.47 849.558 1584.99 882.592 cv
1577.85 897.836 1567.21 907.123 1557.08 919.632 cv
.482353 .517647 .686275 rgb
f
1525.64 980.424 mo
1526.64 980.848 1527.53 980.881 1528.28 980.402 cv
1529.93 979.346 1526.17 970.369 1525.74 969.072 cv
1524.85 966.384 1523.03 964.089 1522.23 961.381 cv
1521.61 959.271 1520.92 957.518 1521.45 955.389 cv
1525.17 955.576 1527.59 961.564 1529.68 964.028 cv
1532.49 967.336 1535.36 970.649 1538.87 973.245 cv
1540.75 974.637 1542.82 975.983 1545.16 976.121 cv
1546.19 976.182 1547.34 975.933 1548.22 975.372 cv
1548.87 974.953 1549.11 973.967 1549.58 973.664 cv
1550.99 972.746 1551.66 974.508 1553.02 974.866 cv
1554.62 975.289 1556.56 974.839 1557.71 973.615 cv
1559.8 971.371 1559.69 967.781 1558.53 964.943 cv
1557.36 962.103 1555.33 959.717 1553.8 957.055 cv
1553.32 956.205 1550.43 949.331 1552.67 949.624 cv
1553.74 949.765 1554.67 953.014 1555.54 953.718 cv
1557.2 955.055 1560.01 955.212 1561.25 953.472 cv
1562.08 952.309 1561.96 950.742 1561.74 949.333 cv
1559.5 934.911 1550.44 922.557 1541.04 911.392 cv
1508.51 872.757 1467.63 839.229 1448.33 792.553 cv
1445.57 785.868 1443.24 778.887 1438.98 773.035 cv
1434.73 767.184 1428.03 762.513 1420.81 762.907 cv
1413.92 763.283 1408.16 768.012 1402.93 772.513 cv
1397.08 777.559 1391.22 782.603 1385.36 787.649 cv
1383.42 789.32 1381.33 791.29 1381.23 793.847 cv
1381.16 795.545 1382.01 797.13 1382.84 798.607 cv
1399.07 827.215 1421.82 852.098 1448.86 870.818 cv
1461.49 879.56 1480.08 889.084 1484.65 904.908 cv
1489.89 923.056 1496.86 940.198 1507 956.22 cv
1509.24 959.761 1519.41 977.772 1525.64 980.424 cv
.964706 .584314 .364706 rgb
f
1542.49 933.781 mo
1542.23 933.781 1541.97 933.744 1541.72 933.659 cv
1541.35 933.619 1541.02 933.531 1540.66 933.348 cv
1540.01 933.014 1539.86 932.133 1540.19 931.53 cv
1540.33 931.258 1540.52 931.046 1540.74 930.857 cv
1541.34 929.94 1542.65 929.654 1543.68 929.423 cv
1543.83 929.389 1543.99 929.372 1544.14 929.372 cv
1545.01 929.372 1545.88 929.889 1546.09 930.791 cv
1546.34 931.921 1545.74 932.792 1544.72 933.199 cv
1544 933.486 1543.23 933.781 1542.49 933.781 cv
.968627 .662745 .482353 rgb
f
1535.06 945.025 mo
1533.41 945.025 1532.59 942.62 1532.3 941.215 cv
1532.1 940.275 1532.5 939.343 1533.41 938.959 cv
1533.65 938.857 1533.9 938.809 1534.15 938.809 cv
1534.8 938.809 1535.43 939.147 1535.79 939.741 cv
1536.62 941.106 1537.98 944 1535.83 944.865 cv
1535.56 944.975 1535.3 945.025 1535.06 945.025 cv
f
1516.81 676.206 mo
1515.69 675.137 1514.48 674.157 1513.19 673.281 cv
1511.44 672.098 1509.73 670.405 1507.79 669.554 cv
1502.17 667.084 1494 668.196 1488.21 669.411 cv
1482.55 670.597 1476.32 672.379 1471.22 675.143 cv
1469.35 676.155 1468.23 677.331 1466.05 677.746 cv
1465.35 677.878 1464.17 677.876 1462.82 677.875 cv
1459.67 677.871 1455.63 677.868 1454.79 679.573 cv
1453.69 681.832 1458.55 686.424 1460.17 687.493 cv
1462.07 688.741 1464.69 689.606 1466.98 689.323 cv
1468.77 689.101 1470.54 688.088 1472.32 687.635 cv
1473.98 687.212 1475.62 686.636 1477.28 686.247 cv
1480.03 685.606 1479.13 686.757 1477.33 687.807 cv
1466.05 694.398 1457.52 704.669 1449.99 715.127 cv
1449.44 715.889 1448.86 716.758 1449 717.688 cv
1449.14 718.688 1450.11 719.409 1451.11 719.577 cv
1452.1 719.746 1453.12 719.481 1454.08 719.181 cv
1459.73 717.431 1464.4 713.856 1469.26 710.633 cv
1470.66 709.707 1474.36 707.192 1473.18 710.56 cv
1472.45 712.68 1469.55 714.236 1468.03 715.766 cv
1464.75 719.085 1460.9 721.762 1457.5 724.958 cv
1455.34 726.993 1450.32 732.49 1451.51 735.86 cv
1452.57 738.854 1458.09 737.749 1460.15 736.676 cv
1460.76 736.357 1461.33 735.945 1462 735.767 cv
1462.66 735.587 1463.48 735.709 1463.87 736.279 cv
1464.2 736.759 1464.13 737.403 1463.99 737.967 cv
1463.75 738.899 1463.32 739.791 1463.23 740.749 cv
1462.85 744.514 1469.81 743.394 1472.03 742.437 cv
1478.37 739.699 1484.2 736.801 1489.39 732.322 cv
1490.26 731.563 1498.75 723.649 1499.81 725.093 cv
1500.67 726.266 1497.63 730.922 1496.99 732.003 cv
1495.68 734.181 1487.49 741.98 1490.6 744.846 cv
1491.22 745.414 1492.17 745.333 1493 745.179 cv
1499.96 743.872 1503.51 740.056 1507.91 734.852 cv
1512.29 729.673 1516.24 724.136 1519.72 718.312 cv
1521.17 715.886 1522.67 713.381 1524.05 710.954 cv
1525.84 707.796 1525.87 704.081 1527.24 700.802 cv
1530.43 693.214 1524.43 685.442 1519.96 679.692 cv
1518.99 678.45 1517.95 677.284 1516.81 676.206 cv
.964706 .584314 .364706 rgb
f
1421.28 749.37 mo
1421.03 749.37 1420.76 749.282 1420.52 749.084 cv
1416.13 745.572 1413.72 741.07 1410.92 736.204 cv
1407.87 730.898 1404.85 725.575 1401.9 720.211 cv
1396.15 709.761 1390.7 699.137 1385.77 688.275 cv
1381.12 678.027 1376.92 667.563 1373.54 656.825 cv
1371.72 651.06 1370.12 645.237 1368.88 639.32 cv
1367.72 633.789 1366.33 627.938 1367.05 622.273 cv
1367.19 621.173 1368.35 620.187 1369.4 620.187 cv
1369.98 620.187 1370.53 620.49 1370.85 621.243 cv
1372.98 626.179 1373.72 631.543 1374.96 636.751 cv
1376.28 642.342 1377.78 647.908 1379.47 653.402 cv
1382.94 664.716 1387.25 675.784 1392.1 686.578 cv
1396.76 696.938 1401.91 707.063 1407.25 717.083 cv
1409.99 722.229 1412.8 727.345 1415.63 732.442 cv
1418.49 737.582 1421.44 742.207 1422.3 748.044 cv
1422.42 748.816 1421.9 749.37 1421.28 749.37 cv
.576471 .603922 .741176 rgb
f
1489.57 715.569 mo
1489.13 715.569 1488.72 715.387 1488.37 714.932 cv
1486.97 713.123 1490.05 711.315 1491.33 710.595 cv
1491.6 710.443 1491.87 710.376 1492.12 710.376 cv
1493.35 710.376 1494.2 711.966 1493.23 713.057 cv
1492.5 713.88 1490.92 715.569 1489.57 715.569 cv
.980392 .756863 .627451 rgb
f
1479.52 707.926 mo
1479.08 707.926 1478.67 707.744 1478.32 707.29 cv
1476.92 705.48 1480 703.673 1481.28 702.952 cv
1481.55 702.8 1481.82 702.732 1482.07 702.732 cv
1483.3 702.732 1484.16 704.323 1483.18 705.416 cv
1482.45 706.238 1480.87 707.926 1479.52 707.926 cv
.980392 .701961 .478431 rgb
f
1105.6 450.635 mo
1067.32 454.14 1030.35 451.067 1019.19 406.879 cv
1015.03 390.426 1017.8 372.772 1013.27 356.419 cv
1005.89 329.795 977.477 309.031 949.917 315.494 cv
937.5 318.407 927.318 322.986 914.267 324.116 cv
896.545 325.651 879.594 327.397 865.838 340.079 cv
853.538 351.417 846.84 368.725 843.199 384.651 cv
838.879 403.543 829.782 418.444 816.554 432.716 cv
803.905 446.362 789.533 458.443 778.032 473.07 cv
747.886 511.411 753.417 550.142 771.448 593.618 cv
815.285 699.315 965.505 633.896 1033.36 590.458 cv
1011.88 578.666 993.649 561.022 981.159 539.938 cv
1002.55 552.191 1023.95 564.443 1045.34 576.695 cv
1057.37 563.103 1069.4 549.511 1081.43 535.919 cv
1085.26 531.59 1089.35 526.537 1088.79 520.783 cv
1087.22 504.643 1057.5 510.087 1050.31 495.549 cv
1060.97 507.819 1082.14 506.524 1093.92 495.333 cv
1105.51 484.324 1109.37 465.787 1105.6 450.635 cv
.152941 .172549 .301961 rgb
f
912.081 487.454 mo
912.689 485.608 913.315 483.769 913.94 481.937 cv
921.972 458.424 929.841 433.769 934.22 409.222 cv
935.513 401.976 936.378 393.951 932.409 387.754 cv
905.017 344.984 856.683 452.174 848.765 469.611 cv
836.11 497.484 821.317 523.709 818.237 554.786 cv
817.712 560.084 817.65 566.15 821.481 569.848 cv
824.541 572.803 829.19 573.292 833.444 573.186 cv
845.799 572.879 862.854 560.377 873.002 565.331 cv
887.487 572.403 903.862 574.445 918.856 580.215 cv
928.584 583.959 943.221 591.302 945.147 575.129 cv
946.465 564.044 933.15 556.227 926.15 549.729 cv
915.065 539.437 906.494 531.297 906.594 514.724 cv
906.65 505.408 909.155 496.341 912.081 487.454 cv
cp
.964706 .584314 .364706 rgb
f
980.836 429.515 mo
980.719 430.22 980.588 430.925 980.441 431.63 cv
978.732 439.849 970.309 433.875 965.276 436.105 cv
963.174 437.037 962.738 439.807 962.825 442.106 cv
962.883 443.63 963.117 445.451 962.546 446.91 cv
961.803 448.806 960.113 449.217 959.08 450.783 cv
957.094 453.791 958.85 456.929 954.394 457.942 cv
952.715 458.325 950.845 458.456 949.588 459.632 cv
948.2 460.93 948.045 463.035 947.906 464.93 cv
947.14 475.387 936.899 470.369 930.707 468.926 cv
925.294 467.665 919.936 465.185 915.258 462.209 cv
911.043 459.526 908.855 453.624 906.885 449.163 cv
903.154 440.713 900.805 431.652 899.982 422.451 cv
899.284 414.651 896.562 407.857 896.766 399.878 cv
897.363 376.536 910.191 353.255 930.916 342.499 cv
931.551 342.17 932.194 341.855 932.843 341.553 cv
948.703 334.201 971.047 333.947 985.707 344.438 cv
991.459 348.554 991.659 354.855 991.415 361.428 cv
991.015 372.155 987.8 382.399 984.582 392.553 cv
980.706 404.781 982.889 417.159 980.836 429.515 cv
cp
f
927.626 404.492 mo
933.286 402.952 939.706 406.205 942.27 411.481 cv
946.713 420.62 939.892 427.866 930.383 426.488 cv
925.68 425.807 921.144 422.701 919.75 418.159 cv
918.029 412.55 921.965 406.031 927.626 404.492 cv
cp
.952941 .427451 .501961 rgb
f
956.691 396.652 mo
956.289 396.075 955.893 395.456 955.285 395.1 cv
954.678 394.744 953.781 394.762 953.381 395.341 cv
953.053 395.817 953.171 396.461 953.333 397.015 cv
955.008 402.775 960.216 407.345 966.144 408.258 cv
967.434 408.457 970.532 408.419 970.549 406.432 cv
970.562 404.97 967.402 404.702 966.366 404.29 cv
962.496 402.749 959.073 400.075 956.691 396.652 cv
cp
.152941 .172549 .301961 rgb
f
986.455 351.585 mo
986.623 354.212 983.046 358.172 981.609 360.242 cv
979.536 363.228 977.251 366.067 974.767 368.722 cv
969.811 374.02 964.058 378.593 957.686 382.075 cv
950.909 385.779 943.55 388.184 936.04 389.255 cv
929.49 390.189 922.661 390.222 916.134 388.981 cv
911.501 388.098 906.648 383.194 901.928 383.536 cv
897.148 383.881 890.271 390.62 886.515 393.396 cv
875.733 401.367 865.791 410.475 856.919 420.529 cv
851.958 426.151 846.427 432.546 838.941 432.969 cv
831.928 433.365 825.601 427.977 822.771 421.548 cv
819.942 415.12 819.902 407.847 820.157 400.828 cv
820.711 385.588 819.429 371.958 822.459 356.776 cv
830.168 318.15 862.618 288.103 898.408 282.287 cv
934.197 276.471 971.528 293.22 996.142 322.196 cv
1004.34 331.842 1011.37 342.992 1014.75 355.624 cv
1017.31 365.195 1017.63 375.576 1014.88 385.144 cv
1014.2 387.536 1013.29 389.835 1012.24 392.087 cv
1011.37 393.937 1011.2 395.992 1010.17 397.735 cv
1007.39 402.448 1000.1 405.277 995.144 402.484 cv
989.886 399.519 983.889 396.714 979.523 392.474 cv
977.79 390.792 976.167 388.665 976.253 386.252 cv
976.352 383.488 978.519 381.459 979.398 378.963 cv
980.301 376.396 981.029 373.678 981.855 371.064 cv
983.866 364.696 985.382 358.176 986.455 351.585 cv
cp
f
901.345 366.655 mo
901.118 366.462 900.877 366.277 900.619 366.1 cv
896.741 363.426 891.932 361.262 887.55 364.453 cv
881.676 368.729 881.527 380.259 882.186 386.664 cv
882.601 390.697 883.92 394.746 886.598 397.789 cv
887.459 398.768 888.493 399.655 889.742 400.029 cv
891.574 400.579 896.706 400.776 898.256 399.58 cv
899.439 398.665 899.953 397.15 900.407 395.724 cv
902.149 390.244 904.802 384.808 904.766 378.947 cv
904.737 374.129 904.77 369.566 901.345 366.655 cv
cp
.964706 .584314 .364706 rgb
f
1089.06 918.587 mo
1086.01 931.99 1082.94 942.043 1085.79 955.529 cv
1089 970.655 1091.67 985.678 1093.71 1001.06 cv
1098.62 1038.17 1105.48 1079.48 1107.69 1120.77 cv
802.186 1120.77 li
797.325 1093.86 795.939 1066.14 797.343 1038.92 cv
800.9 969.986 813.645 883.337 854.323 827.176 cv
871.433 803.553 886.809 768.464 873.109 740.026 cv
863.746 720.595 850.345 701.753 840.389 682.109 cv
827.178 656.041 816.543 628.276 813.246 599.239 cv
809.949 570.202 814.433 539.686 829.652 514.739 cv
844.016 491.194 874.229 493.057 896.913 504.247 cv
916.643 513.979 931.639 529.442 950.578 540.218 cv
968.559 550.449 988.257 557.256 1006.28 567.422 cv
1027.9 579.622 1048.12 603.47 1044.79 629.792 cv
1042.75 645.871 1034.94 662.451 1036.01 678.786 cv
1037.15 696.214 1048.04 703.684 1058.38 716.215 cv
1081.75 744.547 1094.27 780.926 1097.67 817.205 cv
1100.83 851.017 1096.63 885.048 1089.18 918.042 cv
1089.14 918.225 1089.1 918.405 1089.06 918.587 cv
.482353 .517647 .686275 rgb
f
1062.21 980.424 mo
1063.21 980.848 1064.1 980.881 1064.85 980.402 cv
1066.5 979.346 1062.74 970.369 1062.31 969.072 cv
1061.42 966.384 1059.6 964.089 1058.8 961.381 cv
1058.18 959.271 1057.49 957.518 1058.02 955.389 cv
1061.74 955.576 1064.16 961.564 1066.25 964.028 cv
1069.06 967.336 1071.93 970.649 1075.44 973.245 cv
1077.32 974.637 1079.39 975.983 1081.73 976.121 cv
1082.76 976.182 1083.91 975.933 1084.79 975.372 cv
1085.44 974.953 1085.68 973.967 1086.14 973.664 cv
1087.56 972.746 1088.23 974.508 1089.59 974.866 cv
1091.19 975.289 1093.13 974.839 1094.27 973.615 cv
1096.37 971.371 1096.26 967.781 1095.1 964.943 cv
1093.93 962.103 1091.9 959.717 1090.37 957.055 cv
1089.88 956.205 1087 949.331 1089.24 949.624 cv
1090.31 949.765 1091.23 953.014 1092.11 953.718 cv
1093.77 955.055 1096.58 955.212 1097.82 953.472 cv
1098.65 952.309 1098.53 950.742 1098.31 949.333 cv
1096.07 934.911 1087.01 922.557 1077.61 911.392 cv
1045.07 872.757 1004.2 839.229 984.903 792.553 cv
982.139 785.868 979.805 778.887 975.554 773.035 cv
971.302 767.184 964.603 762.513 957.38 762.907 cv
950.494 763.283 944.727 768.012 939.502 772.513 cv
933.644 777.559 927.786 782.603 921.929 787.649 cv
919.991 789.32 917.899 791.29 917.797 793.847 cv
917.729 795.545 918.575 797.13 919.413 798.607 cv
935.639 827.215 958.388 852.098 985.43 870.818 cv
998.057 879.56 1016.65 889.084 1021.22 904.908 cv
1026.45 923.056 1033.43 940.198 1043.57 956.22 cv
1045.81 959.761 1055.98 977.772 1062.21 980.424 cv
.964706 .584314 .364706 rgb
f
1079.05 933.781 mo
1078.79 933.781 1078.54 933.744 1078.29 933.659 cv
1077.92 933.619 1077.59 933.531 1077.23 933.348 cv
1076.58 933.014 1076.43 932.133 1076.75 931.53 cv
1076.9 931.258 1077.09 931.046 1077.31 930.857 cv
1077.91 929.94 1079.22 929.654 1080.25 929.423 cv
1080.4 929.389 1080.56 929.372 1080.71 929.372 cv
1081.58 929.372 1082.45 929.889 1082.66 930.791 cv
1082.91 931.921 1082.31 932.792 1081.29 933.199 cv
1080.57 933.486 1079.8 933.781 1079.05 933.781 cv
.968627 .662745 .482353 rgb
f
1071.63 945.025 mo
1069.98 945.025 1069.16 942.62 1068.87 941.215 cv
1068.67 940.275 1069.07 939.343 1069.98 938.959 cv
1070.22 938.857 1070.47 938.809 1070.72 938.809 cv
1071.37 938.809 1072 939.147 1072.36 939.741 cv
1073.19 941.106 1074.55 944 1072.4 944.865 cv
1072.13 944.975 1071.87 945.025 1071.63 945.025 cv
f
1053.38 676.206 mo
1052.26 675.137 1051.05 674.157 1049.76 673.281 cv
1048.01 672.098 1046.3 670.405 1044.36 669.554 cv
1038.74 667.084 1030.57 668.196 1024.78 669.411 cv
1019.12 670.597 1012.89 672.379 1007.78 675.143 cv
1005.92 676.155 1004.8 677.331 1002.62 677.746 cv
1001.92 677.878 1000.74 677.876 999.392 677.875 cv
996.243 677.871 992.194 677.868 991.361 679.573 cv
990.258 681.832 995.116 686.424 996.739 687.493 cv
998.637 688.741 1001.26 689.606 1003.55 689.323 cv
1005.34 689.101 1007.11 688.088 1008.89 687.635 cv
1010.55 687.212 1012.18 686.636 1013.85 686.247 cv
1016.6 685.606 1015.7 686.757 1013.9 687.807 cv
1002.62 694.398 994.092 704.669 986.556 715.127 cv
986.007 715.889 985.43 716.758 985.565 717.688 cv
985.709 718.688 986.68 719.409 987.677 719.577 cv
988.673 719.746 989.687 719.481 990.653 719.181 cv
996.294 717.431 1000.97 713.856 1005.83 710.633 cv
1007.22 709.707 1010.93 707.192 1009.75 710.56 cv
1009.01 712.68 1006.12 714.236 1004.6 715.766 cv
1001.32 719.085 997.464 721.762 994.068 724.958 cv
991.906 726.993 986.891 732.49 988.082 735.86 cv
989.14 738.854 994.659 737.749 996.715 736.676 cv
997.326 736.357 997.902 735.945 998.568 735.767 cv
999.234 735.587 1000.05 735.709 1000.44 736.279 cv
1000.77 736.759 1000.7 737.403 1000.56 737.967 cv
1000.32 738.899 999.89 739.791 999.794 740.749 cv
999.418 744.514 1006.38 743.394 1008.6 742.437 cv
1014.94 739.699 1020.77 736.801 1025.95 732.322 cv
1026.83 731.563 1035.32 723.649 1036.38 725.093 cv
1037.24 726.266 1034.2 730.922 1033.56 732.003 cv
1032.25 734.181 1024.06 741.98 1027.17 744.846 cv
1027.79 745.414 1028.74 745.333 1029.56 745.179 cv
1036.53 743.872 1040.08 740.056 1044.48 734.852 cv
1048.86 729.673 1052.81 724.136 1056.29 718.312 cv
1057.74 715.886 1059.24 713.381 1060.61 710.954 cv
1062.41 707.796 1062.43 704.081 1063.81 700.802 cv
1067 693.214 1061 685.442 1056.53 679.692 cv
1055.56 678.45 1054.52 677.284 1053.38 676.206 cv
.964706 .584314 .364706 rgb
f
957.844 749.37 mo
957.596 749.37 957.332 749.282 957.086 749.084 cv
952.702 745.572 950.293 741.07 947.494 736.204 cv
944.441 730.898 941.417 725.575 938.468 720.211 cv
932.722 709.761 927.268 699.137 922.337 688.275 cv
917.686 678.027 913.492 667.563 910.109 656.825 cv
908.292 651.06 906.689 645.237 905.45 639.32 cv
904.292 633.789 902.893 627.938 903.618 622.273 cv
903.759 621.173 904.917 620.187 905.967 620.187 cv
906.549 620.187 907.098 620.49 907.422 621.243 cv
909.546 626.179 910.291 631.543 911.525 636.751 cv
912.85 642.342 914.347 647.908 916.035 653.402 cv
919.513 664.716 923.821 675.784 928.671 686.578 cv
933.325 696.938 938.476 707.063 943.82 717.083 cv
946.564 722.229 949.364 727.345 952.2 732.442 cv
955.059 737.582 958.005 742.207 958.871 748.044 cv
958.986 748.816 958.466 749.37 957.844 749.37 cv
.576471 .603922 .741176 rgb
f
1026.14 715.569 mo
1025.7 715.569 1025.29 715.387 1024.94 714.932 cv
1023.54 713.123 1026.62 711.315 1027.9 710.595 cv
1028.17 710.443 1028.44 710.376 1028.69 710.376 cv
1029.92 710.376 1030.77 711.966 1029.8 713.057 cv
1029.07 713.88 1027.49 715.569 1026.14 715.569 cv
.980392 .756863 .627451 rgb
f
1016.09 707.926 mo
1015.65 707.926 1015.24 707.744 1014.89 707.29 cv
1013.49 705.48 1016.57 703.673 1017.85 702.952 cv
1018.12 702.8 1018.39 702.732 1018.64 702.732 cv
1019.87 702.732 1020.72 704.323 1019.75 705.416 cv
1019.02 706.238 1017.44 707.926 1016.09 707.926 cv
.980392 .701961 .478431 rgb
f
640.259 421.965 mo
603.073 431.713 566.104 434.756 547.83 393.002 cv
541.027 377.456 540.857 359.587 533.702 344.201 cv
522.052 319.151 490.61 303.339 464.486 314.242 cv
452.717 319.155 443.426 325.346 430.738 328.605 cv
413.509 333.031 397.074 337.539 385.59 352.308 cv
375.32 365.514 371.558 383.687 370.582 399.994 cv
369.425 419.34 362.9 435.533 352.197 451.784 cv
341.962 467.324 329.77 481.602 320.83 497.92 cv
297.394 540.694 309.213 577.989 334.144 617.911 cv
394.752 714.967 532.181 625.754 591.978 571.758 cv
568.851 563.656 547.968 549.246 532.184 530.501 cv
555.299 539.072 578.416 547.642 601.531 556.213 cv
611.165 540.829 620.799 525.445 630.433 510.061 cv
633.501 505.162 636.698 499.506 635.203 493.922 cv
631.005 478.259 602.579 488.512 593.105 475.352 cv
605.63 485.705 626.303 480.949 636.087 467.973 cv
645.708 455.21 646.471 436.29 640.259 421.965 cv
.152941 .172549 .301961 rgb
f
455.42 490.082 mo
455.716 488.161 456.031 486.244 456.347 484.334 cv
460.407 459.821 464.118 434.208 464.404 409.275 cv
464.488 401.916 464.023 393.858 459.089 388.396 cv
425.043 350.709 394.978 464.384 390.033 482.885 cv
382.13 512.459 371.847 540.757 373.916 571.919 cv
374.268 577.231 375.204 583.225 379.59 586.243 cv
383.095 588.655 387.761 588.373 391.939 587.57 cv
404.075 585.237 418.845 570.102 429.669 573.322 cv
445.118 577.917 461.608 577.241 477.345 580.468 cv
487.556 582.563 503.201 587.402 502.443 571.132 cv
501.922 559.981 487.503 554.458 479.53 549.198 cv
466.905 540.868 457.113 534.247 454.488 517.882 cv
453.013 508.684 453.995 499.329 455.42 490.082 cv
cp
.964706 .584314 .364706 rgb
f
513.72 421.633 mo
513.721 422.348 513.707 423.065 513.678 423.784 cv
513.342 432.171 504.053 427.663 499.455 430.69 cv
497.534 431.954 497.559 434.758 498.024 437.012 cv
498.331 438.506 498.861 440.264 498.537 441.797 cv
498.115 443.789 496.517 444.472 495.755 446.187 cv
494.291 449.48 496.537 452.286 492.309 454.019 cv
490.716 454.671 488.893 455.108 487.846 456.475 cv
486.69 457.983 486.883 460.085 487.057 461.977 cv
488.02 472.418 477.093 469.15 470.749 468.745 cv
465.202 468.391 459.509 466.825 454.406 464.657 cv
449.808 462.704 446.679 457.242 444.003 453.165 cv
438.934 445.443 435.129 436.891 432.805 427.951 cv
430.835 420.371 427.033 414.117 425.923 406.212 cv
422.677 383.09 431.505 358.017 450.18 344.002 cv
450.753 343.573 451.335 343.156 451.926 342.753 cv
466.362 332.894 488.362 328.973 504.546 336.912 cv
510.896 340.027 512.129 346.209 512.967 352.733 cv
514.336 363.38 512.848 374.012 511.342 384.558 cv
509.528 397.256 513.715 409.108 513.72 421.633 cv
cp
f
457.122 405.692 mo
462.452 403.244 469.319 405.398 472.716 410.18 cv
478.599 418.465 473.062 426.734 463.456 426.937 cv
458.705 427.038 453.72 424.719 451.599 420.468 cv
448.979 415.219 451.791 408.142 457.122 405.692 cv
cp
.952941 .427451 .501961 rgb
f
484.504 393.184 mo
484.012 392.68 483.52 392.134 482.862 391.883 cv
482.204 391.632 481.322 391.797 481.024 392.435 cv
480.778 392.958 481 393.573 481.251 394.094 cv
483.849 399.5 489.737 403.152 495.735 403.079 cv
497.041 403.063 500.09 402.516 499.78 400.554 cv
499.553 399.109 496.392 399.364 495.302 399.128 cv
491.232 398.244 487.416 396.169 484.504 393.184 cv
cp
.152941 .172549 .301961 rgb
f
506.457 343.839 mo
507.055 346.402 504.177 350.897 503.1 353.174 cv
501.547 356.46 499.758 359.636 497.745 362.663 cv
493.726 368.704 488.803 374.16 483.09 378.642 cv
477.014 383.409 470.15 386.99 462.918 389.28 cv
456.61 391.278 449.88 392.433 443.238 392.281 cv
438.522 392.171 432.93 388.132 428.329 389.244 cv
423.672 390.37 417.995 398.148 414.746 401.503 cv
405.42 411.137 397.111 421.755 390.011 433.13 cv
386.041 439.491 381.636 446.709 374.322 448.356 cv
367.469 449.898 360.342 445.623 356.495 439.747 cv
352.647 433.871 351.414 426.703 350.512 419.738 cv
348.554 404.615 345.05 391.38 345.544 375.907 cv
346.801 336.539 373.873 301.568 408.22 289.95 cv
442.568 278.333 482.143 288.72 511.184 313.257 cv
520.853 321.426 529.624 331.269 535.034 343.173 cv
539.133 352.193 541.151 362.381 540.013 372.271 cv
539.728 374.743 539.214 377.159 538.543 379.553 cv
537.991 381.521 538.161 383.577 537.433 385.465 cv
535.465 390.57 528.738 394.559 523.392 392.618 cv
517.719 390.558 511.342 388.775 506.338 385.311 cv
504.353 383.936 502.403 382.106 502.091 379.711 cv
501.734 376.968 503.538 374.611 503.995 372.004 cv
504.465 369.324 504.737 366.523 505.121 363.808 cv
506.059 357.197 506.482 350.516 506.457 343.839 cv
cp
f
424.981 372.689 mo
424.726 372.536 424.457 372.393 424.174 372.26 cv
419.908 370.26 414.81 368.916 411.011 372.783 cv
405.92 377.966 407.667 389.365 409.37 395.574 cv
410.443 399.484 412.408 403.261 415.55 405.823 cv
416.561 406.647 417.726 407.352 419.019 407.516 cv
420.918 407.757 426.012 407.108 427.343 405.673 cv
428.361 404.577 428.619 402.997 428.832 401.517 cv
429.65 395.825 431.374 390.027 430.375 384.252 cv
429.554 379.504 428.838 374.998 424.981 372.689 cv
cp
.964706 .584314 .364706 rgb
f
596.631 928.25 mo
605.447 957.786 614.187 987.327 620.61 1017.32 cv
622.698 1027.07 650.613 1120.77 641.913 1120.77 cv
336.413 1120.77 li
331.551 1093.86 330.166 1066.14 331.57 1038.92 cv
334.248 987.042 338.487 926.295 361.372 878.768 cv
384.389 830.968 396.037 785.08 387.947 730.734 cv
381.576 687.947 365.304 647.465 361.814 603.797 cv
359.584 575.88 362.172 547.072 373.568 521.489 cv
382.459 501.53 404.003 495.909 423.872 501.286 cv
449.755 508.291 467.375 529.792 487.434 545.99 cv
508.239 562.79 534.27 573.109 552.295 593.317 cv
590.143 635.765 557.086 705.571 559.407 755.443 cv
562.159 814.577 579.813 871.909 596.631 928.25 cv
.482353 .517647 .686275 rgb
f
509.581 1010.94 mo
510.408 1011.64 511.252 1011.93 512.106 1011.69 cv
513.993 1011.17 513.031 1001.48 512.998 1000.12 cv
512.929 997.287 511.861 994.559 511.894 991.737 cv
511.92 989.538 511.766 987.656 512.895 985.776 cv
516.404 987.046 516.963 993.48 518.243 996.447 cv
519.961 1000.43 521.734 1004.44 524.329 1007.95 cv
525.72 1009.83 527.308 1011.73 529.501 1012.54 cv
530.471 1012.9 531.642 1013 532.647 1012.72 cv
533.396 1012.51 533.906 1011.64 534.443 1011.48 cv
536.066 1011.02 536.187 1012.9 537.384 1013.64 cv
538.793 1014.51 540.78 1014.65 542.232 1013.82 cv
544.892 1012.28 545.841 1008.82 545.556 1005.76 cv
545.27 1002.71 544.027 999.831 543.346 996.838 cv
543.129 995.884 542.387 988.467 544.435 989.401 cv
545.417 989.85 545.353 993.228 545.984 994.158 cv
547.185 995.923 549.825 996.895 551.519 995.592 cv
552.65 994.724 552.997 993.19 553.199 991.779 cv
555.275 977.332 550.227 962.867 544.504 949.44 cv
524.705 902.976 495.433 858.952 490.641 808.673 cv
489.954 801.472 489.766 794.113 487.413 787.274 cv
485.06 780.433 480.022 774.007 473 772.27 cv
466.305 770.613 459.407 773.447 453.093 776.222 cv
446.015 779.332 438.937 782.443 431.859 785.553 cv
429.517 786.582 426.941 787.855 426.094 790.27 cv
425.533 791.873 425.878 793.637 426.246 795.295 cv
433.39 827.399 447.86 857.85 468.238 883.665 cv
477.754 895.719 492.746 910.269 492.482 926.736 cv
492.178 945.621 493.833 964.056 498.841 982.345 cv
499.946 986.385 504.394 1006.58 509.581 1010.94 cv
.964706 .584314 .364706 rgb
f
540.56 971.426 mo
539.863 971.426 539.185 971.324 538.643 970.933 cv
538.304 970.787 538.01 970.606 537.719 970.324 cv
537.192 969.813 537.308 968.928 537.796 968.447 cv
538.016 968.23 538.26 968.083 538.522 967.965 cv
539.072 967.507 539.836 967.396 540.591 967.396 cv
540.991 967.396 541.389 967.427 541.753 967.454 cv
542.771 967.531 543.735 968.378 543.656 969.467 cv
543.571 970.623 542.739 971.278 541.643 971.369 cv
541.288 971.399 540.921 971.426 540.56 971.426 cv
.968627 .662745 .482353 rgb
f
529.517 979.932 mo
527.389 979.932 527.278 976.984 527.421 975.399 cv
527.507 974.443 528.159 973.667 529.14 973.566 cv
529.206 973.56 529.272 973.556 529.338 973.556 cv
530.207 973.556 530.973 974.148 531.194 975.014 cv
531.588 976.561 532.038 979.725 529.727 979.923 cv
529.655 979.929 529.585 979.932 529.517 979.932 cv
f
477.705 759.506 mo
477.366 759.506 477.016 759.336 476.763 758.965 cv
473.6 754.324 472.614 749.315 471.361 743.843 cv
469.995 737.875 468.663 731.9 467.412 725.908 cv
464.975 714.234 462.869 702.478 461.335 690.649 cv
459.885 679.487 458.938 668.256 458.846 656.997 cv
458.796 650.953 458.968 644.916 459.514 638.895 cv
460.025 633.268 460.401 627.265 462.751 622.059 cv
463.127 621.227 464.139 620.671 465.045 620.671 cv
465.85 620.671 466.573 621.111 466.691 622.188 cv
467.277 627.529 466.419 632.876 466.075 638.217 cv
465.705 643.952 465.508 649.712 465.515 655.458 cv
465.528 667.295 466.409 679.139 467.887 690.88 cv
469.305 702.149 471.268 713.338 473.445 724.484 cv
474.563 730.207 475.743 735.918 476.962 741.622 cv
478.192 747.373 479.656 752.658 478.775 758.495 cv
478.678 759.136 478.205 759.506 477.705 759.506 cv
.576471 .603922 .741176 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.2
%%Title: (1140.eps)
%%CreationDate: 9/18/2020 2:09 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9T<qY0UX>hAc]6!QYXZS17RXsbb,mV@=QO[(TccZHqsJ+i'>.kEsij37.(),?glJP)c=md53O<?u?qEO4CNlcj2"r%h"M
%)2XKSTI@,\q#hf=qk(:(6iB>eJ*8;8BMN$A2\TYGL84T^*7\uES!.H`gX)C[S7S"nFus+NVUZ/TM4\OH3`2qs7AXlZ__D+`ieCX:
%_`b8`n=8&=/T"Z#[6qd'Ulg!N2da#P/f4RQPBQ1Ndt"=.f'1!H?u52DG&\(;:'n&`O73'7X6T)4V06seq<5l%Z&E?,S_%&FI/sN[
%;[iTo_*oiQ<Re2!Z0.p;^#3D@:Z2iclE#[kD/tsK'/APYh>:]3A)opCs%e`mrsu_ir.L\FMPGECSm3n)F0KfmOf!@(0!i51Qk'j<
%MiTD%3EXWH/OSo=7#H)B(Kj=1W$!*i"^.S1:R_,=Jimkso<]>I6n6:#6:_fihH0SYYObTQg(.Kd,>9+mC0@lhU5`<H]`&:,aRL5h
%U*Uq4iC#TBbH0@^EmZa$la!L6J=h"S@S>q'/8GI:59).iW'obXo#\Y[*X1)oC)tZ.e**NV_N[agYFThU=nS\IlH&TE3GW?RJpBd#
%*<c&t6bib2Yb29+;?>hp@O,*B.7Okn8qD_g9GtLaJB\M!h4Fnl`"Dlf8LVY"B^D.`=7p/b-rWF"Oa=Td@-QdH.YE;op-45/OR2bC
%o`+X9%\2a)Zt>pIL4)ge3/iG!S`FeQ<3r)K)^q:9IZ8t?1r3&uZeE#Pr'IR&&D^BJ'[lJuC;LF+'*nO*InoBHnoN+?_SlW#m'\[o
%MYZ00pgRg@W)6^2WDW@XMHogQ516<3SNffK%UV#'9cY."8C^rD0*]\Q[8*^pIb7umh\l2].s4Mne?_i>'joo-Ne6ae'eH`q'Z9Z2
%+#a:R<3/:^E%h%@s0%ph!IJ5E_ZB,T<:blWQn?@oG!@o1jp\Ys=p(YpV=XkmW$'XLOP!Frgpe791qNp-+esu'ji\-o9<P-i4#Lsl
%>-m!*N,F+cXrOFGgY@aT:^odq>&(+8Q`.FED:b_<Bc;WO5IitFaa&kN_E2%;nBXSO2"Ys$0TECb#<JrQ$n_Lch9k"L'oh*cSi(Ba
%I&*LgiB72AU%UY,>5eJE[_Z7AblejGBpO.'E9=Je7P>55kr$fF/:A\>auTO^(rMuu-i\r/Ln3(S?Pk8u\Y;#+LnO<E]qZ$RdqlBF
%18XP![A=JYl1`C4LD6>rY;uP^0_hJ7@qbaKrosJg8-d&!mD3Eb%,YqtZDS7pOO$M3K].W"rVYYQK_#)p0Ucr8#b80l@^i*5ODR;(
%Qt<8cqikj,;7<hYl+p9P)$&m:7Js(T'?Pue5),rdr7#m2#&RC248i!8DQd,9e#Tn%R!qc;@<[>=oK-qbM&\Imr,b6Fce0Z(:DY;S
%3B\#1.FfMd\PmQ88?^pXLbVIhkK%2KVQ<,.SYRG^kSrbL/Lk7ukEsYsWR&f?jQU4l<+2[VG:T7B9Pg0nNXd,mCJM6.5>6.S#^W<@
%Zio4L>"(uHRjIH;o'F!&Uh_[Ze-Po>'ME4c%6#?0hf2i\Y[>l-lo*-]*VG1<V/pgORS+%9_Ui<5e[CdP['qY9V]-`VY.mW6)+O]`
%M1VoC?RpM8=,s+QQGZZiPW-3T8NX.t;AUsYl,El`B,q`Zju@E$V1Y<[+_*P"+N&#0Q3rJ3$X/9jVee"3#A]O)b_<V*VH&`!lg"^j
%-aa9r=f-3qQNo*@\_0fZAL]WsW>rZHjVBnBX&pi>p;X)2\!P4lVo27jR<)efF-t1^-kS%P\RdD&biP/$gbP5nMd\QZ:q9hm?%?b:
%*>,WLcacrT3Q^G,dtqj)1a?@+bN9niXXdHRB=h);C-Qf\(=cE^j6Sr]8_YBt8S]+bTICf8ELuH6Ai\>!!Y3^t]</-Ypiu(94)T4M
%4CpJ@?Ci@T]2Pi"[h,lDBks7GR^Aa<J?kX]W'("eq2EC-0!0Le/B#M^HFmrme<6+NWJ6nbhe;aud=nL0car.9CECaW^t]<YO-[k*
%MZ0Q6:R"Ad[%Hc^B(qcu52h)+OD*6BXb>ADGLWK/OaXlRC@opA#u(<N17R",#TV\VV[3SR`ULXGH1]8`;gqFq[qFKY1$^+m_%d^Q
%CD>6V0lj/Jlt"pP\@-kD1@dS,c1YOm/qY4s??PDjT#HTu^002mmW(u-O1r*H0l%'Q_Ca9X"`mFY@&FkP2X?kP)RsKcqr2G;\rhgg
%aJr#JYme<5I`8rb:?<E)J*%c/)sA2A>8pEoIX3iLQJSSu[#Q)ps&V;&Gt`h);m$$/TMJLZ-^n&cOHX`'mC5[Y`K\D]?,cB!cgm=H
%Vq!.rjNMuXblnQ_I`R:ITL1pCRNHAl9[ef%ReFqDma.]#@p5u*4t^N9S&CHr\bLliV3^eW)r'\&S/*tn*?T+mqbj_&<O[Gr5CQhL
%Bj.VW5$?6$e1cMha<H/d,5iQu$!oCu?>b5VZNRI7Oi5IrQ](6f\O!FW5CA!'AgK2c#!U)*?l/ZpnZHtMetHj[J)+IR'7J+5)S7tZ
%4bpf>G9NZps4dO@<PE`u4ELLPJq_#'E<hJnY1)bk0;eW1MkUSWjp%,WRJH3AH#Y'mn"A31Lq%E/PEr/Hc),+621rOa_p-3TLKgWE
%?d-K,kP+6<Gfu>b9i>o=%(2nilX*E:epP%K2tf)o/uPD[E%^iKk9:c\^28c(n<"UapbfnKURNC<hf3D8m\5@j5H]/:%iG4M(h^T3
%Cm'4k2SQ`t*TfIJpqrAWbrT_Y?.95Da6HqAZfoG.>Zb4L1)k*@+-CHiP%DVoEMJD/)"(-s):Kg"2?$F%NXGnX/ZkdO/ksUY3A$CF
%N<J*Fe"i;Q3kc!J"]<1?e"WjV2VjHo.Wl]d#s6oe6od;(M_#\DeOa(snl%lpf+a8=T,*PA^qXBjaZ[isAf`QiU8V'tKb_:MdiucX
%S!rX%=!o<E.,er\>u3BE3].q!+eQ'0B8kNWVOCYd9tfKm_R=pF$5VR9Cl<6FV6j&H;<.m?M;guKo2<;)Sj`CMIPCpP;-`A<X@(S@
%SjY"ZdRb-3cR>:#UF?/3G6Z?oqTXraRIda5$\?YW_Qc*]Mc*`SZRE!#I.km\\<4o(/B[N7b5]?5/AbO(=8"K:/n_H8U+lV!ZRDY=
%3fE!PR!FOeQY0/Z"Jmno(<)Q!brTa/(?mB-)e.sKlMnt3RX%"oj%>WpYc_]_EkWWekN[`P;A/Tqr/g^d`,Ar#1fpnXcS(5gSs/4Q
%,gZL0KkMP+f:kF\gJ&i7q4sPF=2_iKPaNi#I0\BB-*Ag<Y.5,.'%`GZ[\1-rZCkbHXt:]r/Q0*UToq$*D2E#b6a^L0[W&1R8AX!m
%eX!0-/Q?fZ#X(slIs]aKidq>`G@,Wu2?9(UoR/NYQ=f30"\UXTRaHr:#W*j;3;[;$IGsJdS"oGZ,-l^CX+bTjT:1lue=Y&cps%j#
%l*@-CbcssdR(%jBkfpD6d@90']K(#6X/2edUoRkJ48M^1[,pmaQHsW?k4;gpMM\Po`<brd9u5]mI"qYjhu^;OkJ4iQg@P?kRK\#q
%9=on=I/05$\U*0Aj$l:lpr&M%$]Y,jWSnQ7if!@gaeGgPNR,imIWslN)isO8Z8cIP84mKhA[Wa83pXA%$iJcsbI9G*B)^ED@l7uG
%pV[\m"e84"E)Gu&O/jQe`IXSW(08#>@GJ,U&K80)J[(V5AN(fQK37e\4q>IRP!s\qh`$2KR<L3"+Dfi!nqaI=e"]4:oM2N^Fklcg
%J$kK1a,Pmn!m1#"I`l*p/baa]qnM$bEb,2o$4e2J2-jPVs"=%qQi"P@rEiVi%sNP,3o\Tf/baXZHbTMB.1>s7O6)u%N.aRA4l:N5
%S1aP`s+*jS\`Z$aN*S]R?E&&$>/G)B%,H$#@it-+EFkV^#]T<5[W^9&5^ni>qlKOSmaIo2V^Dk*DQ\2;g^7elpU$mqW>UHda4I+)
%HF;=T%`&cAa4:E:mr+S=79im7#$L#m6FNtW/LtB3dL)E0&L(4Je!^l)ZEslSRpIrs5BPB$3Y>"87ncQmNnoM\a3pA+pU7/q/aI&a
%3QD!+^*S!SJgEm0Yq_pNdMq#f\9D2<R")m6ZkQ/T6&oQm2j`&[8)Gb^Bp(M+6t?nFVg:6IBdXhPSgTq![9o#i$F?[2Q$,eN6$R&p
%f$>E\U0QUXKUWdgp>u.16L;`sB%ksbX%iQGJun3@":f?Q(1*;\QY#,e=a4)r_Fq)V@M`?s<>\V`=Vb>0KpQB0AQa7\(1*;\QdN[n
%oH8L#cM>[X!@co!GilShoW8J>bSQEXZei!$^Bn41Cgn0B^s,dYB)Q-ODLQFdlOTIe['rQ8Oia[hD8OX]3E7/*#+\8^ir5J(loUHn
%6RJ,EEV^S3lcsJ^T#B\2LhGQt0#CPSqVkVQ-STs),@3FOV/r.Ik;\P"mG@o+jjTQ^:LBQVRf7)o;j=JbAb1uE95=IdF7Gctjfe6Q
%*_?=F?fb)4L!9MAfj26=Z9/Ua8+u-GS9<ANGmc>WQ+#709sV.39=(7[I*IYB\Tf>Okqlt@59k4F2s(*i77.kI)43;'r5S-&q%:b)
%6^ri>NT'*/Y;N\a\N;f.kVt07(1[OajLB2H5A-Mm2f[ai_a&s#UKE$0AQNLaHi9fW%0"H8(s@[dqo!%d@h,fOAK>8-"(6CWa-[SL
%=m.o$)a.EV0kT4i0'a@\$KK;j`j1UZ-ZtAt:PRFt>oi04o_be)ju[me1p2'WP,;[&Jo8*pZ1plYC!!pX&"i0UcDruW[FA'5;c@m]
%ADY&h97dAc:Id#i$6sU*4M,lP:UAe8"!RY_ANJ,^disYZ\Th"J;/L)_97,u>c'"Rgi*H@cf"OS.I96!A=D#I19./Pm--bNrP?_PW
%nrZMY6hQb+9U_G@-Fn+s$h3YYOGh^NF\F_+U,b@d(@o"%s453prN="5TkbCT#$CJE('Ru4TsL>[/ftTZOd8$+Ok6m8l6bh(VupCE
%Lmden?>`<$ott+=P\PKrCQPRB`)a`/&:#>k%"j%,ASIhs'KTU?SF]d<7tMMT(@U6*b8ci-l2O=,I[]fkSEFq\XD"$H/[N!!2Rgom
%Ag8$oAok;P<6K)qB!XK6@Fm9(S)\=&!Dc`J=?bp-!=Nt9caf]`REdD5\Rdf\9$]8`>GcHo,B%"ad^^L,!"#2X,%a!7F/<!^P]!p-
%\nfbG="Vs^s&eo@c:-qWa,a_4S2Zf4^'?F;0KJaq)S!>-Y/Ko,Qnr79$iO=eJ,&i,;\[U<JCd$WJ;i_4R<J>]kIE=.M?/:-rANt\
%d83L/#\>r_/[_BuIYM-n$JV,DL7?&%YMZ^CFXatK0r$Q4C6>W3krGXJ%=dbR56'm\mSjI,P6X5t((8mZqgE`BT)$c\!G0,aP4s76
%M*TtUYtTNDhN&gc`&1i$U6`068Tbj+N-([-?*7OO3]EYOp&"F;$>QC2[&Ehrk3<fl#&a?(LZ"u$a[t:b)eNCe(VSbOE%[eQrM;Ha
%Y-r-N4f9T.dDaRh1]tJ&/DiPc:5^B,1K/NFcgM45OueF3ZL2n&[smL,#RFsfQo(/WgbR`Sl$2AqDlfM!QtOgA!uE[t?a/G/OZqVW
%2>UQ;ao6$RJ%!Rup+6?$[k*0+APi"<K;)pNoT(XNhm;:P%Z8!rT(j1aN>==)=J!65`7*>EL'0+Q\b`g":2s[>Bk`k@k?T2(@$M<B
%\7o1Eig`5T,83"t<M(IE)1![.l=2(9H#tP(bIY%K:u&#%\Do4e.`P8F#1_-`[>*i/9bL+^3/\\5ld!n;K:d;LkT5OmhClGPa3lX?
%cUmtF6G2rM9A_]j^2Y2EaNKnZc>(_tH^sL$aQ'b4@P0NITqC;M=RY3T^aBbCq(.nYN&MRDSSu^7bg&84J&dje*pX^o%-QW<'6A_F
%$q9piI.h:$nhmi9UDq/8GFTGf#B4m6_HF:]$1$'bljV?(RA?F\%24ZuOH2heomZoo(T1t7F8q2Xi$(9/j7a:%VF&S],6-^_kT]m&
%cI4PGC&N,NOGRno2)B/(=JA9#.4j%KJc?&cbe^1&nq>gMiW8*%:$H^::4EcpjpLH[r0hRB:bNjThpSp%MIr]-CPqeG=d*ep/\7)4
%>SQg4b!h/Z&:ETJ@Q2_^b%Qt+2G4j-#pYA(A0Hf(WC9mpK;G#2>KrPS#IF2)%u65\#Cd@kYgd9sioWrB1T9p&Me_Au8@,c6IUAI#
%+$VYeQ9LV2O1uePEo\fa(s<?NY<pD&Lun(c@elKonBI:BXi3%(rL@Vg#;8FgD#uUYT:4"EN'\T['(!$H[Ar)*?MX&>:0ZeJCgY@'
%?24/Q]U/j<'J#YANJ^rrG)\O[Rqbs0W&(I_C]*HAARA01L7q[c8($X+0MQ$rrp?"dT3U7H;k`'"J;DV7r!(ThX:H`s[mGT5Zjk2W
%$r)r#pkQ8<f_k?a=6s]WX-:R/BXbetO.58R:%Aa1dWZ5eTE;,VK'&STQ4T8)l]%4(%6Dnd)?/)L(kdBV<,B*qImOdo#m01>+d&+%
%J]//$_?huFO;V(2"SfbdSA^G:TESJ1WLF`bdm%Yjo+SkZ_5C@JqZHU\SP]'A1faN.>eE<8JZ6hs6?5[<e_$kI$?F3RldnhRWJ9!g
%BJt"D,*J]TN5WM`6BWnB+sD_=":dXE'$na!DlpbN$Q,SnYt-#XfS="mr'H^0?MNu=Ei%+7kIW&OC?f+(Rqu'GI^rX^pVueNG(Fl,
%pD3`Lmt.;,0')"Z^'pt?Sebmg\.R!]aF(VC?W:3Z-#ta?ZV`Og*:!PaiTa_7\/BUN:7A"s"*0m,g&W7s4`C'6:pKQVM"=o!VQ&qj
%9f4?WVP]Wb>,?9t^t?&-TmuaN0T2rNTs_I$]>"mIroSgcEo&m"K^_")gJ_#)Z$[aZObKT3_KZ'-rq^3ohWB%nrpTm\Y^=;0!?;=u
%R(BrS,cP;@kGOMMi1j^MVKIP1T?o[VEPG`Js(%LHBU3WZG3sQaKXCI>>ApsBJ#HC0nn!%KSajR`jbCTdg7r$<SlJ4mM6C7_qH,0<
%"d\;Yc7._/$[+PBs-$(Qf84@5c*&@(k\$9Z](Y5qXiO-2?2mKmq"p#;(kf%T]9BX_oefg:iC:CW(]O.p+oK5@/7@Ag:i`A<e89ER
%`XKZ?DcP2(>K$jaK)u#kpR:rnYabRBB@$S/lWGc;DHHh)!WASl,]=WJBlRONiC#TBbH0?WQcIPAmbQ#r.?:kf:S5Ls-o3$4B=KTD
%r:2*c=iJ]iTaNVr0gnCOq^#ZXSnY[#0dD?k4NE1iM&3n%bLKgba\%<VAY))6!'tVRS4$H+lp/(3C%dsk=21mtPJqp^BkAOs!h"4o
%S\1G<2F7f@GVcUbL=T5F&9IdPMc'KI@_Cf/--2@s3I5UlC.r_Vf2Y3,CE;;:AB?[0^<$o@:J3;6ZTjJIHTfP(4Z'8+fE4%]G5]*?
%[9I6U\@>XqMKM!-FeQ6*R\g$&PcIoXQ$Xar1('j]SYE)eAVrUeSRO$`OFW4?^^9&51/uXu"oE&eWhjFSpLM2t$q']u8Ek!?:cfR(
%X-#0S4!"2XXP:9+lXV%73dA*,V-<XeDHNN;VV4C$I7_)8TJ&A;RHgGNTiu2(ZXD?Rf,1*M*m:1%dk'%oD?m$s]<1he-[g'%f%-oE
%)HG/`lqj[ehGK3BTm-?NRh7ZK)_A@'pIqO1+)3l%,bEs"I:1DfGne-pDMuZ;c"^=^C/iJp%@/`UQd9P@"*koh$+,j!Fsoj$B2GWs
%L7DrEg-B3U9;i4-e=t^nUnW`*S96nFi/$,l83Je)I)SWBoL!"Il5T;_EN"&2-t%pEAWgnNq/\bUkaOG&We#h`oQKpV?nR.3pD$gP
%/2X8-p^FBer^/aIc$W",QMRpD"If^G8\K>D1HcF"qj[n]Y^[7$QF0LF:8B?AEN.3C:'#[?m8#dkNfKcuL>LFYG/lB(RbQ[>d*b,O
%Z<W1q3=g;_A!qGj0`%ek"]U)0i9EBL75a9X(uBJn<Dh_SXS,";#16n`mt%=$oeJ"/_/)u&>.7A)1<m,u-i?UXj?A]>O*,m(OTB:;
%2LsmmREB_],^YJY!WKF8C9[(*QaZFL$PkaD(2JOgZq"m*I9AR5Ae>I_rd[Q@;2VBIP,BX#A95l>>6$rkf(]n$W!WoIIf^S7>?ZFT
%0n3k;$b&pcmpLC]6JIO?E\W1B=Yd*70^0f\W9mNi1O>VV:QYfa@m(+B,X5Ed97_F_+E`M^FVc:PNN+eG6Ib$4lLE6)q!LqbZJKFX
%i8W-KJn&>[8_E_/&.FiHjX6))32%*LT8hlYImouPE;0DQ@fgR4G!>4p@t)@>)5j6ERR;e%oHmG8hDl_,=VBRi@3b@:Q*%7[Z2/36
%e6>4IL^23;8KYDDMIcS0"TC]>4sujAb94jr^=),W'lOW3NpTlT;%JpCo:sY0d-K45G4^gb_+/t<=@@pV<[o99;03X:q='[&'5+c^
%^(oHas5sJfNc"04h[h;s?#EfG+=E]dW=.E@"."pZ.lt&3C:1hAfRh15DcY(RZ^7b6aL%t@*tnjr5!VcAAm2s`kghAoN7*K`g!;"H
%]sIKp,F+_b8Q*Q'*=2Fp3_tg-OSj8N<1>Q[BOQ^a]]mcHG#H@i0>X2=A6E^6eYZ8X=D8a0VM3n#?#]_HB<,Tt82ri5P@9.`,9bBX
%3n/=MmkiNcC59\90Tj$8reo&JZO,GLR&78=g*!Q8O_K\_%A]\$oem_E!R]jorBgM5bheE5-Q<>r\pb:g=f4/O2[lfnXR7TPW\cf2
%ZI,s-VSf6YV7/\EcTd'n@>pKa?T(lgcccp@/s6;T'Dg@73-7hjKFl1Q\j?sa'*UUk')Ij["#Z9q#/+igmWF\<-DZTkFJLtBN:!K$
%!%6[ge`Ze'2)0t?IgL%dqhEgF@d<$7PCNsmdF>0GAisGa<P)HT!9RoVDKh%'O,5#qejS!*m_+(oO!3;gJQq6>#Ao`'DiCPL\9+7Y
%qs6N9H'j57hE&NqnPe(410fbKL'M'jVM[U;U]mj,`ls)3i)l>i8g3.$`NdUkK2e,*?j665:5iTU&3m`"83ej5m_4W78fu8c_I2i;
%o;du7/'DY%46Vb>,i_%:,LfN08r]GVh93%#fr5F&pbPt\>u?%Cjs7!X:(A!0[4`$L<$mkA)+>6lCkrt,OLP^3XRLKoX),16+cH/T
%TqkmW1Mop2RA@%?CmpQTD@bB:QG2W?$>EimH-X&%CcMsd1\O1sG.31BC6P!):5j"_Ze6gP-S_T3ZcKtU1$StsqlV1<\VnG@279Mg
%g(ttP$tb(ULP5%8"f%oO@9NJ52p6MSZt"bD?)o'YNp52S\/\MGc]ik1d4SaRd1p-iag5I$9HDA?`sT:dIat2V0aC&_Bb5.XUt@[K
%SOVPj70GKrs3jeUAGC%H9:@/)C],_!Yf#f<!f[WRfiW3Lp$\Ro`R;MaJ`D^V]&&$X]igs5.+kk5`J;+#qGl*s^0'cMe]WQ[fkP:L
%q,P=6dpo9?SGG%U%hf_rE7q?h<Vo]q+.:(VAB.G7It'8)=DklCDjOW3F]5\NmT')?bM7Y=rO]@;Fi![oGSf&]pi+jK>^!gCgQU="
%\X759S>F;fHchTOCCCPcl&PW/T[ZrmIcg%b*=[q[YuXLr/I*>GV8^1GN+$g"M8cj#^Ch*,NjqW%/t%/P0q2dSAsj+4fKYhu&\&?N
%IgYT#W)%o?OsjdEJA$Mdq^Ticc41n7nN#(F99XCu4otU&0*dtcgC&7i:g<YUQTif\obUN1<"MfME_eG:ffY*%CJC"Y2lP9<k\L42
%5]9DTo_O!b_!Z!?Gbo2*oYZn[%6-YQQ:=.G8G.!6$N*(CUJ:\ae!a6?rIJ.I2C[^Rhi@,Nb(Zppe2CX?J'8&e$oT1pe7G*X%0*d'
%qaLehBm-HkaIG#TP\0NZ/AiO9Wp3;NDqaq_%T.(?0_&P$-I>P29H:",;*([5X-B=3p\i%4:QQ/:L:tj``ZJ0rJhtXsW@/2\ZY/^N
%#<!&%M)$U!"mKm(gT9G=SjHp\WNR$jElla6TC!qb(#aj&Q^OdB[d+.=E?Xi[Xa5Tuf_%#Z:8e&5pVOjFFC9!:opLs5l.E-B95cdk
%4:)2^*Pbp!9!26b*TgF5`oW'PH=9?/+rA0($cWE4iS,Fo)r[!GU\COdT?c8_:P741jHoqSPI0EO@2@W(fktT*]$Y[i'UeM4<T?^D
%mj31[IBCWX@$1X!U+m4%"5^*gh?<=(bn;/9q\qbZ9*_t!o'nOr0!Lp39WS0#6FbaPT&=6PeHac*(cfi!Q8jC)J3a6:n*-:>Jr*o(
%J#kTPIu,+>#i].#s3G?>-`SuZ4k/U&Q=aSpo>e(cjZ7B&\@'.:^:dD?aZerK[LF&4=T<";Ca].4F@OQr9X].,<WP?:PA5(AGJWs0
%5)A=@nEPpq&!J/HPdCsW_6RQ[ZVPK<+J:B-j)_'l(6dP.jQ+bsDDB\H:.K%QHDA)n7UJpUi(iafaZ&50=NN=VC+$(]e?$d"XY1m[
%agsG$0[F:kH,nR`[-&Baj=\+/fmghX1=$\R**E(q:WOOfc4WZ$3-S$9Pf2?!1n,cdcVc?m[SG&qo%bM\dqj1[E,(`,3*&D]-bGL3
%1.(f0P7>ip6,M;NB.*Y6RGU55^CT[9mqtPCS#moQr@AeH=pL$j\D$QpV*/%sNJ+Hhg8j5p@7p0HUR)44-iAEQqlk&Q[CRY5SRPCU
%22:;-1u1p@-ECACC,GJqg5PH9[G'%%0tRnD6mGiqeaIY1M,t56ZdBe"b9ur<]i$U"g8KIf.pK`A$)M0Y/M,]uFHWhgEW.T#'l02i
%FtAjGe,juk\!p.`X4QlCA)eK)8QP&MihrQR8kMO`3kp0#'b[4@nZt:RKcd'Op%2`Ng^Z1CafVsgg36Ar^bg^OkngT'AEE>bMAoFQ
%-<uDZ3f0;Ia,FuuANa1*Z>\-]rJbT>+BW_InPjoliR@X-1/lJCi^*B_23nc!S+\%De8cA&;-n[%;Q;"4q[tdc3O0<&j44>&e#es%
%1pM%g:2&J.]rNAr/Q+'tFo8$?;O)(CSsl@^<QWZj?c)Zg;)rNqm;E-0^dC&Hc*+l*!WHcnW5cY1@cZf/)JbWs)M-_.aL9TCf[V9^
%]3XB)<[kohl="9YA1;fR^&lSO)k(lndH.U(fN(;ZbfR"@\>@.R.G(e<\BV0F':Bm0F_XP]n0&=abe<5rP7m"V@-=P;+(gGf7l'L=
%Et([o'0!TQQ@&.*4DuFEp>U50)!i^8<B3].O5?)][^rf:p&se7S4:F):Lk0f"f@uO.iFq+$1+L4HCoA`;oa(]`)c0B*f[jE1SDQC
%FC9#?[DaKeX1Q&rY'5(6jk%s/,0dr]@D&qVd%:Mg`K(3rGT8>ena0Xj09%>rJg[.;-L:prgulX<n[0&],[UYqb4b@08l[fNj'qQL
%I-33Z]GE*J8tB(%[<*$3YT0Z.9R=AE_G0.(eBQ0cGJGM/Gt577WBM:r2F>u'?YHo\ZBA"K#tn]3eK<H87]pSWiQ*]IlBqr``VH!u
%FO[U2Q[JShHCm`"(3E1P$#XVaihl;=SsuLN4'CHRPq?5\$DrX_G.YJ1dU;),OV!7s%VXZ>BMU1Jd7Bt;&h=rE\f\KY:7;[DpSE@L
%H*FE$R._<DA+*RN]hl)CDnY7.eAR9W<0?%j9PTm$7;KHiaC$;P7gA>$*lOY2(nu(5_3[!Ilu=GAH'Ql#$J87Ao5BWKf\'4$,b:kR
%aY\'D/>j0C`[sL):ZQI+2oOP<iS\/m]6b>Y/9lBr/HVf#F_GF0KDM#@F.MbBfPkpYHu4=;n,%P[ppAR3BWVs`,nT$2hshtTBq(B@
%hUY*sS\b1Clh>!$LNGtln9P1QqSJ:cFqWFj\i]3'>($BEj5B3+G4VBu>].LN01X-$IFjgo#H2GYMQt$T=cH`&128irTARF@3rqD8
%0]5JP[:Pr8l#e_."+otkWD`\3]fuTR'LT9:HMr:;$WssO&\B`#S'HKGl6/FO"ts932FFb0gO'[3E?KSB_fN1-Xe-oFDZsakKl!n>
%/$Y)3&XRI!:-\V=2*qQKE)Qkf&rQ.\p/M)Se42W^j7Z2dWs<6OX&.LR7\3t>M;PB=p3&lb>`IjSU<S@oT9k["%sBBIO,jg(l(+'s
%-W^U3e]juI^MjfkM]50.#j$1n1fR''f/NNh<H26c*M-Li`M^lr\*dBnZ2W:O"ET[G7e+qKBKEImCW5d,ZfOjH&)-OK-)3EP>tGua
%N?^b:aIVCmR*W)$G]fA.5+!LED/jp$fM4+P$,P[+qg@!f@@&!&B^Cd3ah_5%lub?/aIWS`*$$7b=T718NX4m$bK5l(O[UBM0Mou"
%$rUihN6=Nl'sK8V7N5)i`d#fU>kD[8P-9;2iK3k4L6A#MGa/iG5NJ]t)-:H,Z<<0W&"&G+/0.Ejj.p98_7b]rFY/PrP(79'$,aI`
%q)'.^&40JVb)osrfC1:.C,#=sE"OeKW'L)@;nRrrYnp+u%Ht*1*IdBig8F5p68u,iG!OYU?f#R9O.*?Og9kW@(=_NgmZ;2MI.eFb
%hjH#h1LT824%]`o$'1+O5J!B'n6U/.h5l%X$k:RW2^>'Q)_*N*N6I*+@PX(^&p"-lYuS2%9q(R7N9cecN^ZW@)T$Vr!T`?Mn@d/p
%O:X@TdI/M/O\(UJ4+eEl.PF2XnXkq>[Km)E9&`jL!c\.]oc0Y<CW7tVeRJkEO'D)N8$$ZPge:3UV@M&pX;sD*>6LS^Lfh7OCHLeD
%:15psTlZejlK[N9n(WGpNYoYG.D/HOSGc9X0lO:K)XtlM8+OYJOO+uf`=7V0rV'gN/Lb_,9ujd?l4M,N7S*rKoDthObp-Ca"h,t/
%np(1oG>8g$em]H?r+.G:aYZnHm'^j)Wf`;kCTW'2ET&":BD)b%qncS(/.p3jaJKbr2+DfmBduSbUU3'+&1LMg]SK,i7i08lC\-Yo
%!Fiq)@jZAHI?$%(Df(hVon2t+B(]WMX;D1DrX^!D(88jL`T4[`KH0s?!_8HMb=CqZ=ZLE`\+SN>K[d!1KH6"mm)o:fCh[^c"Of?:
%V4jV-EHWOT'0Ai7?a$(8qQ%+HWAN2+&Gg9"^m;YM8\-=>\@UTPD!FI!H/im('In3C[)GX"`6CU,?nYXlqY0@pcFLV)#iNud'",Ml
%@U%aE%JSp@b,US'V%23$8e87>`&+A3Eed$c0Iu>*.RVe<rLT$1<\c;j=PpI8I:rkr6N\!_@<sVr)`X.`e@"<>OAl^c?_7"VjM@rt
%JZM#Rdd.!anp]A8O8n0E%b&n6<.Enoo46r<Duci-:9sk>au2\OcD!s.C_1sI=g*mm0.Hkl\EQ_cRb\d'9kh[s("h2Ch7f5P;YDMf
%Sr3Y-[uJjC+eX1o(-=b*?_rtcErX!QkKS-QWcs@]3dY+J%5[8C`<l7@Nj;7+*^&DshSJf)?b[XL+NDcJ]RCKD^ctm<)K-In1/IF$
%]B^>@(_dDBE4KE(kYk6=iHN2N#UY7tbl1C6h$]lNSOVBASHnkle@5Dc"Xt?M^0Q:(ZfW,Gr%+-u.)1@MFtGUuku!6VL_+`X>uj>3
%X,m^FC&>;]QUk:?#De(JSl?Q%cqZa5Qsqmm\IiireQBXiM,_'sf3%!0]nI?@#+^4!Ej2(OhuKh8QTD@BAu*\o35&`)>ml':G)k_5
%N4G&pjCCo\=Y[@V/Fm!D9/Cam"O4H6$D$nRN(>uYgp)FDgW.R"6b93#36'3(bW)2BXq?toD"bfBDDH<2%S"@6YP!Im.YoV>Ati@$
%";M?RhFp)CI1qJ2=h:;Df<hFlA8/Zb\qB']%o0<P"n__/]Q(B8DJ^X=3T]:6?1&3TIF1dn2T:QkKakF#'hVa(^<+dlop[#%*#>U&
%n4hUsP`=RDMQ[`!%ZOeBBBrS\,_J2VH*8acK64h+!ZBi`P$70&94A=WS)q?9`[6`S-S*+1V(3cp!7/-hRX1j#O3(!;M$;ngQ?go<
%$.7CRWg#=;n"Qae27'kp#BWsHV"XNH<NM:AU-1!BO3?GN7BN62NTDe$+2dr=>QLg2Dk_%f;31+:G.0bUZC;E64C"bU,IQq5Za+pr
%%?P\^'7JUgBu:<,YAR#d[]1M5n7o#U#%GS3Xg%X;9`%N&s6^e(b\#Md(^$+_M`qTiN<WYhV5`@/Hf;<cBV_IY+,T=V,I2m'P'h.b
%NpT9HKZiK:gW(pj_'H/<D57i6=H=2[.MFaOY=u9,DgF6fG&@kb3Pjj1/s4tLh9sP2(f0]JG#=(0I8gbr4/),7[%lUPRO[``2[>2g
%`7=i0C_ZdG7bZ6_pW6+n+rBFGg!0ie5C#EM9^))Tmq=qd*'U/[]`>Sja:P<)Yo#K-NE)-AmisK>>G20&8c%Rg-p&Eed41TA\p(pL
%?X8"J-/V9/\*mLq@Ca'0\Zif::Hs3Xo0?aB+nbK].?Upt8!Y3<;T8F.&#KZ*"M">2Ts3r&;47C,@,,S%W7B@VX:<;MY7G-MjNsAk
%`#^(FN+T:TQqhN6KL)$R?E[7fV$\qK\Yq"U9=t:9`p'a6cnD>b9DO4bXhl2sK068T[9o!_m'Uf%-uLm+ohWTSiq8;V;4PC,\NJYq
%i&=ogg5Gu#7e)0Ra>ES6.AS=?dqO>Ae3s=]KEY6r=Q$iR6/3p,0uAn93DKBhF.LtR/Q6i:\pJg.:6ljAf#WjVXN_!CIo``_dFa1a
%o;*cn9QmZ7@Dd$Ae9jtkPTqDUgsjr?m#/98NZ$(V;F>l11oLJc+W*C;Cd02+O*A&"(lgc*#Lb-!i_,&:(Fsp5?MhMM'Xl!:FDNT_
%Y-ipn7Q&a\5`q3#"*Ye>&6M<Aj3.iG]&$T<c;llJRuYpfB+THsR.b?60p(R)i_9af(<!n:4mpLREOef9hbHG5K(RRMredklgVW:H
%+d2P1)DS)^E9^.FF!peU>)NWU\^mcX/q1hONNs?@_5C_s75b3W;Vmn!_;E/o:,(c/HlD@ZIXjlL#O%H44rTp"*oh\=bET29HpgY:
%hXcYCDqu!KJ-?0ra%qoF``[efnECe6`_dTelf4@8454kS<g-4CB`B2(S7hnT])=eF5sT_#8Mu"eE3ONT."fst]8k1-D#+`C+M(2)
%'=-.[@V@KBOpmo3Fr\Z:-Z5@::&gLbd1O+tR7>[KH^57<.:)W?n\h1q-`tZt`BKcOCon-;r/[</FQKWF-1*cX:n3[q.XV0Q`=#-d
%?Yia/KT['OWq")dr9=Q\U5,k[JU%b(%@Q@IgJOfgq,o>9mp<:A*K4AP1C_#,IOs?+,oU7hj^_('*u1<"GHfGZ3%8LRT?FkhBZQ(A
%>tPjV_r)@0$L?<).J5!n&oRp(*BnhCBo\Qks7?N6XZOf/]Go+(J0/Gn#?,mP5ospX5rbGr*B7a7VQ\Rj9mXM-dc,X5%]L!bjGq`\
%FD:M\JC@?;Lqg[dU<-+)]TYJKq9ldFR^%(.@YWSZ&Q>^9T(2HN5/Q^;:ZC*pB>JF<_R7$fe@r';q;sL.bYj(5K(DjK6YGftG2AWU
%T,Iu>8qld!;mDg@H"%_kC#!*7rm%K>]3="K%FF*O:9;k9Hghb/^1:fgjV9ktS_`qE&_\:s7Xs-lJje=^;YV]&`uV"lHeEB;-3lg<
%YK$?s%9$]<O1/Wi6+_d4&0T?CW&N,4s(3R&I.[3"e97EaL-i4&JeoK`G,5@5nus^#MeD?nDo[2>aM&,pe'FT*?oklm'h3E>6t.f4
%Yj(<[3UkVI?ql@^[gio9jMF9a=GU61X2;II%`nntf#OtFj0g,3-^GGY#G-C[Xis3#Ici:'b=,XoPBPOtXX8qb)l$X`9*r"tgsif+
%dLMVl;KnC"C/E>(?1MD#q)%pt2'rPq.p+Yh+:)R8/U&QW?4OHna_m&RDk9<5Z4Td-S$<XrW!.[`*n^kn_NoC5<WVRXh*QC3(rSn`
%hOs$^EP\9eF#L"<3*CAhB<O\=gZ*C:I@%2H1]&Ba^%q!>`#@;Khq6&J[N=HM\<h%@9=fd`i/Jh#AD5npk#&F/UKrE'm2[8'5.=i(
%?k1Co%/0u.l;\UD!R?=3Y@sIKmR'7H%tK*+(+3l9PZ6=W?O*uR8%d'2\%uT.\'f&N&$kNmMll'&Va<IZYWK<2n`m4h,9A&BQBf>U
%"s7qV9hV\I<L_*fq%t6.VG@TW4lh[I=B-snF@31.f^YM>*i]2].G.1V\gpSIfcaEn\?2MsqK_BVr19@n5_YHucBXG#oTH0(dMo]O
%/rqQ00L/8nLm`2KD*0RoQ@.2#]d$b=6RW3^WE1H7(5sNnk7AT)Uc/e7dYEfJh?4_GokGn#'^uITWK#2<W`7b'P@FpNm!c.KZ*KD<
%J&X`kB;A#r-q,@V_/??9OIdUO/OL_r*E6N\9M5mtB90q*@Zb?bnM2^S1Bf-$=FF_b/s&#dg\oM"3c\dc7"#;R*f3cnl1K[FCO">X
%jB5Qe7.EgOMM:!U*LlU&j4gtR=^>%-f+oq2&0EtMB+hf=IKSsaYZZ9Fd]:22EVY26Z,o8Rcrbj0i3ITXjjl;DlbDQ!r[lof=es?a
%Y>EqPOut>FraD+g3$7NGd`ldgh`(HrO*tmVT.aa/rSBd/auRD<:T77KrrfR&2@!"[q("\Pe=1TUh$K@jmbh/ErSJl4RWSsElf.h&
%U>tc;H1cr9dPX(3bKs_eIb$LR"^\pB[]XDWTq.SGgSa5C<lN%-frq5qC?%D;9<.S44!1UQ/bP0c^]/`^UqR]AQnq_)ErbQhhKQr$
%5B;:NLXO9.Iqf2C<ma+k'dHE=aam_W2/1^p5&'@_Vhp0k4W[D!X5o<#c^rn)4YF9nG,RgWlC,+"cW<lS=Y=a[nQ=DMB:V9"Lka6M
%*CWbr4T(AgDS%c8=hfFanp('c8WRM*A&[Ku*N`^T8B@[RILZ=40>_.mep3"$&$$IpKrk3WC;>V4F80B:5);_:"+*K&2=)GRY9)U!
%n6ogZHqh;=1.V*s6GCH"3O4]Qcg8r2]2BK\QH7[FI*T.XK5UnuhhfIcf*Zorn)@DjmKX])fG8kf`*Or1@)o/bI+gX#gJ\ZT(:N``
%=fMIn-.mq_6&&Wu!8Mn<YF##AR!RG4oAKohr_\>.>:Wn<X%eQTCD2EAYQMgfO1W0BcaRX#X3`B]*UrqL0"\m?`OCK1=Q-BqQ;5CX
%=l?dX0i_Hfhiip_o!lk+&Zu^pEl:1n"9L<]VoC&>g^0HT]arRF=3SXe?gFgo/,B;0)LI%L9`Bt=.Ji^q#T?-V=m:c^Z[QOG3j,Vh
%^`DkNniH86)Y%ua56=_ANh;uXY4k#]KMb-McYt1O0jLqNPU:jNhj:m/dh$R3^V.78?'P*8j/HlK:KHNa<SsALah@OgC>HPU4GZ4X
%0Ca@u]G5k,e`..!)@h+KqM$4V=AW>-@i_f-:%+l6B;0WU_LoOWiBZZRb@#`s$Daul;it;OQ@AedXreZO:t)\F^,J"YpPrT\bP2i(
%WU[2/_Q6ahi%?#tBu0L_-,<05HfjnTH;5ZPp>Hn!lE)[`,&[YGq&5%oQ1K>bdCV]E5>d&k)o>cuj=m_,Lk`3UIKX_)9o/'WI#+]Q
%b!CukJp=N/fFK#F\7GNuAFI3>HP69GPkgZdlXtejmrk\h=XbH,H9B;b*gG8KGWbjn*F.i$:LO1H`ta[8o]FE))-/YPZJ3f]/j8On
%4lSDV/kh]4-!gh9!!Mjm)(u.jaZ\s]Q1`2%a1IU!orPHMU1[1%.ph*r_\0[r,>92(I/Cpsa.LMDT$?:da:j*Ve?a;jFQEfmUg?3X
%@aOSsY3NV?\rf)K0PsDQE8Jm?L[/9(*asK[a<PSJT0*bXCjG+*$0P16r1PKcl$;hf9&pG.T&''Tag8I#FQV8kg9#[q9d\eTLGtEg
%`4bouP?PFr4mCa+e8r.NHLPIj>$fN06m/)&](YJNh%09D\TKXe3A8Bo:Hij:HS4QP9@$W4FiAE3DP]I>cb#S.H6-rV--t&Nn_e[A
%#[<n[eOA=n^1j]q.cn@FVe2qL:OSctoJFFoD]\L$FPqEp?,(YG>O:=+-_kid]WLtNb'MjT^>c3L>cn2Bqt*Lb^%S`uT;[keN]Cgh
%1b6FYph3)[h=.O7_Tdk$]a]*s-#28MXX%Wtq3CU$0u&lsbSVk`LVpH`ZgnF;EabIs="ZR9Kp>j\#'u(C.kAqkcgsc6!E3&D)0SH`
%KE3"Jf&K@Q-Y)7MV6b.jH<9[gWct#kYBg(mn_+r+MhbVn]9U(H3Z%;.%CPTZH&5M5d>QU<Dt<Pab^5_Te)'G6IFjs839Ru/fA3+o
%f'D5_4t<ZLYF8BAY?&n,]W^\l.nnu??6j:Bp3NgO\oP5d=l%_&<*'/t#IRPmEr<KuGV0r9b/<i*lJ?O(Z^OE?)lna!/@^!=\/&*u
%[bA?of:h]MlGN<qDH.-mmoM"ea0jIo9=qgil5YK.4HV7fKN_Tp3R+]1\f6`BS>sgkYnIMHm@:?JXi9NsIdNeO?<]KOhY")6V,2:$
%G,98dp12\1f#k2-\G#dsP$;^%8r[sh=ln6olK.X1d!DIpc:][Mol,r%?]XJ,X@'*3Lf_X_-TC_\H=;5;GQ$t-TX_/Q3ko"OK_tFS
%niF/7%Jm7ef%\fmNM*_.Zb^!3L,L7=Ob\qkZ,popcLU(Vgr&"J`jP5MD*2rV-Q<fj2R(TMAtCqBp#nT6iPs`W`tta(2a1(N_nOr.
%\`6>Z,<*=M^dqh+R:#\O4K'Q5q5BSO)0&jPFlLFlrf+Egno#lW3PUg'meQULg*-L4>I*YBL$E7Lbu*KSs'g;7rVBh$Vt%M>ZEUm*
%HjabFf'g;Aia_OrF8q?*D]Wr"g?/4BWG^R]g='Z]:`hU]qW%Nda*bT3q#/a`!%XPbJ]QeB0p$dV.tQ0OU_1+#\Zl5$8p`/ZH6S+G
%SWsQhVV1N'HfJ=H3chm?'/]0e;XLj*F]N7([r*:/gfEZn95QPDp$:O.ZVV/:fCf83.3+9MA#F7s_.06L#-W[b0)5!VI1iW:/o&4?
%oo9LciqFfDEP6%=U9tb3'0<ku?&,Sg40'Otq!p+L*&W`CPp:0Z4*YaBgm6,i@6;k"I+galGI[%PbG1tP:e+sk/b`5?ID4>Dc!>Y]
%oY-uql(_#!94(\_f6$PQ'Bgc:bcGB'=R0@^;u\b^S+kO%N(T]rQ_q\V74)Fuc,8<O]Cr,B=E\m5_![U>K0;slh6Ju/T`_a)jX'UP
%leULsaaB9cH2e8=&7.!"S.n3I*gP8(pR85,r6"[Mm^)N>SOA"ch3$:aUYEQkJ$Z]>iO.Fj2W*XtgHqRIfb'HaBgk!P,h@Xlm5)LR
%$<Cm"D/3&_2`KdoU<L7iMWsnZ?7]@BT>dP`1W266G$WgLi'g6-QcZMUK;[`Kl"Z9]94c<%PhK\j2CE.ho$63&90Q+hH22>2E[pCq
%d9";6(1e4]43f;ForFC!SuV0+0A7mX^:^cehUHJi_r:6F#N0Ct+FL6?+T3eV-Lp$8lEObepr#HZP"]c#,DG2g2H%7Qg5'iMqKdqj
%H%hf&i`4mXeOl5M<IXH+]N+B+G(]\$M;>kiZ@DUJXd+(%Y?$^.>=Sb([rlY+mHl6YO*deFS!gtQ]+\.p]p@MYh[]o)p&2R&lZ)s+
%Q-J]sl)j$\eP_[rp=[9*1a[2]dCaDB'.l0.XdJ;9Yo_rTHTdZEhc=7=ea#ioF[N:M2g4JiETOjfL`a*>/,g5InA\[5.=h59k]E"]
%`7XE_,2_W),q?ldX5rP?\"&].:><mcZVW(GG[64R>;%B"eFra1Sr1^\rm^%^-^N1>)n5'kldp;@Z<^DWVcs$S>s.G[%m4;#mXYq6
%T+3XU;k3".ENO>'n.tLtLU;)l3)&J9qVb.#[<L9U1octG_XUqZk4cW&0(2Gibc>bl*Vm>6l-Z*b%34I;[E#&rQ*to'41fDQn(p35
%*FEK[!oU&%Z9HsQc0dd%GZH\khhZ,]CKL86-[s'VFg@pc'.8K,SNV7X7m*[MWEMBCM5gC$CVb@Dg=U[ASqTqfOgF*^c(<apFLTQP
%;Y?"h>>r5Gbl0sgpY:&ZS9l;-h/bSnY+2+5^,;;?]FkeS(V]8VIBh,38f(S"pARM@o^XEFXfYsm&%4-Kq56#uX5I-+#Sc@:r_=UQ
%p72quSP&EmZZP<BN8G_40CSJZo1Q+qWF#s-]?JesD=?PcZCZBUp;cbe9QM5T<\CTEjL(7gX0S)'&J#sjDpAEuaA''k;S!=MX@ftD
%a33K0j#npMGuVIt(Tq?Dmg<9-o<+5HBCD6\Hh76(X$5@+T8It+rnWb#+gIp%4ZjE_H]Oc=&>"Z)N1>W\O-f&*m%[];UaKI`]h`:4
%]?6<iD-fD]/h^/L)':(dQYpPh(I+PV^*K.@rT3:X;c6[Q`<UNMH?H@H7<<a^S&q3;,8[mqnZ$u%.pAF]MirJA_#mc8I%.Z"RE$2Q
%/8eHpbNC2*.Q=Nur>L/R$X.HB0!6(Ka@1eEHn/4BY&Cn:H6p^63L7ifcgpDJeU$!Be@>*^UmBbQ>h+eEAa0,F5GFcWL@=ftBbgg"
%=#!e!]]L:;NRq2gZWgM^NH4tI)3a@Qf9U1<Us<Q3[``?DQ(,d",J'(W1nN@l;00XQCc#'0bX8_D:%+NT;Q+(H*HKbDXgkjh@d,[e
%/!ka7Bpf"J&PVdC^[)8Ff,8_Mno,bsMM<1UXQN=BT^?*e.&3W'&"0PpT#,kP>DO.ds1.TN9#\gpLZ?Xsmp7l`L+fUHU<.m*0>&Sq
%!Oglqbk,4gN;lKW`NV,:i`gj\!F)nLs8L&/H;fcpau2gD%Vtt.X]kK`fJ$n2IYQ];p%1%^^Do@6*>eR2mia#r>e^"9(D1FWGe(0X
%QSS<lcGWSt(JmC'l?I*nYWY(rmVEr)np0QB(mVAmpp.`&C&Up<h>*(+<=ajNWZAKM2)P)acS^FbpumKPR-E5Q^3Lgp([n,)hj6%!
%VIkh52Y]l8VgU5JZJKGJB5PpSk\n_^rhVXOgm/h3))mP0cfVb9@PKV8c[/<758(\^oacK?e@kh`,i3[e1j+2ehg&;BVo*ZVU0QAi
%ER2a^&1>r^6tY6H$%;i2]6Cq!5CEOs`.di;ro$jgn*[c14G!0P,%h/E8pY(A+'QCUiYBN9eOI;)4$(<lTcH'4Wm.iC=f3K_D]7jr
%$A`!YJ(hoZOMXS@Jo?.*3JD*jpqXuQUF>n'OVn`q0EMX6n:SXd4Lmj9MJ2#sa0QqCB*F1Sk`A=C&jda3o-$taiE0+f0f6"/X=/cj
%*!Nr/aAu=Q6NTca'J&\sOJ>4/rqdd<?papCE)ja+^^Jdh#Vl)],`\0X]I6G"K!2+cH&?,-ON`=GnOB)XZ(/a/SA9f&*YudOGa/?_
%%C*8a;iE8]=:s]U6m3iG5ZnEP(-:uU6D5UF0J=Z6Ps^0HLL>"5JH82o(8(hE!CH<7NXNt7$ql-$$*kaP%)B<gM0L+Iicu<p"rC`Z
%=:if3Ql^NDPRMGu@hi)b-W2]1I5m)C(cEWnJjRS$8DmWQ]`QtdBL816L0,4W`(J*<8Z"m\#S6>:(+gsh.F+oKd(mgJ!?[^4GOal[
%^sB;+OGNoOiBK!ubMl73)+FU,"+u0.N'tj6:Cqat8MlMRiW9jW$7[_:%?b6]-:BAA5fmt(""OLtMCcg,D'1YX:n`K"$ml'n/.LCQ
%aa#>RnMmL9LEp&2.,]V$F&W2e#"-;fJ5JSD,d9Zo'SV+k=ZQZgKDNB6!Y(l9J/XH&c?LQ=CJt@t-u]d=A47V@<`gOK+AJY6)-/#8
%X;Fc%JJ[\['d*u3#Mjo>%Ri`PIiageM3D&gH4DQ!''M<mj29+Z_A*P?-IO*>$^N=N^a]h].Dd!RLG1("P6Mj,`YReM0*$4<I5&3f
%$^FPUd"k>VH-djVo3bU4"is/!6M2$X\=h&VV/h@o@\=YVi_f=fUB&U0YQP8hJ@0@#A2#Kago/T8XHIFZZ2cEVo*bXI@:?g)rQuSf
%=;W\h*t:+oiX6$?JCb,;97V2:&Rc;g;aardYtY3cYn=ij60h%$n6gGo+U<TF`m90`dN#Dr!KoDPBL@[mE35!3idoLqW)spkY:(Mq
%hDRh(4u371<)a(!!B3<nA^kgngaEiU#pN'aJmAHcg#a\+fci`hk`gnq"61XB/.MC_=Mb]1Q37aI$S1=M,$;Vq+9kQ0!ttc3J9Y`C
%"NI0JM%G?^+BBBqM?+9=FV8bKqZU5^%!)^$$'7If_.,2"&-?MH76gn';hU0AJ^?Y,Ee<+tfHgm37T#7n&.5XH_''(*0JF$8E"(S+
%=q)$qp&VtLJbFm*R#"VH";1ioUJ].-8:&X75a2`o"ib#\!N9FF!*f\h&ZnY@EBo7JX(9<D$CQeq:o`0Wal!5V`N_8Z*uYG6!K[Q1
%:dE#/%8ait"D&DM;p\^9!m-&E+]gp-7*oaQ!C2mS!F7M`0FYlRA<FqoR7=;k5er1`J3Y8a_>@AC$%r"%EnI)titT;[D&%W<B[dGm
%SkSac:)F=h+&u/]^^D^o`@qu]%+U/i)B-_2OoYHCeR09-65Bj6.uJ3#,Ka8[&:"'P76sFHdG^MRnQ6)qU'l&'SK9r/McdtiJ5WJ!
%?j#-:YT%<(DPIg;JKH:hoPn7G122hH$P4r,%1t4sQm5.P"t[V8Jd+jmN8O\l\=tAa#R3Kt`WSg:E=u,S(3BR.)srIel/Duq6DI2j
%Tm3`l!aQ?Z'Y%!Wg^'JeQGLC*TV\G'O7&7o^musRra<n,'Lh#$!1n!u6R,tfbR!/AO/!9q!*CKu1e^6OMJ"Xaj9U"a)@<jnF-8pX
%#[Td?<)ETsCk;*o(?G[h`*<WH#["Vh0a:kk/]]i--k)Q"%%J[Q6e<]\ilgPf0e<?X'PZ7O/HA\"8+4D@o3qUM_T@s7r")MR)o3;O
%"GIJ=0"cTSXAgNQ%oc3cJMcj0<XP->'A*rF6>7,fMh8?^"7DXD)8h"-'NkJ[/1M\QY^l>=CSd0LhuIGnB*@/S3>jg_X-X[_XcPD'
%Ar-M:ciQjJ-(F?[\m08#)OZD-"+#L@id`iC=,;#c*.r,MoS5kJ/>/c9D-6j$JqJhr,)Jpr)jh:u^^OntJRa3G#\@[7',K"s:?6_@
%'"US8.0bIDs"ccH,e.(h<iQ`#&i%`7l%#Z3Dp6ocKgo4]\."U`Q>H=3d&=2MLmJBVJ/fHT,,1<X/:_`=DP5,@!EP*:%>RTr(;PBU
%-k"+J,H)-@"sFT.%mFK"a^OBU.^fifDa8\3b_TRk7_k@H2jP>N6u:r2iIa1B,n]<k&M*,K\8dp,lX]O^-)`_pM5"eoK:"is3"++7
%=;"F%%`ANU"uc\QJGKNh'+p'GJZd5/7AR*RoL/qFK1,ADNRNLHo_Tdr%q6=l&fM0FIZ0C4g/Q/9+]u%`5);R:&T8p4UG:+-#t9BF
%#KW`%+u7(jN:,(2MmV7u*uY5u#gQi]%0,6T^^r%-E>YEj,S#@["(oJr$[f%X,95]uSK\X/!l+q3P\fFr;#4j&1]^SB/DF#]U_PR7
%L'"#Z,._+oH-ik1<+)FgIAHB@eq6=&'[A;r0C9D%9c;_KjmuD0fDWS9hp9@T3?_AAfE^D3\JLK]9+s=])%_bFG1Zj>#=hrC<*TE)
%&-*$/7ARs>O2BVB8OdnQfq8`3!c,89(c,Pr%ga'j#s>38LLEsB%F8O6C_7N4%>6,SgS"d;=GaEW&ilHmE]Ag;&MK$M_[lrm8.nL8
%d'mEhLGfKjT7UJsED`+8J@EQgE1+.5PVL(ln<!$_8]VQiP&e].fZ-I87`<2,94BS"Jrq0V-7o:S)@R9O"PfY=JXE2#g-A-9`q)/@
%EFe9Q&-Ln+kS)jsiZGR9KJEjfJdJ8%J-%Ro7KjZb&5*\#7#(urEeo)edK@8d-B;@cj\j$G;uqiM5a!6.TUVb(T[\Lh&1E-/ZeZFN
%O)-IX<Ob3t+`,15?,B8MK*)B+BM>WqUX6b`.KE+m+Yb#LKq?1NjC^2!!Yl:b4*Un\(J'W_,LeKe^ApC$TQUZ'4_"4rLcAXQUG;&M
%XG]ON`<HOk(Qa99csqVfZ$iG,&W_2m39[&H7u@X`,;m_Ua9]K_E`JW)6AHl]]bmq\N20!f^;(:=bK6PR@:L(W<^o#u$&?aZ;%j%l
%SL41B^aEX-7Z%6eXoW$V&Hi:FK#!E)-Xg2<+Zt>g9rd6@*O$5))A7d.4Q;VkTq][X%JUFU:$*(RT(;HNoH8Podlct"XC*b*LD^pk
%#R<<rUY(Db#46(Q^egDgVm(_"[K(,F^fE1dTkUl:n-+bfB`c:04HUP,%S1dD+XKf[_#ptk(RRHW*J$20a(u0N#NK4)`$#U@5TJtg
%!#Bg-'F):\RDCiq&l<7-jlC9;a)hh*AtE*`nc0=;/6>)SJ\ZpR,t%h9$T&2OJ(pS_3%IUgd6hFH,:\@L&1kpKc@@S39E<dS-<R3s
%;3MG6i*da0"l7-7N"hF/>6F=%oKbF?13+UaH&bj<^g#Gl!'V<[^fE*b*P5(cn[=nW1r9;`=X:]`&Mo$0p"J^u,m;KO0Vopm*1jUD
%g0Q3t9iu`Dp4>D[hMo;`%a@M\:^mL3#i7i-[Msj`NNo6r=gBah1smY475Iq[R$)CgLeh+_.nkas/4([m!?i2f/;ZLs&Ht.9VP*TE
%qEtt,dY^B89H_k3Cf*U4e,aCSh8g2A,t<T.-]TI9:(RZO,k"#PMc'_sJ@2]VD.$p;BIlW61,9&aM3G`3,LA]#CkoukP9OV41UMd"
%64Q_?%.Kab1C!io`#\uSnpWjL`'<MDs&q.2,LI[7*]a\5iJ-10'13qN3E[Lk4!;,jNCXq>G2PB!j)j0uEu7>T#RtU7)9f`q`!AXS
%nZ.7],t[u2F-'<ucTO"MC>a8gNUa)U0EZNW('#Ufkn(Ek#f7-%"&-'"qZ(X&g9&/#:4Rp-M:uG.!&GinOt*\0MC@hap4/hq<pb,<
%b9AM"kSQpEJc[/V!k:'9"Q?4[0=?JS>@B5M!GiCR_Fd?G+Z5u/W<31"#cJhi+2G#.:M1pc?d#CUU7Lt],dP3n<+-Kh!b%]fCiE3=
%!:N/m4]84,U^Y(KH>=`+O1%>X+QTme)4bEDcpUN[JJ-O!HJKDJR>aBW:`kDkO%'JTEIpHN`po.\JYgar(#X$5(8OZ70pBVZ'Foqm
%$,p:)1o<Tq#H468<"-Hm=A]&l+E8]9(_,U@A4aHAj*1]=;!B+RX(B9D_&Rno@$GmTK+ufXE/d/XN#6R[DaY"CK,dW/La#\h"uCfQ
%LQ2?B(0KZ$L$!B5#[.hM8LfMc"]!3]Qmf7`N?&_"F#9#J/88Z8Xe:iM(lG*M-cRLC!c2C<*<gO+cl"'\+@k]c=@^840dq/UG6U<e
%[c7Cia-7m+hLZDtQJ$EK+F4:s[t.-4$,0p.>9$ZLd4GPW7m\U.H?f]flGROlc,j'f'sIpH]55fJq'6_VK36:6KRk<j3-'sG-8`8/
%6sC12#m+m,p5T3,d8^`?%1h*LZRNNgGHk6gLIL5]Ld9,_Hlp=9eKSndE2`#_-1G#3KW[)]B>>oL$c<5ND2sbF;FTIfA(j^gBRm'6
%3Xe^4+RXnb#5;E-KRkSD9R$T*_D#*>"6pR/iimI&@.]!>+_3t6IK50r+B:bL@dL<14YRH_H>HK=a!(`a@P!9_/-_iEU't4aX(5)^
%80EdE)Zgd(o+K)u+['d?_$h=^)X7M.UkIE9YF6eG'a9m,RP0b['BjuUR0H*;mc`imMSt_"3$cp80++s"/`JYkM`*#Jd#Z5\J04gr
%5WqWc=+CYb<<OKq]3*=@WXgL1=HPq-J"g?6(-r@lAIPS'Rclu)[JhJUAqsTtKR6!?<l]30O8p_s(J%oKE\9j3=V;L0!>G\=V_[\o
%6%bi_kY"5ZF:Y1QN*[N8O%oi`+a\s:D%MqP(m"fng#X+H$oSV?_7^,5+0ded"]F,l,#nkE>>-%k%_'h(@rkBhGp[F\8L0gh;1,T?
%)(Y2%^CrTT6g2KK$<[dT4b2@n2Up3o?Xk7CD#.Q`*qNs%dd.Shmc#q]/e!M<;N_))A'kVW.'Y1TWX1ojW<u$UU4&5a7mqTtM'bMG
%QLW<d,I!gqIGjp&C4OEbHXH>FMFNEK,)`j!iog/A+JO'Mf8"75Ce[2d94=PA@%[Qa+@0KkUQBe&B+MpZ+;9SXRAb_fAl'5T$+!kT
%ZS'qfCW-1c"E$a4^d48^JI[6Pk"$ab*4LHt,V9V3"[OD$iO1"Lp(9_);5JiIAG8S;)CAiO%@ibrP*+]m+K1)jMQLp'+;'U)'sVGf
%OogAo;di9K$=l4049HKSl=+[A"%7qaS3b5.=KI'`ZmGe(;aCG8(<b*-jb?m+$;-\bgVH!]U[>#\`$!1;*>AdS#eDOR/g:_`:^AU<
%gk4R"\ebRma@L+N2bQb/%,&9_OMQno?K=P\M5!7%M+sck`qSf#$q$4Z#1tU$p5s(]o43?.R#,+I8'D%ta`+qaHK+Uj+'-tsY%N=p
%![.>!Ojn"tBuB."`5'J1#2.+NMa;H[i#>5<%R(j"6ZbiR6_=`m5emp4*"UBJi<&jkRO-_;/=n<+/3lNV"rZ40,unM-q4k3h<f()=
%2AI!u!KF^C=D5\oT5:e5aZ/*<Sc6[3m+Yp+N"^/!5nUdfd#'OrV@X"@W"9<U''Mh#gij*78B]sU!=$LcHFOVC=Cd)6B[1):*0ePD
%+@A'RBM:[D!q%c&0aEYu)%nBLM:o,1@"CYa=Ga6lE#iFU*1I(q!bVIobQA*dEROP0#:u21'%pL)n56F='a?1E=KdhR+9J9T1d_tC
%I2Cm)NI+D#fq`MD.>L/`2pa=C$Hg=sCkbAH8[A:Xpe-QkJP1MPGWZ-I!dKVeR)(PU9S*c`LOfXABb:/19qDmtCkIsV,W/M@!!K#d
%@(9n=H7K&X&LK-4=.<af!"j?T&BL.;"??PS&OS7W[m<IbboeA12G]-!,>fk,1%D^06%D@fOO.q(&I+B;g$kdH(;U=2+n?1#&25#6
%8MVL[FtelEd\:$j_C-qU@h(-bS/@/'%_rqNOoR2L;D8;?6!u6(f^MbW^.M?-)KL;Y,u)`C"jd'""SG:qN8"N/HnpCU'=:[0r$'^.
%M)&P:&i\0_))opY<^>4*'SV>L(^>n#g`h(F=SKV)8Ia+N'[uas,6eQs+7g@DB^kMG697C@Ms?(k0h.1j]5kDKNL1mAV+#E`",f,Y
%JfF.L!@N02C(<lY=Rs6:E`?41-AVs7_LSNcfO_<^&6ZVs`o2(WhBcRDLkg(CI06r3D#Zi]#cs)\_I.N?L,5oK#e_65`$7s_3'9]>
%n*lN+Jt0-_Ergk51iQu@1*iQ^E`hGA:`o@-;L4H0MsGma"4M[a+ZRT<P9G'PN7Z08*fJ\[-tJAiYYPFDR%Q]:FY"uGnT[G'!!%q?
%Fs.(>$I]mR]elAjPZ+lM=s13\!=QuIh?`>@d"<]s5[>P(`3@o)UHmcQXLBGBbBTN]=Y#:RcQb`e6G*KS&,6[j&=7a;SjH0Pai%9b
%4K^qA?s*45$=jB=+nAYF,11W]dGFN77Ti"6K-seU![=$d(,F9EMkp'*/R[ns!(g2Z4s"M*&huJ!PQEl;*@q3m"gO@>7lWKJDW1I"
%`o7Jnh1e!-fKdV:@ui7*1'i28hO[O,"dkYhi.3LBLu=(IPLDkN^ls`uZ7.0nJ=qZ"k^Q_jSV!=o9[=q>,$=o$gqsn6;Ab!e+u$][
%UBGiT@5:W+V2TtkNK7Uk'D#'P;5(aTK[r%]m)0LhOE4m>eVSO8%(eeBC!Xh-`eZ3kTWOOn#W0(&btYXmaDhL0`#Xt\"E)nS"e_Lm
%@3'5%i+s\1+t^;fJ[d>jaX]IF6Nk@Na\EMSNGK%/_3Sbn'sRqQKQ2NQk6[#4P`VScaH*;&==Mf]^gqa9o-CaF"m/@t*lC"4p+/35
%e)M\t$8F*eQ*^5&,Z;t(?"%i:a>FkpUOlTTm;8kbP*mR-?OJkC*ne>4)hpRZRDmT%M7_,9@c0`1!gbY!!kDae(:Qb(KaY;N+a&:/
%bP!qR@&kC\B#;\9=Ko`*h)M^(O(ktLd-(Rts0DaSh_/^&8MpM[<5<?=ReRfU`W:?1A0]2,35Q6.+G7`YS,h6Jk_^)2AiW\E=ZGgh
%"-#&WY@R"T*R[*2;@j^+4!nMaqnsC^&Rm<=;R1G)-#PeZOR]E&85<kJ$JH;nZZ>N9#t*u_0URYX`H^YP%g_.IJtOObC7aY6n:450
%_NV%6ZZQ9'+CNQ8Zqtcm"t4&ei/!(1&[;L`_.AJ1nFgRghFS,E,'ZXt![Ar6O>'q[5R!4+5m-+POIW$aDZ9c#8L+FL&1Fg)_IHc*
%:sSUlGR`#YG(U\bdrp%&@Pd@(@[`=2)Nh9R`N9OTZPg'.#HEUCECEG:'NdZ*P_aUl@.,GI(b21<BMr[JX+BVo;Xe(lS[4M@1N.2$
%EQAJ\AmeUi3HIZQ9$Cl-OVWHtN*`dga($D#M\I#hYkBeA4?!D$i(8c>L`Mku@\/BrJ:O$+C70KHLV[KB\;Q+<:X0F@R">k_6UXCZ
%PB$I)]G-DM#Zr!CM)FPlqYPtpiQ5QJFX5Na-7/b8@%P\S][#6>LA="9&WB!AM*nma55@J;1s"'Ge-#8O(6DS7DIc"P!)e&(5`%64
%J^Y;SE[Bm3n9D$*%d?9&hCI$*,"`is`Y_DG0JTu](8IeDF*q(o`+fQpT+!:(-VAY8%3bG/UVD&B*2SI':/6KN(f#U-isuI[hPMOc
%^L9)K@60;/=&I>Smu#X0^:/#3JV_C8?2J^uC7pBZ()`/BOc9@Bhu\&2_23rF:`U5Q@KgOgp/u"U##PJ:__!KWOE'ku&UNUZZ%97M
%P1fhh1mWP]*sHFapg([eQdRN=@Vgfp!#%)gXcoaRA/>4fSpr&u3d@Y4m`+'$4>_]J"l+FA=;GD$hYP$DCtE0`>pVlN<'Zmg@utq.
%`"FIkbCaYT"TSTS.12XK!mMJld5]f3>`rSX*(SFhL:.0h/9<<eP%Sb>P14UXX9mjrH?-/&\#;lIKmC`>RKSRnZ"A_*2KB!.[gR/?
%GQa"rQ=_jYA''RGgZlU$$fi+)&039'^dieUs%0dfKStQH%r+2R[":,8S-2=W`q^]c9Cg/BcJBQIJker<F8):g+#Nge\,Y@BS+PEt
%SS*9?!pW#*M#^>'Lt/\Z7lDLmJd#*S[`8Oq`KCB\W<-5.TmuNUSo7'af]QLO-BjcqK@3/S/'m'6Ralf1gE]>np571MeBU:&Kp#k%
%M&QU\05lN;#m:dWBC0<p$j"?]P>>hX3PuY-_:QKsKcU?k4m510MqH_N'%!`&`FTu%$d$XKZJK:8hJ!BDZC!FGZjhENp[";uKI]ES
%!`mL:^)E[5Ah%:4JB$[g@?GXh<ic::V?0=eUJ/0Y#<O:5)!_71K^RST<&l@i9TU;c!FW50c32gONfA*?]r3'c_<Cm<"X,)m#PfKp
%S,jmX_"OFR5a=A0DEJ1Jk>4*qGVVV2_%cC'RhKfBhI6ZFUl^4jII?R*O>BNjG>Z6A712+`glR?J]T@cc%f>OD(ilEP9>-0*#;nlK
%S2W1`N+8fnj<lbE]WtliX$[[\,]OA3ZGVS>Op(KM]?H0PP$GNoG`Y9*Q(I8U^"=LMIFsnZTSFdB5(t3#`=GO>/'h<M]a,h(S*OPH
%AVe8pJbdX)d.9DLXBB7Q7RpHh4>;f+M_=(8M+pe:ap@tOJ=Zo-+b<aHSKO(R!>%F:BG("DV'pf!dJ<j?/Cm6@&aY;crN>EaUMAMX
%.7T=oYP<eWMGOD^1s_=sP++GXitbGLdfPTDCo7p&G)l'5JJV+"3mbo$IQirRNqkIR,StmIcc,pBe"-']R?_Eio95"(HUhduUh6RV
%cA\;u:Z*gN!.[58o1g%4`_]fP:D00a[*,.)aC5h<Y"E.R"+f<d2kF8W"6B3j*XD)j:=K3$g'7NR"H]U8$N[SDYaN^#3<6nWoR._e
%!XkrJ")BC9fFfWV!]<<N\lO<)b1pAX,/%4hfoC:1"/sWMBp#/K-?R5>M=iCaPgVs3YDf]U(h<Dj*QD'Q<6**J]qVci,c]Q[#r\-9
%b.[rRA8s!f]A6c$`0BRg]&kgXVL?__":VB6:2VOnBHu/S<U(9J=:as%SA;4WEkepe2dg2>6M!GF&T;6i=b.MgMKn%#1LI4qO/o1)
%rL0pX_Ba8'1:D6:YXtAr"&'Xcdq$@I\OSYiXQTX:bo&Qa#W^SA4bL4NGS]W["Z`2uM?+u+C^Z!_mZ`?l1*\h%_hrRAnl#V`HW2?C
%c85Q_6@ZMC#c5jEIZ5X<EYSArI0&&aD*GH1bopIe7gpDPJWk<9[6U2e-*#.W90UQg!(7q,)S8cK?RK:HN(V[WT#o/lJW9-S`2$R7
%0*XlN:$9Hk$9/RKo<AorTjJeb//GOT3..W'7bEtijA5+87oG-@JAD0IKg0Q&ALJ`[k?*=*+otP(cO6`tU&`t=Bg:0BUYhj)E1NUg
%jMQ+_\<sdsr1t`cQ"4)u2!N*1*2Cd;F.>KubHskZo>\L1VC"B\V*-nJFjR!20A-"5F4CnEOifBp%dNu/_IOj2R)K^E5/RM`#ggI0
%0lidEA?:eOY1Hb-0u5FCc&a/>;kIq76&ZD+6^a?AC6\DNAp6kC!H:/Uf6:PJVcuO][u>P3'9)LhGua#g8<Teg)Y*I0%aSkShF-TB
%JP4;S9$T8&8j9mb]I@q0%ZA7%mb<8A8]M7H%;68<r`-`g5JI2'((R;2'#pJLcHA0iiJ:LZP[E0+3imPS,gVAk_?&L'qnFA;)%!t6
%?=hTk#,Jn/2RX$daMlc.$ao#F$WucbHScNtd4X0`81r'G6^4pegKrHq,(NBC.sY#mC`;OTrQA[@7]6U/-@p-s"kC>10jpNB9obPj
%:b?Z<%A"h"jTnm;;hPMB)/E17?eb"ZSG2)l,U*k,f=]B"RL)[JC]f5T&\@I0(3qFX7Z'Hp.\9<BiWS5VKsiJ@VAQ%f;aC+"AUV!#
%hOSjgl)bGI<1;YiZ>(Ml*c@U9mLS_5B4QE1B:/]tpQHln)%rVSg@L8aXT@X%(A(;QI!BLiLg"2'#B6LV,%WNIS,"6jT'n0%JE`YD
%WPfnP<"=[1LSdFNSO(W7if*Il>)Ju+#'l>^o/Y%i,b+rYP$Eg9X'Z#X+<.VhJL0c!75qa[`AR+u6n74r%eu&BlICdRHUJJ?@,AjR
%Z_m(.@A/g>NF9sC0(8,4FEskPq2IP>8UD"=HD07D@OQe`j&5_epOo/(_OS<Z<,f-X%QsUE9Ea;]`qppg?O<,b.mM@8?"X"C%?NA/
%]t#aU;>gfGFIYeiZRNj4T2F49WZaUZ:5*['=Lcr5[(*t-d_F?LCH0B-&UBFfDBC0*D<EaYik'QOQ5NM[K=gO7:fK(c*he:bI]WTJ
%;VJ+OR2m,9r%:*qYmBU-Y'"a(n("N+ghi+^'Nr9ucfqj>cn'(^g)TAfGUZHZJ?0?/qnCAqBVs!*YA0=uR=HknGB@HtcT:+T`9=>l
%\((M>E#!)tQJtT(Nufg>k1pUPl^$?p`QQ--JGNNCo>8K`;>5nBR$l)Q85me3NFj-+(_Y@^YJ\nI,I!&JA)9Oo#"Co*B_'o6=CYa2
%O.C)7Eo9FmIIF3fOlIJmTDEh2O"NbXdj2%5e]A;I&C'o\NWpFg)ImO`*V1*45%AT!hQPf?E`L:?)e3O5GGcJe<Ed""T@^ZVZb88F
%&;m`mgjB,Xlo?EV62]cpSStV8a5c]WWkGSaWK$[7dD;t-&WiXZ`ZNu__:kCcc1pO?Q:/97m`N)lg/C!jHDUdI@]'ID;ibS^;M*%&
%gdt_p)cpE;cI]"WJF62`YUc#GZ`pVCJi$&r9Z#Z[fW*2sHa_Ek@6*5GjZrY#+D%/,)uCi%7K\`B"l,J7S'tfL$c4J6W!0^c\J5mW
%[3-*j;6&F7<lIq0C'Idk/*0+3JS`S#h_aGHk0W3fcrD;s.DVLp*^l*1-[Ll9X*BUj?R^h;cAR*K/9XC@BcnB%\S>@')'L42$o)!&
%4&-oCVRb0L6*cl8']$ZO,H!DKa9N5rBiH5#q^mqa%N*:j(Nn%S74t*%@'&Zr;&qIlS>0_u_LLukeARsndlId-]_7cf(],FUn([rh
%li"-k%23r/d!/2Q8h!jV6i=aYi$A:S`6dpLPRo)Y(@p,VLqN%I8lr<W85#_('Ia&Y)]B1q1<\6=C,+4h3g"V,X$?"8!'?K_dE%N+
%J;O&h1iC.ObRO@_A9l4#)'mG)!Qta#P%4TMUntS.:g7!IiS5NRQZPO>RHVU&]UBH'VVt^IkeSdJgc68B&<raV;AFb/1_s`9;B51n
%4',Kaq;H]LB_;M<.IT1RaMFgR;nZsJZ`kF-?)h9t5J1U64Q\%LWnkP/Zp:)@<?A1eHG1SFDCf':iA9T'XRFGL=3MS@oo,'&r9Tq,
%IQAhjLBTrBk/'O1@8Dg4R7Qn*j/[PT@-$YG'W+)18#=R-:/kO\.un:hOk\",$+2edg*Ie.bp98I"7%Bt%>oSWciC"38g,eHd:;ID
%:k9"7$K#6fdnD;hjHS7-'Q*1!j%THWNW!*,qbLR)J,7/klOkb1W0'L@T!L;\9amF@R=t2P!hVh`Z3/h>-I2r5FC2Eq2AZPi*/3%n
%!o#^LLoDe]F:7$n;s_epLe+'[HHPho4-@SX'G-jDhpu\R)8Q#H>VEcDer[D'od9"89GD<IAaY^#Mdnam.s&[(Smd.5(2`)Z!_5X\
%L,*YcPuE@1/9luM$;mqTbXt,YAdZo.\U;YEZZ6K'i_K#/j$KiI#Ff1`Q@D;P=$,<JqO6rf\6.[tW?&radqgp@45j<"^?S]H+HOgT
%=dejD<]\!sP<o;GF#G"5H"`K0#pe.e:-VBiK8([Z^!hm7m/:==`G-,\I[8-gDgS;#PTN<M]^Xm]0(-\'fMc@*H&G?:604A@Frd.f
%8r5MBX!6mp,.W!Re(CVA4d748d&+OU=0,-L_Ni]4goCc>X/d]#Zi#n/Kd%l2\aEKC(eG(=Qop!@huhCbCE(bDb$bhQ_^bGDAU;-V
%prT=iJ,2't!,gq<>`,o<;HBWcg.F3>U?YKbE)sf.[YJYJA9MTP"8fK(=c3-r&iU5q#_7--&@tpc8\,Klea1T-G1uM2nV2i.L*iis
%EQ-N$&8C)nC<_35"ju2%2H$\3IWr@\0CU[OJVi8p+G8@*b1q8b;lQo(`a^0Nl*<s+Ci&:jO0\Y6Cc!K"Du9=*^1f1Z%nf.bXCs!9
%!Mq,5gPbeI78mrE5%%sgjC5FP!=J4O^@9@1.!\$L:(Y_f%#hmM%Rj6Bf/])['_077,h22J7"t=o(WaQ&>R!j:UH=Eh\<7p3;=K#a
%4L+>mK=5NI/o#Ejm3]k8KV'==!3a.EBB86FrU-_Ii&BQaKmem0QfX!mMl"S+9mpS<h)Z/R6)UAb:1P`+TgLY!EK6E>RXLIsIU"tb
%M[DL/b#eDoO=5*LeEj1a1k.A+%fs%eI597gXHZ;N306]]cgP7T-H18td__KJ9M@X!s!e#,F*Bk;GckE0C!JG4W[V/L2;Ck&<U]a4
%9.9E$KuXcA$p*E2V\j0d\gdPb+DWj7,V/`r'Ja<[<nXct]IQYdI\Z'#ffb].Q""sLV_`Zek$lX5(>1>lJRGceT8I7J+@1%DV$6Rj
%1OG4I1YRo:DZf=7:VX#Vguk?LA:HK\V%m9A`C/^jS>"(;^X9$s1R(gcG"0?bNP4UJ8^/gDg5N$QeSF+B]\4U`^il]&aU);KH;ZT0
%!O=b$7*8=M+ni6sjP3k05!/o!lRD9*;^:.\4=-i>/G,5@82lS7Tn-jn%'].LjI;5l7AK9<pY^SA`.T5,rTHpdSj\k643$)hToVg$
%-;2Q^N(<OP8Ut^#P[CA5O\aZbpS5MXOH:Zs;nNc4Xhd@JfVh8=+MMmh>iBI&5ZFP=J=PYE.);k\llIND%Jl^KB"spcYKU!?"ThP/
%CrC=lT\co:4CZXt[>SE`0[A=8'P4ecF(U7sqjDn?;XNZtpE,9Zd#C%AJRPIU?C=CmN,GuWT@7&C>R";'\N`Z\<=)DD.lm[N[7,\p
%V-.8+eO")8o1B*mQYmG:N1bt:dC=@2<\PIR)!,7m5*b`'OW>b(1Jhak=$]"1_F%.g3+?tTqs!`E8=+^2@N?HjUs/T%7sjo2g7U8h
%0dj!^kft?g`RX'I=':]@F[>XSh_5JIG7#L4qt#N=W!Du)Qqaoj,%hFg&^W3&C<mH!gDbgUi0oo?aLr`iX@rqC_)Z>:N'J"E\YQK;
%%\KsfI[f.>HZ&s+k8JsE:LEjJ4KZF4B6CB/7iRsq=j_#\X&BBdBIs3G7?_pi.l`bl+mp=?I'T^E-j>pcKqVi)ohkmgB3Z!KX%/)J
%C$&h[lULCIm`]Y-(nsfS+]\e5#u:O<MiD;kgWc$\77kKkAR3q]BoB#76FUINSp@7KH0,.aR19O4a^;c&>^k-5lt<>>,jrP_]h)Hs
%cr:4l>iklNKT:mY>@`C&4Xcnd<Cat/bB4N*U8OH*9)e<_.SD7c&9L!^&S\d(X63(3Dn&E&qua9@GPs9r*Fe`P1sm>DUuH'+*_Wdp
%PdO26;Y)H%#=[em9M+t4,rMH[793LQFhEO-WK@i8E2l=TJ6Pl^7#b9q+LsmQ[N=PIf2OS7,*gk2V'HqL3SLksclf:3cp8udgXAd]
%Grh.g+t1at1_aX$/9P<d.OmMVr"\3af:g1cYEg%qaA#kTVV34uoM>aS2n%$FO00Ns-:EE[b%A>fU$-i6GqG2!>;TWcJr>$1Q5EF*
%C_80&c'lOA%43Jan#@u3pta*W=(&7uMpZm3Xu8!kj1)W<r!Y'c7ipto'O!)G""j.mTT%O-l!2g7/;5BFPH*\QM$hk&j+SnUdR<V.
%>&qO<R+ZoY&Cq`GK.(f(id%%d5$rgT+\aihg;BJA#C0(a&oD[`@@g8;T-K6;(G3K%l3NYDMm/9Z&\:4@5[h+>9[0[C:*B#keLELH
%]E\Vbr7aG0n3/7]e8>^iTO5c$[WS@(m6S5Ep8q4:bgOU)B]l$*k_1!5l?jXaD4FoRV+(fNZ^#[Pa&+((WUqYQdo,jU25scn$86."
%AWu)!"RHI^Fpe$.OK<<4"YgKbX7NKt=sN8iHTaVP@6[d8p*dX&0Ro,,?3=-S`a/&$&[Rmj\K<O?U+:(fJJ(tVjtUT(HRXGVFd3G,
%Q)VmrDBb^rh-[!<9;s_//.5@mlRVPr>J;UeB\b5%oJ<9%fptE!L/)@1FjZ4H%LX,T("d+IMjS1=hsG09J1`k664T!YEEnb`J$/So
%kMb6[f(:8lcs:pi?dN<E42ut?Qd>&n,p?/=6tL%P!#:[`[tX`HMu@Lr$PoY9"gnq87:JsT`B`bK*bY)>'`-m[6iYt\TdJ]?Ut<\F
%P6UQ$LG04c-L.m;U?<b3;YNh=?=H5.jN.n*gS%JTX';l-'hQ(lmp8afFHobN!*C_6(`Y#I&F;qjpb1&"Zb'<[<st!Jj$sdR9YMNI
%erE!\g@4f;VlamUp%G6IbAGa7[c1Cs->n=7Jo'b%)cTd^p!do,\L&$@`"BR&=i(4N2UE>).:!VNh^gY4I$:1q9o5EKoE`re]gVK!
%#5/4mHp?P=0^?_AK[G6p,PC6MGD8`:c";XgVVeR`[Y_5mT[;EPU6YJJ2sTg*-)K!?n&2$`C@(?CGT[$EO@qcH)B+RO!;cj(E!U<c
%'f;)eYk?ZD5TA&-m6$4,r)L]mWfH79D.4rsT>_+g,DU3_f([ZFA8RG2<YJb0V<U\TW&n$M8i!eCB;#$">V#)C`0jBlh=_?LHn`07
%>\AM2gj=IOL+FUE7r7jF)0(CdqNj<\jilX=/?l-E?!9"24XuWDip_mS)M"SYn)p0`huDs(7]XYfT(l5PZ=f)AY8sYZLfSZQ':_#3
%jNUdqV_b.FN%+X/`?1<cm)an5:$U"-%g2"rr&,KA-sZ0?>mu#M>5!d!%lQV@3(dlPH3'[6.ZK;,"D2gX[XsTgoqOVI6UAsfLSF<m
%,6,2tpq@6rI=.N[Bn=c#MrWn$i)LuC2ggG4KdQ&M8Pgf,p=qUQd-sr?]_#u`Z?rtj%se0P/p6BB(Z`/n20>cC2rm?]+3h[)i2hY+
%4mY`p1nARF=5/mB<M6ZN\D;W5O&<hc[=pd#)g`?.,GPt\Fus_JD%Dcog/k%q(EoYhI,Sf2L[:hKg:h7*q:lR70kjQkD^G5k<!q8M
%aq9?mdlB5d7MTq]6EDU@;!B?W]oZDZV?U%(*$o^q<p=bsbpYgB_dR%LqISu./)"R$%oo3U0FhECH9.o-lm=fb.maCGpX]M5r/Q4?
%6AFL*'oY;*>=?kF"'Q/p)PNh;Pr0(PX+ADpU.QUuBLc0"&BMN*79%1HH1uH\2!ZZ)pj)QI-_[8=`4>q1b\&=RAQ(=X^FQ<Z#"=-H
%>?GkNk"Yqo"lmaHWo=9e!YP'23,g?6`hGUa9W?'fd&,)5.cc%bks'3)c*<?#PC3hU0.6ifBU$<^QmD9C5N,@>mHh!(Uigb+aIu%!
%Uq"uU`o2U<QSSWS^lY>H3V__-k^a@\=CY9pi_tm_,^RX94Wmj99eDBu8KRETEtYW6T7$omQAV0$:1$"?0/A`lE2^u598j$$mM#D[
%-GbXQKuOPnLW1gf!oea-S/%orpR-u7,h5i4X1i0!-IVKin=d"SX\'PKV)T1>_uN@p?Jl)<lC9]#B)mn1<AS&_M-SJIeXHH!?>NEt
%K/)g<<R"\)l+Z/[L67kqZ@50I&7PqBe57H-93#Pof9AXDa9A1l5/cu[ED$ffkk"kZYq75b/o8.aI,l&cBn9Y"R&!5#pF/QWM?tja
%Pt7jcm7SMY>d5!kB)#4[pB7n$>(B[u0``uuOsU>mm%n0t#<T^k>oLQ390n@;bnP%Um/I_#5=]s&^)6$H%F5q78kNm>*j%mCWlD,E
%FqtotNc],H):DR0$'fe^/Ye#?%&(]imaq)n<?m7_2m+6f>YCA-7u!A?"0G"A8utYUA4)M``rq=nX!Vl,I)0#FN]0ts.&uEO`)UV]
%Sq"oX!&c>Dl>n>1)+)Ha0sf&tZ^6B/_n/Y6+$&)&I%<h+367LNHm95b.[\r3W"L_^HH<^/qqa]f9jgY2B3)n$c&#gtYuU]9i.[9P
%s1HbW8F;K+_t_@.g&L`#^?HX7h65DEM-NNK8"9g?#&sV<+91</\>K:mAL<0n$,IGPqt31XDJYNtpd8CSrIdH(pd<q9:kmY+=m;u:
%nNVO!TDjoOp7$R,mB=;"++A_=^YaP:hgbUNl^jaCo_R%Ork#rFp$]ZnVgnR3O2&o^$LiEs?iK2ss7J<7\Y&XkJ+JHpYf<"jhB)^b
%O+352^ZXY7TC+7Xm_8VDhgP<MmN5[%oO^[E';,L'!rF^JOsJBqF?;qV'GATEn3(777O-A*d@e)e33/i8p@][H$b3O/$J&Q6=C_#K
%DLt2qBUVneT[-seh)1ft`#Va4c_4Y\7JJi)?NJn)%E":-o!)/N88DUZMMX2/CE:&DRJZ1a79[SF$62&Xd'DE6Kg1GldiY9TiuWsP
%$*$#b<BhnI&-C.b^$q#mplM)J<bBjEjAMnP[[khmd)OF=f9SsT-GIiI95p7p3/cN6^LJAbr//5Q(1DGZbe_SkC?WMW-qaLn>'Gu(
%d?CQZ5d="PH#NeJPtI:qg8\-?BM7K,$`o)&m'f"LYUf''(rsfpK#5W3''M=?E.Wr4h8uN68_1@ip(>I48(C%0R4tK7=.<h/9(k%n
%Qip_aFefST6PQP;#Cnd<,p'R\44A5$VFFB->?G#J@BFUbR2ORRqKH3D908D4M>`+W;D^]8TU6pk8B:g_IQa!*<L\,ZPR'Z/r$!`8
%1^V!K*nFFrS$cN?@p;,>oh%R_i,`m4*?RFfWT3Je]?V`c.TOubVFMPU&Na+'-Dc(i@,[f17l+cOaq&1mk>!Z,[4)p<fR["]-6MF;
%5&?RRT-<tecN3Pi7sLZ.P/Nct6hO8l#.]rhYE4L%l8LsmF@U)&q?l5'Tc&MJ::5[NBgV;T/Mq5s?D0:HK,,;(nm%"-@rR#n;nJ&\
%c2je^)5NeU;t\#8ZD1Kik4O(AXFiHs#pKo>6st=%'L<$f)QL8V)&"R^16M\c3`;C!U%k:D]ke!F<g\Qj1nE7*p\gV"QoH^hf@PZX
%mdptm'[^KK$-V@]jT%F$,/VBJV,gCR+M"%@Kj#mVA8.807W+*kZ?*3%&$IrAb_Ja&fbR@HfiLTn8an)`_iGF-?5RsP.1AG!G#^@r
%0ug4!!.mK"q\A.5KResif#7kZTW"X=6`'+=mf!Ct/IheR1QeL4Rht_"?d"+=0saiYUD'^!aiW8@.l3HEinB49$,OWHEfn,G,A7,j
%e$=aiEJ,9slkp9>Sg:n6Fd_e3j!i#\M;/pfAY`b)#$`E&ks7*Q^'bRn`MD%dB7uUQ#sSH,:r)'-+0#Rk!R$)(':+q/>EU#AH<c/a
%NQ5R1YE8aA6<QAUoVtdoAhU4#bljssT%oKNTKHX]S]mX0kgN$$b9&o<p3+0ap?-9Kn+r7h@?/a]TI!>T5fKN)>%Z-!4GU;WM@maD
%OodJY'\=EC&Y35h;`F'a3)Xt]-*;S;ike:r<DAe/4hW$U`/+.N$H##U'`M>Fl_Rb.=WmI\o(+<mX*b*Ygk&V*Qp+Qi9.uni-7?jU
%O=`9+eCk_Ge1+9:MneB!aJr#OA#U34N:A48,4bnLUp,:`DSP"\mW#72V@&"4o;EIH.]u`B:^GK\Ym<J;*+^pI7e7iJR`U%Oleoo4
%ZA2USGJS4K*#6CC(QSA'0A8dEK)Xj^Dt]ZT/O/"8c/ap:7K4u*S_pWlj1+M5b-$Mgr?7<.MeR6*Q-"67&;[m*e3ig9Hh(pad&UCl
%L2k/r8!*eGh,'L.>4GS'jDjQ1V\umP!>[K\A#?,Yo2gXK.sO;qIM!BUBO1.T.fo\%qqs"!qBPIeO'D0Naeh;pmr+k'B\T?ng`W2#
%*+EfOO2L)!+['e(/O'`5Q%_iPRjEh1Ul%sobEG9r:bNu,\P,#HN6F$R].6Ce8q8S.CcMVI*2&C"jr.\fG!IBm`Z/bR4af:"25&BB
%\)os-BE4$;H#k)a<)aaKbrP^&Unm1kS`9^>Jg0X+T&WZ9HK9iGa#W/aA=E>^d@js3=P)<(j1Isr:%EZKF]aD`<-N^nF]e$3DWYN]
%iO8/,HJ<R1V&\=ULL8*t1N^r>FM8_Vr8jp+l/gT<7S@Qa]]t8hLH!],%[V0jl;@.Xd?eoE-rIC7hn2%rd;p's*=S6\a8$)mXcJfu
%LM+O:IIV@I0F-7\Bt6Ah82MZ9a-VVfH!CNLnE/_=4^0Z;bJh@9`<,:@it6<lj5%_-g?uIm*;/h5LWUccq07^0eN)]!j<;=P;B`cE
%4@ItVlFNKJ!lp<bd)4!N^sBW[YOM)oQX"4Tgh%VEH1e.a\p8tu:"H7Sq0@dX-7F39H$jJ"s58A!a#\PEm.MV.@g+,Oh[REYmoRSQ
%YZXrEHe!"DVafref5E.WE6aO[(t2S8"u88iK#ODGJ8TV-$-4u-<4,m?N8*F]ijT]bC;WNP+/2joA?q]HWXrO1culWq2Wf]I6103L
%\Q.Hn5Ur1X0kA`Y<6_5p(mF`H+b17>H3OFSVD15(J]c]%2BB>OFm-H:;QfVFP>Xh9I`<(nXW\n8"nYi->qP.F[$hsL4JWJoV[6@,
%=U[1K`2F(d?UBt6$j*iqVF!QUZ.2qlS9Zu<9.cm;(0iCZBIk<Wk#$&W%'V:%[XH/+?=VHg7lPII8AoscGAu16YM.^"$`g?Y*a!#'
%UfYF*q-MA-C6JL7$N8&i7_LYWAG+BC=QeM<oD[P:^0Y3dOgdoE*.P1`HR(V8IK'E,nZTPq]0D1Ul1+6?V\Wc,b#eT,[Fr)p^1tfV
%Fh4C+j(1[66eh#@g%YQ)6M6!r9AnW\N(9u_.38VsI[Ko>B^egs0p6"\Z/@.d9S9Wd;b=`YLFaMM2`csIhGmr;*M>&>WF>%*Id)qP
%27R%j/XC*(l6ROLr9tGI*\Ubk7eEIn5,?I$OI//JAlaA/.82Y=d4b&*13a7k/B-Y)^>t]1&P,%F-(Ei?p/%)lYSj:J51Ckt3\\60
%`$JWRchA!;4O4=1G44FRD3m]f&so[5c04[/Q`LN\N]1t"WX;4ALeC(B<V65*Q`RJ%b+#nO_]/^2aXo-u]2.Xe/NJ]G,nF_3!Sg-2
%QqLSf'*B$c,F5QE=4+%^lUm1C\+Z/ijN.$'o1N)(<3;28,q9csW6T)b(I^`*^C53f,bdoZ!GMNJ6RAE5*@5ZU_h,4"BeoJT=UfVX
%*0g/RcP\Iu`@B'ALHC9`UYG3n_E0mc\V):A=d^'A"KbplV-r_]o9q2+3pZ#riKgq>R'M-lbs'E_lH;.DE,0o!,D#;m?&$Yj+h>15
%RDJJi3dk'*KqHt7e67<%psFXIg!Md$nmNVJCkQU*4QLS[Fr%8]3MAq*RDnaNPuL$;FUrS%7qp3,B9nS5cZOL93(a2pR#8RZZX&k?
%Mn.6Q>V[j-j90[Y#cZ^M'qO<2LG!Y4.(.Q\rAmPS3m0%@:6a4am:LUg;o!-/?pXWIP)X?UK2-'9%TNh<\8fa!bs6t\<2eKq;;0%T
%QcipXRO'AT&E?#1!7uA_n9ae<&g)/t=Jc,9<THJ$M4*0(16c,dSqsZj`54W(0Qg_:_\TKL(bF><Zu08bbS&J,%8;mI1](m8$q0;]
%iiA7Q7qY&cdC&-QE8"5XRpm"V>QM+oMX-k?!&bOFmS5b^LBO1--3Jd2FYa"ji)OqhHB&7P'@3RTm8?+d";'i:*@@PgWkngs]VoVO
%W`hn"NUBOi1o,^R.%)+?@tngmAKTVp[e"?hC$3Z(s6L#`2PonGO.U%XO'm5EQ-V\*7+>Ysl^:GI*gtaN@us$!8=Z67=NAJq_J#1r
%)$gre2PLn)Ma#WdlN/pN4%KS_WOXOk0>-[)_M!(B$76-rdCTTq;ohM,GgJG\o`c!6]g`LcSn`m0)*8(sD9<#,CA"WN/Na'[n&5g;
%:G35p+cX(@O:`7$Q#H!Enoo4e-\agk/MN/?'N#\3TQ:D!.Re#J=cT&[QRc=lB'6!W,ptU(\pF%b3Z.gD`VBa7M1FLq4-QKhSel=.
%6o?eo'oAgq3bdk]beqIo!$4X:QB[e<@+PT54HiDFfM!+@c0#(@Jm)S53abr2"?^0),@AQ$ia,NaeXdLK%L&'DRI\Kp%);esn]p%P
%R'"PJq+OH4+ooST]iaI;F&I4FUp;&-ecoD]Sg0j(4p%S%Ra-VmT>j"VAW](qHd&W^IB$NEVu2I$kHQZB"^%,4h0($.Esj-D&lYf#
%4D*[d7KEk4EpR@+:Y8FdKhU[bm\'0+2G*IJcBgn_6(+3AER\B3FB'C`4+kWmZ'C*g"+:T(U5U)!'uS-I.#?\'KY<?WIF?E?C]Duf
%nG,iUAA72>]$*>2gTL6?%J?V?2@n_bNBZ<nT!uj54cZacSgeQ>6#&HsI%%4jV>hJlIhjF(/%T=lZMRnq_IBT]C.\gGq;B&u)LS1i
%549=QP,8+s[_tD>Akh>KfSNRr_hstDX?[7j@<S658_UO'6hDDE=0E0!jTg<<hWK"q%&bi/*BL->5,cAOV,Hf4>t35Oct2<F4eiDa
%DJSFPnet:.k&0eXo;3X@-oSO[UH-A.mTJ$TpCpKG*g`m>_rlCEVPTnLX@)NU-YhJ#!#ZUggpmKneq8<Cl.n>&2[`s2Ol=647P!+1
%d,/k!B8`TY(bXg#c^!G[3'sIL$a8pe9liV1)3f$X?j/[188^RYA&dT7o>**mfCL=Qf7F&>7*-M57G63P7'+J)9sL_^K,q;"'?]HY
%F)Xt!iCqbMMf)[(LZB=HL,[PnG'sS\=B\]1Vt3V_.7%EfGb4ik\I?>r8p-bK,dt6q][#T0A+g3t0X,tTH5GI\"o%6bG-al94l=:f
%&EbL(_TD!UH!igKPm"BQQMA9/qTeWl8SiNg+JZhJR`r@Q$PRY[Aa2CfG-O?"Y\NX-N^n4EB4HQ4bt()*SHFDkI#JaKdn@C,EuFBe
%SVddMMVuloN'c\MX>rm]K%nR3Q4"cpK"qTk3Z+EmJ-Aq,O::5sUm"alo<m+>R0k[LKN<'qKdF0B]gt6'"Cb)-&=P__@k8E.cQ`]0
%9j0jkX"H?5o6UR[OS,r?W2UAEL>EXfTlZ-d<ZhU33hpAnVJK"Mq\puqTae(ZA^2:HjOrfa92"uD2GjjdC2tGX]TNu3^4b:<5LWFf
%+l/FI5W?GLLgq=>MMO4DN'!hKn[-Woe8.@Z.`gX0hau1qQKigANNWku"\@K`VEc'_:63:dgOe=pME"dMH(C,sX(VL8f1AjEnEqJd
%GS3f^WXd"bO6&5i.[Wf).ffgehQCN/geiG!S:(,"A@[rJ!8XqXNN>1^EnK[@AHTkO^Lft9YE'6KlmW4VPblMGH4EKcq'6gq8^J6A
%VKcLL6F*Dop;K@10[HR`M:/'Y/@SO:#T*o$=O;#J2V:pWM<e@AC9#9/@VR3f4g%aAZA&50QP19c1F,^PX$^T8+<_q,?X8!/YC,RZ
%p8g'.NLc8,NSI=<Hd;$qa!f+9L.CLbTS+sDnV-OAH^I/H:^H$]3k!D$!mE;rJe>\%^p76O0a>PYDU@<+=.N7R$V^YkK&<WaZ;e/a
%a6WH%H:3rr1YB\i)?dhQN#<WrWfTrSZa&l-SL/`kLGr^EC``*ZG=7UW:HReOU/Cn6k3[S`R[V0oW]U*+$t^<5@(LV#Yog>pMpmcs
%9[d<b.C8+mY=bZ5<q;KK9sfQ/@RN>*O@E(Nk[i^Ma#^BWe<M\h4oa:<)!O<_ke0fFBi>2`jBHLHG^'X3bK]ZmO;Jm&o]dP<9UmWR
%?.0Vn"AI*b.ABGZTL4"m&e-Ok4sI;03o>#^94$eCa>=j;J#jC(b><uUQ6X>>HgEn3.])QA,2[_ejCC1YqA;HLfJQBTM?c-Q^_@<i
%*\!`iYF5N0's87g7Ki'>1NT^iTV=@(#SnE*jJ/e#<"5lIqcRb3nRo_'TkRHVq"XEpFmM>CTlHI5_&.nS0Q$M&`@r!'`cLVN0asND
%!.iu\%)_Q>2oZfR5_#GW'71l>`mB:=]E8uTU_5L"?MF](SQ^BQ!!nfoAMUun(Y7d`WDKL]#k]4N5lKI"pC"W1$0Vk-(Dh=I^XA,0
%%D5N8KXCOT02t\mG.SQ8TipCG_*"q0NMT7OF@-i_8MA&j(NP'/]ltLU+2ESB9qnNjDLi.%6\b,c/Y&e8'V1l#Kgo4"[;r#XpsD!9
%O"\i]<Q7_2r5:.*%pD.L`'SP1n+0"";#1^Mm0@$Mg1NoOmD^Y5==&8O?#TtaPD]1m"0Fh`A:X$\_$Z0Z(QIc#X2%o#]D"Q?=9Gfj
%)+]H0:R4Ae;h5:n$K=aY>X4!d<GS]4V5nbp\1_*pn117RjaP"`7pB\uk30ESYU'.@WH"MneCKPTon61s"o'Z6OTpH\//A%$BJ<Ce
%aQ!:XprYr$VTIsZ^c[%V`;.rsUAp:fid^;0?eHrE@"m$&pKfRG@b<18T[0Lo42;&Z7H%7n#PFR"S*a'.CL^^W"2[0HI0MR!P'g1S
%o:ZdXLJAnYG/.*,Wn81Ur*[sl*aiMuooNnd&kRZp>1M<Jirn@m0%0PR#=@2OK4SKf"Qo@FG_:)m+sUQ(O8si-[6/^I!F:Y4idB^h
%0=RR;J]N2!T,VL!Gh4:Y(7Cd\7uB(mL4"3=,kdLWphfb_T+e.5d,)-uaK6$&B5\?F8f(iIp?#OBW')4lB?cEE#8)>cc&V3U7:"+@
%8<LL*(9Ql\f)W'6MkU3hE\#NE,TCJ\:+4/5P'Ko7c>YAt3C8,9g('dZ*':J_NmKSX6j,-X^We(#gP5DAbs,<^<^T4mR_*BBkC(dc
%/X"C`kc#$YW&\iC.He=.D"O0,jGZIV/<k3BJV2"Po@Vt3*8rlp=JcRAU[7o("ptu31a"n<5!JT\Rg4G5^\?&'%+?DmW-"@hr1DS'
%?lA:P7+_@`6LhiT\PW<=l]tf(Qg`pXf,(h+'VOkPJ12^_8)4?-!F>@lWKH@3DIKlDRLa=ff6rYgAW<Y5cj=1lTf%B%0cGCYbRPYO
%eP#!9*DWhq/<r:hMC_r7)L[R^J>L<>9ccS2OlBu1!Y<TLm%flI)iK,;/qAa\"@jj<kQgf6NFm5$PX,cOgdrI4#Wk,DiPj#V=Lj@c
%-2F2Vf*G(T!*^Klj:f:"K6f;0I]Ua?X1s$'#khW*gS85PSe6a+:o`[G=HH>D&jkoS'C>T8-@aEWm9[LoB\"<IJF/t2>s4ER$(&#W
%,\TP',3OIVFgPI6s#r<F+dQ7";K"jK)jNT?(hVsN5Wo0$_YF["PR*AH(coAH%U>1EB\n:(=@T2OE"6@pGCA/o:kd%O-tU1/=)<$`
%Fk!tPkQ,tODDT8;\5>pTkta,3RkM'3I^94K91a7n3#ZcWWWL4==CXN/SiuiS'R_/n(rpoFO<F!7=#SP*+I+l0(eX"]AtJUaPCkL1
%\M%gl"$DKMj"j[n%Fp((eaR06-\;q^k*87YE:;K@@?Q/Y:nto90kqRf2M<apmAjZ92J4XK[`.Bg("f$eV4^Hq1Q!1o81G`S`-],5
%LqkKd`+CiP.Q>J+3?tPtLSIMg7Xk\M"6DnP&2o,83c_U'HmEC5/-=tEqpYFN&E*]ebgf+5AI?;^78#Xt%B_STD81uUbN'j*D$*[[
%I2)DMXf@^O/Mt_peC54Y<@:po3aT_n3EMT'&%a+94L8UX^.8!2UH#fN&YL9cKWYNp)K'h.HO3j^OLg3`",0$OV\ZfN:#.lP%/AI1
%$nKKZ4(#:2T;UA'eK<K_aS]S%.%s@5,EQCe>M:!_"VASfGCun@,k-3ZlkoeMGYI9'-D*[%oE\!U(_6aOE.8$/Q9oXB`sHo!o^J;(
%+$K$t^E@t--]c,'[sJ>65_[8d\UQk-i!%5=(+9U8M8kSjL!H:l(9@oI,*^Q3?)o`+TWI/F(]FSjRaNn+?Pg*PILqLu/gAQe*3/!Z
%?\frj"#?a7EGT=<5/G/J_-p7W70;*)dMk[rnqQsY&MpdDcn(E=c$mqGLT@aD98>:$X:7,k_Tn7^"C+4HNpm0!?F!&efPQ99YrtFH
%%B'MFNkq\fm<18ukF8..if:?ZLE(O^m];W7DlR@bDh!'Wd4!rP#=--WB-q6bG6*atVL251$&!"@!I*>kdK=b%l&E31_nsL6a1mBS
%/'DcWmhpH+`U5)MOb&/k0<6ua\/0cZbrlR!4r#[/+o8sY7>_&(?Ikuf=Lp__j#kqacY7Lj.i[FM3eNA*^b1Z6d4HA-1Q^R'nL@,3
%;QO).,M<]5lZ#>pV#9!tF[Z.H5(,o))"rTGQd+$OV&urG/A<-W%BXu+YgIBK':FJ<:I8<;f`H^$1QpHa^=d4.T(8*L-h*%jce*>%
%C/oY7F&Blia#\@;QK2GJ=6F]HnQ,s/<:Q]Y[i@28L$<R(aUf>Za5D);I.e-S(?2PObKP)B$$'8Y>\aYD#6YT.La=uYAen^+I`%<H
%=BdL\ik,+<&G"n#`V0/tN(>fiQ]hO4m;!`)5#;:5MO$p*B>Y9.dh1Bq6?hUA[WAhDOA3\<$?4`QVEhCK)K<H"R_X7NSQ8dT8B_fu
%#0ALlQrY&\_gOQ>$''V3'[aJ[dB?n]"R_SGr+qh?e"C;O:l<M`>oc:p:@qWUh[2:b-N*KC!U?ZL<k`t8b.hePoVWM/W'OtD#=4Tj
%@Jl_%`LB,&Z]-36RiM8=&"t`2a].9t#k7rMSK,g,<b0Ve/"26E/UAOP3YjDfONgIZ?EYP#>Ec\@*h[R@W]f?sAXV.,3$U+BD7j/j
%&fASDmc@\+Ybd3%%cdXNQOfmKa9;o&Z40._;OT]i)D=,hE@9lp^t/oUIT*EiS333rN&C8LgM3k.%VL-!"0Bn5Y@*FD"\^(AprN99
%*_*lJF's*22&]FBUdLs\[_@Ub'omWom.mNPcUntiE^"u@d5e%C%m5k.(:cRNCV($op$7[>Q)3r^noUoQ<!i!/OVBlO-r1XI+Q2Cc
%^66u9_@($%LJPQTE%3>U&%g3QD<.$\Tftku;VQm%f['],er9eJYK'hUe3*<WjVHDqlNO(A"[fif9&$d-Q3<i\I%6WiZ?Do"*'ZI)
%P5*FD,<>B+gW?*n8%XLch+\oDa,]>ukC;-<e1fq(*rct)P4&L$/HS[eIFAWto<:NGeL3)dUJ:F>#^/@Be.+c/*=`9.YW?FT50q?j
%F&Yb@O.=\WrrB;Ekr1^,E`l=INZ7.9W%$HA3Jt(bf[('PjPcqf7n4W:Er]cV'(m8*T(>PXi<NZ(gk0tfQ'L1n*OXL?R=\&P1a`e#
%99A2,1+bN&0iDS(@&oH&7)tW*aBJ`u5%P<*?$o6mK7%F&YL"O&l5Ut:erD%,b\X1Brl^])#FR&lG$D4BN`2IA`sQ.j[=M%!3SrE/
%I=Y@dC&4_F%@'fo3T;h4m71:k'Og\C.6k]Z**b@G5,)r!G<28c"MkCe/cAd/!K'dKRQd\T[_>QaX>)sQ*_pI`CWl^8Kp#kJBG*l#
%(YCE_-eg"0?SI%a%"K[!=;JroLk9.n,9emNMdrc=-TXbT[QU61mgh%TD-(I9*Ie3PcP8=ZgB$sFo2gHjIu'$^:YuZR[spu1/(j4)
%l';,'C2L1E'Z@Q(=rW!*D2iGAes;<4Nq>fmg,'`hH35e6egA]KT`7a=g;7nLH'ehHCWl9n!KCBLXURNf;D._gD/DVYn7-^K[Pe^+
%S2qI'CK#tZ3oS?<g*E)$U$s7DD:lkLK"dXW>6un3qP%kEkfsU]&Kg)91QI+q1=M/p[;!2)[89utXUSdc$97k'hqBd$)f-6JJSW/i
%IB*-k0t9,XLj%UM*u(l[!afQr?6$*W:Iaa/DA(P=0\#TbJ'tjPgkEZ@`Srol!aWY.MoN0XQNCLni,NTP2?EWbM-M"@USR5+@WH=Y
%cSH*u`T>ghO:V"1/i)%UDf*s0@^3I%bn&?,HdK;]kRBWDkJcW<Z9/aW`tk@a6Qmn&=fsDIf;8p*r0E8g[DBr+iDm*1?(5*"+c5R)
%l.Tf4(J^<de@!t-7[3(FFZDe&s($7hQk:'=N\4M%f3oKdk&o@tb;qLCLg:scG&#%Qbc^R.XJ>G)[;/EM%.Uq?DHAB"G-mao[3[Ej
%!Hh]7Y-0DN?iGG!f;<RP1\/BNg&Tglgj'RG*'3P3^)10/`%H9561NZ.fL.7QU3LN';2no:MrV3ZeM0:M]J`dh!tDnF?COi<i;RY`
%f;;?\Z*\*ZcYM!tK/WWro\,0MD.tZ#f=?Rf#UEZfW*\X"#+gL^_Su3%nF%RN]t%HR2=1jJSr<!tTT.ogmcDO;<+/pW0>B%!O9E3&
%?Q8]E4&*ken[2fS;]u1tPckPn0"7f-kNfbiQjdK;87*<b9;>'J>HG$1#i_o\62TAX+4U&MidG[2Q].q@iZ`hgpkXl*iI3Mr2E(B%
%o);)Vg&QO:P(nnl[/k4Z>k&qdD&VD5f#bo1&d;+$^1WB'[2#<LYAa?B%<X0q>&OJpL?h/uHIFJNQpWq__34pIY2Jdg0+QVp<.\@s
%PJBB.ruVXer`Br')ku>L:E#Uq!?><3YV"GBHr.X!8kb?p(Mja#0DP>eK5CVA1>7gK)pCIY]T^/iX]gX<cshWE@J@\)]'*N3%5\ro
%I'=I4p.H2F/A=kLV2GqoKrtjMlTkhuFRC]uM\EP`12u=M,)$=>C"Q`T=^dfF4(&S;>$0]TBR\aLYRN]RYeVV>Csu49bI`"-)aY.S
%bI`R=Rjo#gaA6F#VDZa2N;B9'3RmOl\[c-QYaf*m4kO1P5Y0OGG1[Q3V4_NUHJ!t.k>\&<_%59cn13491W23I8Wkn_MO7&2BP%,"
%Li!8O%<7o-,j&VZD*9s`@KEk;o`(_DD>JGYkIu1M)kl"3AA!b.S(9>c%R$4h)kg9jOLqK$&W'YQ^UR`W(rM5sJ$Hs4buN9^U5Nkl
%*a9/bpgQFe::'"Q(j#?)&*qIWo2MY[VXL7<\]YCB#uAj6YP_chhP@DNTW.oN(Mdhc9'nUp=C^?^'%+ru)r&0uCMeLk`o=05R"#ah
%*,W%pDW]RUo5!X"YaAo>'W!r#L4)q>@^i$-I<3Fe.95(^?gP&$lngrX_YK,:a#l9jOmrt]R."Y_G3>6"Pgj*lh>FNP0jXY5:BHpl
%CeF<5(hA)=@&.a?aG`,7:oGasbX:LuBZMB[D'>"3du-ZWU75gi4DA=F$92nD>['=r#^'lS0-](Nme4]dU]5(rA8\i2>42tOfr!#^
%df(&LbTY)X(RJs%.MLTl(R`LpF-hC'akWn]fY7/lDUcT>:Hk2!Xd']pb`Sp/qr3gY#=n#S6J3+iCbrgCAY(ePADWQVc!T'Ii5$ks
%]Yh!6A<P(t>BeQ"McLT\NQ0_*<u.Q'\6d*/^Fh$eG;7;=>nJ>XC7-G[8hXdZ*/4`ahUJj7]UWoO]\W&iVo=j)[NPZsd%%f&ASsY*
%!S!$7[cp\8\-]kTAk"8%:MtoTK`EQq2oR=uUZG$b*&F5LTLO?nbViK$;)>ddAt(?8V"io,B'(i*OiY%XAk&eIC\'tO1U1UeO!iCm
%j.=P8UV+*KS(;5[Po&1k;o!-!i_.!E->En"J%,bs.g2Cr_V(gH)]$:d`gK>*BR!dHZ],;_.8)F/D0*B\-i-CqgU)l]'jRgrb8`;e
%$b^4dAjbC1o0GK#1Pn9+(,tj/j<DtW];TA.3')q6:[Zo(X`,Lp^;ssM&;dAm&W;(G@@9:C@Qipf)ck%nC\P(.B+CL.G^9tK*(#8Q
%8O,)"RR\k]$JL5CEh^g%F3lfRP7n-H:DTCARAq.T77/kJ$MWG9LULWOVd@3'Lh=A)8cN]URR)R$PrBFpe(guS1A'S#D*BlSL,Tue
%e&k<Do8AT?a_eKJ#^=\D[OdY+k8,5b6C^M-2^-Gl%OFtZKX<>d5D\86,;&2'WP'-_(3LAtpdIbY=#XKN1e6gpgP_8=%e2C;jLe#t
%_Gi>dN16*@A\2A,]kD,Lr`q\%dF'qRAa($j0?n1OQKh1<M`jM.Ka0DNF!FH'6:P_DAuJZE,?/QL6h[=Jj>9@_aSq[#k1AudlWF?J
%IlGT.*t1"_2!Z2!7ElrKm).(FF)r=i>sCkpEGrh@EO""OHt0P,\S5ecfp%!^0+S$<_MqHOTbgSNdHXW@Qtd*?H6"qEc(Td*q8lWp
%r.#a#a_Dd+g_*:u[[P0nSS.GfX)0gE+.1=0I'kPZ_f9<lKJie.!kNY4ef<N?3a\,Z9t0?NXBqF)fQHp!XL5"&W7laKf!_;jEbR2`
%R[a)Zo(=30D-.X.!RAYhM[*XCIo4hQLMVK*\SL>3'G,3N>3'6HNu*)dTgTFSa^4T"WJ2u@IEeKhE)md'/Oo"EHS*860jaL[(b1tS
%#(Q"jPN&'d-f4n?@*R6US6KJ`_JE\VL40OI3KmB-;<g[sWZ6FVK?[$Y;-hSfUsT1sP!.m:K&VW?X2L!d"I2fVK+Hq%#C_N*0X$uJ
%lMrO(baK'MD1T*I.Gm+81ooA_ij>$WB8'6)D9hDo]B*rOVIbp^U:o_l8*7EJa=Qk*c;Mb8X!_>F[>g!O#'%ubm>0838X-m^UKn]!
%UT+A/<\-SIC4uaR7M2G3K*S4:VU:p?C^Ao\KH6#*@G!P0B2ej*=Q#kk*Emr\3m`h4&sp:/kT!Z,XO:%U:(5FnN_$F]$3d#UraH(g
%eKIoL=!aP@ek_[FKscU.S&2[e\j0Oa*J4ACN6=rh]Y$gYKUOmgEl4pC$r^gFDJ@\0\GMuNS*%\*<?]uJeWZcs@?aCVg]9A)&e=Xu
%*dE\qfbZVcF/A1b&RG,NV1^$o#-W5R7]=t+0L_YPYqh;4W?j%+$:&6._<2KOT.7EuqhW.s]lZuXXB(WFPrLmF85e$I0kQ8i/DA6c
%IF(,\bG/F[_&<eZ>IpU=[SGaMV(*':6:hD`Sr^,l#>?$<(YV>9pB>&F4dI;u*eg5#g0:nWcb5u.Rs#:jc6Xj>+XNl%;qrDi^N8,!
%q7J5*du=7gSZtke1LV8cj<c(Bkims4MU;o!FA$%s[M%Y=Q?g43?W[_m:G9JlEu;j(D*#H;]?MTO^h)&;nY6'CO'=!9N'+:)/tK+4
%'eSueH3P<Wo,Y.P1U[U?e?QR"6,_aZHCYnW4'.3/jE!3/<o9"7RCBu(W@M["Q8&%3ja&&U)c+n\#%utuf1=?+pWBe[-:jl))._*Q
%C`0Z"2ai>CPYueOa#<>Ng8>mV4?;'Jj[Zk81M^>1mY.`A2J5c.l]/eSN\93/n^)((NIJ?sQW]l7KUjuhNhf^N`)o7"JRKpiU-o'[
%o58!.9<k\#GD\Tf>J@;P`fOTF(]eaneoNn?2WjE;:;eeBo,Of%0'E#Lg]b$H&#HOKYig3.\;#q-MKZh>kKHFA409.7@>bc8%?i%E
%/^"Q4e"X1ea#U4]^)/ACeNk*rONeQ1YCu[cm+5L=5rrI6d20F8\N7eWS3iq"X`n7E*`ZQMQ!/nE&B])Tf:'/T:A[X7i!mW,9,MXW
%4NdWmZJ3gk2!j8_Qu_;hd$bb<Zc7>37"OB@m1TfEB\&ujmX1'N/_&_7B3DD^e'L@X^LDdQ<\gq(0,#R%B:79d_&SEq6`kEIk=GQ#
%lqRC2=a1JJO5:q!-#t;')WeLL(3IW`g\NnAIhPZ&E^*'^B@'&+$'H(:?5oDPUjtDYRTHQ1:A5#t;U=m?d-'EschseE93FV!lZn>C
%Xt=!(oBARu%diMZ4tAC(1#@T0_t-JlPO:tKp1p7_G%n%o)0BhR\JV7,Aeod@^1J$<;AA>t`;\-X+Ng3O_4<m6jZIPF=m3hYFE+!T
%rb!1cFN+7GYYFNdb?n_i;*DjOc5\T^F*-cPK(=#@Hd_^D);E>O>i6Tu*Ll73D_t;`Sr,$go$8OGDFn+q:JPD.%VCV/"j2]bGP:kk
%`]DLO%<h.7U,beN<l?9.9p+U?h/3U<HrFE#o;Q)JKUM(\.0]-AeB"ZS"Ydm`Tgr*`;LMf>@^amiT`Pq5GhQg>As"3k?<bI:Y8r6[
%GW:?>o)J]`Qq?fq-*Z:&&8eMtH2nfVE,7P'gE%@2ffF9b&M:en#\AT=hA22`fG.V?M9SC==tSYQbB>o\(7<]UV3GqIHo5+GNlO.B
%QtD;B(;06-HsJtCR`34F4;=u56qBOgOE8D4ber@3(&Tmu/C+^F1>$QIJYW(F:4d\(2JuI@&Dhd#[XU"q@gW'RI=.)#N^&M+3XcJL
%2]hK?27RPia&*tk5+RVQ-K;_GNpA#^dClUb.[`d\fD_'gkRXl&q_Fi$2O>eo7T#MUbHWM%`cb_Il`BP0>qPXh,<hWY^-#2[/aT[b
%Qg_XPNILJYRn$6Aj+lQN0::ak\h$%>'W:Du`qIdQ/,^e29U=KQTr?*(OA9;DoK:1K>QJ%=_2Z1a#:$T#jA<C[_s-d^R3g5Od<#P0
%marr-'6)etGt!HXi#\=KeH2*qCVa8Sa>e[H$a@qqdpG>2I^+uRo]4'(bYd1+c)O,drR7<ep[nd^Q[di]Y('3,o'uD,`B2see$iuK
%>^!&/#jn=IiVM;'WR#rjnq+Bd*6_3Gme^`mOHqf)nBe@rkKr&fM?/OMP65/dmDs!XX;Wk)/uA:55YZ7pU%PAu:E^M9Mr<c/S];>+
%=9fHmfVo0(JhN^BFP+p95)haOoD3@f0@neE;E5G%i8!M_.+)HbKI!V6?-R/#;d9jak9BB6##+oLI[$'L)DaIu9'Ls6;h6[4017k]
%\0)&R*S@cA`*M-f#k<i_G#+*#8k#!M:3Cndg_pd)&kpTb)fW%1'V>:N=F[F>fn>M2Gou>QJW-f[9q1-uK--"O1-R\#/hIV^`^;_D
%Q$*1[l'HG-&>l6_'s>]E`)dTli#P?tD(t^1]&$'j%5EZoh9_<.>g50ARk;JmE4":+6!36[@P*jIq]ORE91uMJ>6:93EGQ.;=K$se
%\@(<ud4@d!KmSgH`A#G4-ZSZ+fUi2@2.@'Pj8NjORGj-Y>YY[V!UR0-poI4Zn$!j'S+$2%]9.*kS^]194Vp2j>asHp67)pTkg`KP
%[1]Ig!<TH+gS:cAQs)YfLk[.l]oCQjOi$JHG"5%/3_q$-D4P`U+sI\[BJD\B''L!"P-3gm.VeQZLjQ3ZGPD%9Tu\b^jmk1V.rJid
%!='.0)N;ItpB<:;2SM2Z()5.;VArAdO$6rGX#@\ucLl^W:/LG\dZNu'>ce183N#sZJ1]kL;q[(GT5$L7j$JU@og7MDnMJKagp]]a
%#Dl)50dCQpN3n!"'#IQ!kpboL[K<[FQA;Da+)<8B0%,\1GFZr:'nb*.,<4>hgE%OSIafYEanC1t_NT&rCRZik)bs\D0#n;/4Wk\h
%j`k'L&s*T0g/OEj$6<7B=Ghr3or"IE#N0=X@KH]")l'hTH*!OV[Rdn4?_e4>P^-^7>Rbe4Eg#`gKWkZ`'CiF8S^m89R[8*Jg_"j=
%ouRtqe.R7Pn12UaXWiDs@XAeDB/GGj8AEFg5^lGdJE<aV4InhH\V^uWNqtLh:-=\tm;4k+b2T2j,:K!3BhJ.(R<;V`TV'93G'RF(
%5T74+>?j5c(0MU-h)r9Ja.ArR>%eksHs3@'ba8V_M#pGk#a\S'oZc@8e<Njq1h)%'@hm.cY>%FtgtM$CfTd;*E+@B).)LZi6iLh%
%:`/!$eBTN",=>+TG(Ho<XKpWcI$d<ZXM>a9r,.=TkdT(:Om]p`*Yi*(YPC<1c?!*Wfi="lfOr%J!'E*43imRRYu5Uiq&Fe[=:'1a
%ci)$6M*b@5%f/ZX^;*`FZ;c`cG2a8nX8k)f*UN]kR"1!)Y;lB4ARfJb=\E\;q2go=1tD:$_/Q.i(VC'">cVmai4W[CNT@\Vc,RMr
%!INILQ'F5/mpeW:n!_4H6Rh-C3Yj@K;e,q\[kTV-8#UX][)rPS%2X2$C/*/h#=XOb&dNbSEf;uT'skEsZrOS,D=)*0TW([Wr(s&Z
%p->j/cr5)N2u">>!-72<<%a:-+\<.=Qur]ARR^:"@F^Mjc$,u4YZ4@SDWk>88ZP!YGVini0Bm1U6m/)=+N5ulqA)4\;("a?8e<=W
%Gq1[HQSgr2(59ea,X;otl%rF&10dI@6.e+Y[GY8kQ4.[dHYTTS(7:uADW)Iaib4;]j9Qk[(u04!UmBsr-g`WoqNs]ND(c@Lm9W+d
%-KO,fV&\d_"2N2gQc7a.iNU1:'/XND(J:1W[u6kaT*3`hEQJh!>Qp`V2XDUan`B@'q<i$VkKf;?r?/<4T,u*P`aVk3jV`64]9ULd
%3GBGe^hb^[`*jhso9EQPC5eu0:.A4Yg^>lhM(X%GYQF,)1J&1"k$qsUkOG""=8Q"i%>r@%Ki*gSE/X4#&!`ojq6shC[MWFUaBQ#j
%Ic8*Li`[KG7'1X]M,+rch,eOT?a*f*%8th0m^MH])LSjZ=)'_d$lOg?'R/V!^*rUb+Rg"$!KP.4?C@6$@l494E_l594c0erS_KgJ
%cEntk+RX,*^R=)Zp-k]"M!F<NU1)tkI(\>)^3UTFq7#p]iP!)2Y@W+>]kRn<T!VSk^B&pKBWk_=Rf*?UFhi3a=a/>$4#dHXO;I:!
%GIg)1r^M6'Q7u/jJ'hS"f*J2=9m[m)*qp2Pf:brCJ'_Lh\n=3@Y>b/;nP4G%$=TbYm<+kVQ7)'B,%!c)m#C^"+jd94J(%^OdV@jG
%0A>_#oD&p(f1E#B&,Vji3e92Eh9/66SNsVrq*99i<&Vkc7=.0'-WLMgBs.c!4G%:>[+>E7GhD(9n+@fLL5>?Y]cP]6niQ=55U=&)
%-gqeTTS?Opc$REmVc*tQn6W@4Ya"e>]ac&okEGX$U6kJ&pSuTlX:O0'=0sD>H*98ln-%WnYIIrELV7r9?!#bZjLmmEn'IogGctj:
%kg"DD?BI^CZ>fDA(#km4p>inRc(FJR?G+m-!e*7WY?6bnVYqJ&<@8U6a,B]G6h9E^Hc<Mt6g8gOCC%Y^-gt&:2qk\nhWs@drl[NW
%pH"uKl*:6G]eUEgO>lWNmWObc][nS>C:r#%F_g@26$lUM&@B62p58ZV34V1dY=$dJqP:eSYJk,LU:m-318IsB[+C_aUd&Or'Bp@Y
%,&Z-#"CWRXiCSAZ=!$(6:YP+;bJ<Q<ik:pf9%^1-H*<El@;ZV4X!9+dh7Qh'XL8%YpH!HIC/<^P<$SS2H*7m+UJ^QFpH!#bTIKct
%]hU'mjiMk?"Rro>4F"&n7&TEJhWn\g)YM4!<NL;>&%pMf\8cf`?3a[Y'[<-A3ekXhn%;_tc5OZc([k?E2u;\jhQ**/e?@bSY7p!^
%aA:YC5+esC-gt($:H1(I][nSaG<C/SF'&(;5BsB(k5Pshb^VJ<'cF!`J$;.ZZinQpnQm*4kiBI&Y=bEA7G`9m$E:;o?bFu6RrLW;
%YJ\4PH7-EN'rOCOMtf>@.-U#A'42b(075"Y17EaT^PK(@h8(Rd&RY@78l>MGpkg2r./t+RFgMnsR4mR#)NNMj4c-@pA<oXH7=7N+
%0?s#4^7pf]fAV_aMW>m^ckl3eM7r!3h8E@rOigjS,JGAE4pb%m`)h['*qtTf3]MgB;7mKJ)4f2nDWWI]=OL=3B"faU$nUq.q2.`6
%W9)-K4dRG-[jUd47A2[8)tW`-*TmTl-hDH^<1`p-Ht?/#'f_f/=#L*H;fCga9\PgsRBP'IBHNVFN"/*(0BT=O(a<iNk3LM+>H6J2
%q)ZDViHR%`na)fGY$T=R*gIAsDp6fED!^Q.I-"b'liJj&.mjUdM)XRtP5DO[DW^7]s6Otc?PUA'[nGM@cR-;M&RQD*%c,')bmk!f
%hMA@fXcA:lMtf?=61om*MC`(fchg1ZFh9(!PPC#M@%nh9,//N_C4;uTpD5$f'#W=c4qM']!d%;NRBK!,V"A33,(Mhn"T6)`jZkid
%eL0sRc_fEfbZCZ92ZS(X?\]D/rQ0F5@[X65grrh8?.K8Iaa>+$;p?]]eS#37r/:CIq0%7h#lCf\q5V`IN2.imQ-iIlPPL(=DlWKH
%Ht?ggKR..B.MWK.k/D]g+;J+111(ns+RR9uAPg.sS,#*UOn8nMFm,GuhjLZoMX-%C1LE.[-@*Fcq)X2TPRl!iTrMgU11*%IRi0l'
%I+<=E8Z=*/e^9c4(\?1\j1r?bY<r]SoRZe[\_683q<D\HbEMbuq;m"Qot@&4ff1S?R'2H(R9mh`E%=ITi[\_Mc/Sor<I*2EIhH*;
%"UoVBS+qk#B--pTip3hpet9l^/QJ_W^5/s\#Gpf0Lp%lkEZf8Z/"p^CcZBh-3Kt&6B:m,o+WttkM6CUgh[XfqHl]XGnd"/)-a:#5
%(\'@ld,RE>S^aP2ireh:PAmPME>)]W7^)b^I%@nnd(F;8f;Z5NI1fnb33`*%^60!Q6d@(LF`MeY7XPeTWI:;ak(EG$O^eX-ogX<l
%VcG33]nij*g**HkMtf=8?2_ciS^K=KPP<3rd]rN.]hVN/k<&'rZ',!Jp<"b00G6%mla4Ai5L<^aRgY4G([ZA1`&aNtf86.Yh53-b
%X8+6us,6SC`#rC`7=.JlJ&5uHUV5Ys39]_ABWoo`3phJ7m?Ni=<\XDBH_p!cTY%jMY7+E!O']1p5+?(R5A75/g?5t[YL`$*>A2Ai
%#<G]$Q;?4M>i"qC]eV??Y'eW'a"FUY"76i`VfQE5Bs0nAL#YaO*TX.@g_dLDOEQ-#?J/shSPRt?3slGU2qmTGUjg`u;$!7uJ'qX@
%3d:3,[+A_ofUfHO2:,VX2slmfeT^,7p8UNb@d+]rQ'!)DRhtHlASO8SDmWU7N=OU!p.E!NWIV`sYFg%"?iJ5IEnJ0R:pD+L=%3^e
%dS5'7Kh-WAdU!ehO7J;(C2uT$iC/*a=nL=0p.F^=5g:88FfIrtT!VRR)A%Ihp,\*CM%?sp7Vc^6g?[h-V"(7oZKKeZI%\/V80R8J
%d9`_WC%Y&ES[>N#Hp)/HdnM8UBs0XLM!o99/,R\$g:Yg>V\H<0TY6eY"VL[,^%.8eDS=G(-]gT'QCIS?d7duYS+c+QO8-hDA[(Ou
%PP=A"_%=2'YFfIH2[rNr"n.`9mkMi1#q-@:^0bI24U2+Im!D4<G*b>5@6#'u=.M3FWdrFY_?3\#hFisHN]<u_0b&An>*d_p(4;nO
%rT(Y`n!23]H*>eL>CPVGU.JQmHLbC;J`*nanm6h+n-l8<KD0\"F_mKE`I$_8H:V5QGcsWC@._Hc4a&-shfu?2>@dNEH_$EgI!Obc
%Z@K5oSt#I8nb^\0jiMk?!k%_Lmr`e(lVHC'`;GX+jIQ$+K/EJ`^"RQgl@\iRI10;u:YtC<"G#=h`Hs`jKu1WNnQr3>T#oIehCCa_
%1C8O$?Dhqgq;f5p\l5aRGcud^#!+Eo.jYW;[0Q/c:mO*/NV>K8UQ6ek'r+7Kl>GIZDI@:>DnK0,h=RUP`)kY!'Xl*EL0itN$U>6^
%+@QNRQ&bB`b#:=TONQ5J+U/[Q/-jQ76#.I@"]uf^P6s+5H,N[UQ<Vp9#6"2lJS]Z:CgOnh5c([''u&9cOY+37LhugH.F#[\RLBYM
%Tr_sIM6CNKW^D]>0F$WarGlH4)>O9scn2R-(:FH8lasQ-"9:u_/VLXd5VV2>"&]!rCR`I*:%s.o);T"PL+U9+2VTY\#C?F4c$$WU
%rJ`bZ=?<V"]6U_gNlV.=S*^uQlPjc.Z/B-+nRfB=eG7+R`B1#aq8Sn8/tDh/8)>f71C0!WDq:djgY[7^N9rqDhfuJ5Q=,.$c%^Su
%q"!@fEf4G9&%pR:mKQJD/B\!,mr,jAbep/Zpr8fj7JW6.hCK#ik>sckZ`8GOr?H5]M0\XB0A^Lm9Morj`LH6`aR;3/<]dbJQef=-
%Y#@i:j3;b\F39hnhCNNj3r0e6QLf!koZ!A3%FdF'nn'ldB0b!chCQ_*Z1g36Cb4iKOZ1Hem7V'Yils5:UefdY=es[B5(Db?g0bAM
%m*2$]Jl2SFDVf3]PGE]hc$$FUo#@0\+mm+^\9YDu'73nm2fG"#*J,)7]NH>sIL?j%2ieT_E::GBY$D.4#B/1abO+NUc*Hg"e3<G8
%M()%Vcec<;`\&80`LCFTjSFutg[tgkDnK6A4RdGODjFO3I49*I=h=BS69]Y#6\\0^j3?jq;sFVECma8("h]\ujBh]W]SNohG#cB:
%:Z<oCq%+Tl'5+_MP%]7WB.4^@>I>"$XPQSs!#KWua?eRQ`7\Q2YC.P=;TB8^k!bf:!.9NaDo>fD`$re#:Z<pJjrI[&(NFVO+2St:
%Fr1PR+,R<4([(RO3(r^@6,*YEG/u)6+,R>2gIj6PDrN=][;LTr,0lXEmc,O3(7VTs3;JIlMhcDBrJ`ek%sc)8M6hW!gHLJ#_G3E5
%r?fg5(5=O62rZC;/-iid-I-dk6cU-cp+$C,%j''s6H!%#rihr?,L5<AE.h'A9q:UTC%auZ#i7+*Ym#@?_4,!mQ&B&i]\0GQg,0YY
%=iO(F`bsWa__YgJDr*$PGqOt5hCN.tM8&RnEP8?0U_0t:7X?Hch6^>)!_`#PS(08Ak;V*G^XE;]H.-B=`M7mXc+5dO$$Xj14bWd-
%Rl9$/:ob[PZi8=GYV"Q[cU(Lo#App8%s<8mc2&VON;BErEe8MkW*co7`\a*2-dFK;@_1F7=iSbVIM&!"3;]!:o%hoqdD$pc/.P@%
%"O6a.SAiZl<k6[<E>B@f)A4V\ERp2+pumo$HUdPp']4_Q)ILM;Fq\N#2Tt\:EOH7cBQ(gl_o7);&SDtCj.6e"fcJ630+['DJ`Xsk
%`7_?Lq0-1q+TI1QZeZs9Gpgn/OVpR##B@2i(aKX%M6lB-Ec)nB$pKKR>m9KQ6(I=QJL$^$EL&Et[+0dfgBT$C:m;c7(<gU^a+H>*
%3W83Y5C'S@^g;N[AuVouR!A47.?5&\5C'T0AMpF$Gd@NGR4/*tc&/*'K6d$".B<ti-Z@im5,.6&o&.cM6bo#K_4)HcbDnO</G8dj
%mc]Qf4"SM=KDONNEo^<(&T?MW2X^b<mMBeb,^O=hSN"`Op-=sM]NLiHU!UctRiN1[C]D2>V:ADEVr#'h)])PhDVcr#NJ*YI)fN0?
%=RqY7Mm9ZtYa[T;7uQH'#B)LAqsial@^:<5OO1t9[6<dZn`7r0Mcf[#Dg"QH:YmWiFlX(Gfk&V.i6;aG$N8)9*I<V1+*b+kJVpet
%k0;=T.:NU%hCMT5l-V_?Zb5f?dZ9;Fb7r\uXn(JrneQ:c6Q`sD?K=fUadX;K[ItDTp0@63k<ABIH/Z@eop[m5h<H\]]Qph7M7S'b
%?G'ERT'tk)c(<\T0>b3Zim%>>qY\-u*@?C&_49'#d5QD.B6fl"5i3r1G3%EEpgVP>)b$CiRlNQ0FjD.sZbsZHraa:a@En2US99ha
%ira?<^L+Z!?HcOkCNE?hK/q+O1L>GaB8:AO&)o,B7BNMX3'25J:@HD0pR%JCbZV(nd;""_B,Sk"]JF2U%b:0mSE7``+Hp-U=^HT#
%^NhSID.h"o]U?,)OE0o&cLsW[a*6Ys8O_Jh06N\he0IQL&*@[E;qsPjB.[&^9Q`.(]3X=jABp@4<<)W%cLu4NIkkXs-&uR/*m@bZ
%Y=jc2_49m>Ms8?Rm6[AuP<%BOb/?egjt-8SJkp_JB=g=XrQ1SkP`pLk`gik,Rq?t%B/s^Jp9@lHfcIr$&'S0+Cfso'RlO+ZDoC#A
%S-9.)F8itF,p2G=pplcu%dj)6S>AuK,lp2tZde,\1!;Ls<j7!SZsV&1mPLI&bZRi]b*dT4B01Ybea18Fr=j\X=;CR;J2o+qee$oY
%S/(-hlB=4ijODZaEu%Ga1IcgKB;ol-_,*(3<hJZ!4INPN=gqemh99#@PpPed0'96/SadiJ!h8G)\_`.Kegsd@^50,"#TDF$(NC2r
%W:%r,i[do,]2:M,<bMq*Q]!gbl(!=pGnOcS<"@orRlF%c1]\9'M6ij^4mATW=U$Z<l6ad`4=</$M6dl*6`TUn=YStQ]n)Y4b7+or
%)]*KpTFfo7-ZKnEHICd@,0iper:^G9(?FqE?29C<96',W-6C*.r6I/)ns_THFMCAAHP0s[@!ZYH`7]Ceqi`uIE[limfn26l"LF-Z
%,gM";mRAukEL+-q<NUKYB0ckG8H6G\ZcqdLj<nqJPdcC^0B+Nm]0si339qq$%WC@nVe,GTf@J6^C#U],5q`*<ERoaem8)^m#@^d1
%q]a=+0I=iB:Z?3BLh]%sZe]fun`7qao.Zt#?bG'0.=T!UZ_U9A(nk<Lg!A:Ih,j()h_oD]M]-ITGdAF)9Se+%]NMP'&^?$KS2KH6
%OS*#,%X5qdABpXi6l"]jc2n8E!p-&ufe,p;4INN]Q.c(Gc@3Len%O)is'D,"B/i:?%*Yprd6LZhNA>jRDlM%DLcM+I("kAkql%o3
%65@1l8+R1<kJmV-A)<03^p%P;=;&:Sd6oGIUhC]u3*p4o/J&=(l%#<+%<as&q,q"lo:;H<&*U!&ecY`S*bAeFSYa$dldO>F!Y(l!
%f.I4"eNFYjLUNDhq%lOL!W?`Z]MX^1Te[8?T]"2<U36]pdD`'Vo[%;KX=6>n4_bV+7Im+1185SM>,IGhV>pqIM0^>?lH3'=g(YQ\
%OkNS(eWNi1^'a5em.0nVCt)"ig\p*)3:%f6jp56]*+1N2NtfiURN5MGj;hRZe?gek>sZ@n]tqn)Kn-K6PE:t@U(ApES"p$tP]><(
%h0'":fqJm/!5.lG8MABHDJ^ggZ2/-2:kOoC4@?&EXa;a#oOllnC@+lC6@u)K^(EhMgVYln5&QC3FF-G:ac])EVF;a(Hr8sX_aYT,
%eK1MJpgWc-^l(S'Eh26,^?IN`9VauAEk^lIf3n.U"*P"Nm/YP"V#.;C'O<=;<"oKe#4Xc,=?:(#EgM^Pkr8$HWkaM!alXL7OM?t'
%l00$Z@pp[6:?PNaUcha%WP_SM$7pf34+@pPm#Ke1?C,`s+-Gbg0-&1r9S*PGPoVf:IWlg'L@hu#Hu_I?&&8%9X`+Mu^A%>6(.FSa
%!hDt5EotjFf5LbIX;ZAkk#BgaoqmEaAqVcPHSW"->4.aB-4o[^%A&coAn?eb,A<!@NT.tslWWfgMCZAF+"-+.;)&*9Gt[FB615L\
%9ZT`:o8>tln3Pn0db#%/,(Ru`)kH^8k(Z._WID5,96a_bb\T>KHe0a7)+#aj:M-Vic*ihoFJWXe]6[U'@-LgE<bU'u,H<064l<AG
%\W[%A#J"dO+DH$gn\[jWYAK&&X5XAR([Nr_-"_Z@gnL]hdPY&K8$\XXef=JG!VYh5L[g3g^'4's?Tc[B$+,?%<&0*poqU>FOpB3#
%AqLo*;["0$Sa>WWUC/K-/kI&,f0LRQ2L1(+GfE$=S1Gt^lcTl-llXsEmLU2#MH-N?:'M!s3EpOn$QK*<)1X=spQVM)^oiB/=;NeE
%ENCMHrM8s]M5`Cc&t5gS3@@I,F%UlOp,q>XC/-5dS%'d`4dNe7GE1=q5-L.lbj'J7'Ztn\@tr,h^!kUTqK^_rKc%^%7bKn5ea*?&
%VdjFc69*QSKq_gt+(Pe(eq+6n>ob[Klf[o>;CgIWV*rH2ooE_DNOMOl<#]T22FV8+)SCu3<5^EZC4_[+K+4>(`F>(o`\,phZ[^"+
%WVKYmLE7Zu&KrHIP9sPN4l7>?CB4oH>JqsiETeQ")aZ\-?>ZS:%sN8r%^`)YffJX;g()8fqrt+.:tD>W:R=Lp7_Rd?I2O7E?!Sm3
%L#T`0-T#?Jl7U8CKsn79L[=U1C$Q'S8Al[L``V6cZ3:2Vc15A]O.f(lCOWC_4[DE-)P.$59>s:P`0;)",j>^qjT:Wdp$:Y_,I09k
%gY.$Hl#jMD'%5?gkan3Vr-D'TH=5F.;P?Y]OsFlK.9]JI`.>NoCp%s:>;n#YZu^i@m:DkZp;)DoG%`5>(`r$(k$UARbr#Po,#Z8*
%A,YZ.L3EPFKuUcK2V]>=icjO1I9b;c4fK,QM3#QM_Shaa&[hdt>LM@P<dobVN+R<\7D6[-m@@F,:=<qO=m$\rd+0)8^n^=WW.XG8
%@*L$_;l4Wc',]p%*FS\C5cb=&ja.6hV(j5!ATEYk94-Ms'bT<@N5Js^6KPX_+UA^r"19gs&,(bV6b>!;H^jP60RbV?WVX71T+M-j
%qDLu'7'AaC2C`:jH4@RT:d7k14JV,8r_\BoT1'*Im2km<Z_>orlXY@3'#@&ao6<j_Nk#EYX-a40e`&J3`pK3'lo@LpgUVNf=KZ&V
%#JWVjAWJK4F;/@9`l```,+A#@R=Ia#[>K!\8&f"3f3G?(q7?tif+LOW=-m5=j/oBPQT6&bA/*NH?b>hMHR%_Lg#g$VIW/b'DC33(
%hNlSh$5!MKC/K<JYnuU`4?$ZaH]L,hUSAT7V-W\[`[Q6FV(.C(8MRGKK9oWj)eV%)j`i1qH[WJ&?-/4[9E0o7oe5,6mVeUY`jE\^
%m^hlj"Ba)T<CDq$U4`P']>me"EE05:@8%o7qkQA6eeZ/5m1b']Tp<K4$We7S>.&+#nh\<,6ZEqf>;9-09'`kM[=q'EHl\M?E[6.$
%b'dXu-oHe*pJT,+Uls6"h.#a6=8#?I!-T2EJP,B]%`n=#JN,"8]p0MU[]tb9k+AB'IRTbsd5%&9GMHUp%4Q5Tjq5c/5".KOdPHmu
%_jl!?P@<7d'p@`&T.EU>"_`,Q>\`W,qi&n=d!bGTg-o4@=nnE'.,aF]?@W@,&a[>M,Jh&CdJT(lgb3)=G1rB2:]dK<?E!j1'$HZU
%Z*-MLk=6COqIP#k`n/XB-+dD\:L8(h?l&2c-S`(SH1TXKHW#Eg#*>X(gP@4)qj<"_Wj6>5#Jqp=nt^&rbW@$mAF@8R:3IGKr0%He
%\?dSZR"seB#u4Q+0kh7?<+-PA<0&/WK,S/12Z">RE4H:LdPhtk+`RiJ=f&X1BJPsl2NH%T^l/^GF..IZqo[Jp!+61%"`lPTE5F@>
%2p/;E#5`n,q@U\c%TLl7rE<"YgqTmOd/YicQDLYEoY#f-1H<cM'BK32\E.Jn"1<eVf*r=Hr^r;jip20E?^E+,9)-Op3p$lVg:j'g
%Q.c[RJ&e!$_P*)F+h,Z-)H!YgVon*BG;PtH(j$uDbtOF/0EIB"#4kq3-,u&?.k<OCX,3(:-@mi."n"6%`J>I,7I]MG)j5prMQ;PF
%i&0U6/mNJ&q)-@l;j%eRE-l-V(lMD_LX+Hc!:"T%j^B4ODWUPXF6I/X*q!(FhfZVp%uN,DjG\LTK.niP4t;6-(:pCF+d4FDJs)?+
%V,d)OMD"DhqY2T`+th6_/b1ihGDAD3>hWWSB\g&^:mNQ6N4J9IHmkXEf@U+ISNCa+C<UOtckPUcj^f9C?Eg#409HR:Q/"uP06a.X
%E7n6)-=%A4*,Nk;6sRQ^$/)!S'gj0>d;[uK485Fi1W>1hq_>^.ZR!6a,0[_aDt#tn"8cR1QCh@`;kF*=0]nQN?h*0=6Ae@Nh`\hc
%Qj@5=N6ODeZ.VeJh(dBlH_O%rnBN8:F2sh,%hFj[-ZN)<a^A6:W401tk*a9k'bQa(R^>8<9mViP;j?nnECfh^`9qh-Z[U_0U3sY,
%<0\pdf\YU#C;c]3"#BPWJsgFt.&hu58A%XZFp]Ci3?tsn`%jD2EkCdE#K#G=SThd`;&r')fXG-J*$>HhIG?9E%+5\J=j*'b@>cW5
%X<<OG)-SL@om2,#LMEDa0.CW\',:SK(l,(j*.p@-/tTrA]PCC2F-M`2;aYIaIjlBnp4Xm%0412(h_Z&D-JlClC<+'Xj6&2#=$p_0
%ZDL79a;b:h8#\c$lFnO?/D\pZ5=^hS^@mGT1qSF+#JL)/U+!/8,S3oF7QanUOXJh,NK<fup07]qp):<A<`J6+;L!2CcbW(=17oiQ
%prfg$s+?&BRmi;k<SutS"VDY1\UB"8U<\<UFB:'qAP.(h<a?J834bW%mc*k;9d%k<&>U4D=KUBim=VApQ2C/XQk2%Oa!0po&ner`
%QJC["q+S6;fiG:k&9R>tk#<NoLtl;W>/1p\8Vee\.2&g]%oB<Mf;"6m55HaZVj>$^Wneqsj!)6#Eld)_],^4l$UdDGC45_f;$9A5
%"]AJ1<ps#ol^[gn/1TJ0M*VlT._8efat%?HJr.mKNL*F<G#8"+eGRJ>]`^C5;cF5u?d8)+%BgaD"<PUc8%2nG@^iL2Jql0P`/T:I
%U7%kBL9DH="=moQ=3?Ri[f-ng[8^_;2S):S!sRKKY=_ZiDPWskM%GM'@h:eVZ/QAk-hX6R5Yq_@ht8%"!"ldFfdjD)YTsYmjeXNp
%3sNs>N8-n;^VMJ<EF8uJ91@GKYs+-j_^?Z5r@+1Oa'C''33YYUfu&1i)nLiUk2%?ToV\])l&$[m\sdfN@8">#FmNTCM,*sg7)g@a
%TuV2Pq(@eVJ\b8EA%9:iX$:&?*l_&549C-7T.'OH\O.Vmj0$".VPq#-of.0GUfg1tQcb4kBE7EH_d7BL8gY<]l`nFWbBH0BP4pgm
%.\>PfXUos;T`I,[a/(D'H49Sf;5m;+!HdOIL'0FJ/J76tqG>ZFCJV,-0Gcc:$So`!oUr^q'uWI`%+>CLYEoV'!Ho6j=X4i2*p=Fh
%B8OHnp5%b&b53B]l&9pq!g&\YDKrA.QkP0jT)s$]f7iV>B[TiOhW.RJ;n5j?6>\mi"bF>n;YhX3$K)<G-l*E?rD#FpPZi3WkVY,c
%o6U9p'rdlZoS"&2l-$@?g!f7*HJXuS6k=o>#DMaf=0I)NJ6c8l9N%YMp]feCD>\G]+qkV6&_Rm"ZH`t,%#8&U/cMu]FFTmPeMX0q
%G'(Q7E/BPF$>N737FC-Kl&h#')q90sK(leQ<@O4=9cK\)r"C/=ZQK_;2]Yut`'QKAXa1BY:_CEQp^7!6@>M9\,mq@T/:0./X,gs.
%IBHI,<91*A(,C-MBkE$0eu(Y*GPgf0c(ruoWldAu@o[0e^Q@=]'Hg0GXJdkY0sOuTO+*fE6513Q;^]%)HNF[+6.'.Z8>"D)Y24$F
%h9,/+dto!eY!N:H<o.=r7dt42Qg[cDn)KR:+pI\6!GIE_pHUO:a,Td,`FK<BZ;kR&5;"#YU3P7R?V9*;m?/6'*f=t(WrO,u<<.(W
%!Ng-F8+@0m.nrmQVCLig:a@Xh:La^6F.h%[fVV`8m0m0F)loKBUIR*K/pLXW[heDA3oAbq59-<LANElSl3[(Sb9cY>U)A"[5o6g*
%j\ZSK85-(V>-?FLQd)Wm:Q:/$q3_,sdshH01A:X42T2GH;F5PYf9te/k=8`UFb[4((pPC1"^t55nPpQK),k9fBcWtY%6,)j&6\rD
%#>8c(MPFJ=RR:4$lW;#>pZGbl<'.7R(Mpo6A>J^e^L!3Raq7XD]4<^M#Xu^>;&9I-W!&1lc@2<KflslF^]$9DVS!/"c]#l$G@6oi
%\kNS)%s=[U%[lLfa$!tt!fW2l1Ml'9(d*h$@5)s05&q)i'_Bp8gk$g17dR0iost>oJ1pF2o5]^tCVNY!+@YZ9Se6/(V]5?pjIhWq
%3]Q0acCe=q-Wi6jYU:&1]mahNP`p\hrVH+ZqX3Y_lj'ea5]-RUs4^rZ)H8<cD=gIdWI98U=/?KW>a2T>0`0Wh2L<#Ulr%"X1">YI
%&(+\od1E+?kC/2:4Xb(4Ec1J%_uC0<kga*L\:kAJ1+6R!:Xq0ja/Z*1p%.bl93J+HobMBded]E;M3+($c.pq/X>(SV5D&A'^n^`"
%o]GDSj<-)u=\okfQYp\;rBRlX.jV&rL9HUaOmL5<%B`jkmi$Q'm]4Glkb10QXb%mn9;dW3.U2,sCO3bm3jtK<`Cu4iM\].IZ.$Rq
%Vf9Q7Jk/`$'s\L7kS0XgUCI:-@E')bb&GgA,d@`0poa:I%o>Z''.!mNJT9VC^dGA7b0^X(6[cZOI+g22WM;Oo..dcJSM-Yn)4P#d
%4!NVcdD:j&9'j2F.B3f:01n;rF9`kU_uj<.)N]ZQ/90dHHRm^ol8s2BMl,phZ2W,L9pI25f$Ju!72=0l"_<_hBY,!B5N;NIFFoEA
%CYc*9+@Ig.B(opW%C.Cl?Ph?lfg22Rh/?E#d>`6ihGmC&#/u3]oLi=c.0R\)Ej+-)dOraE]h#`<:QscM(Lb5u7EeBZ;1h1ROdOB^
%7=%78cF]2]M,f."%qo2N^r9(1)7Zl[Vqba$YR5DtICb<AiP7(noE4bfV:8h@h,dY-G@+]nJ!R4t#MCh-_#O#`J,@!P?h1u0:&?Sn
%rS,*agL'pNYCF#ukJ1I'k?n2dYQ)r+rTYJRoBY<4a8bZ'^]2jaqs,oMqX&4sq-X02o07[!qqqAKp](16J+r7^^]2(Knc**P&)A?&
%X2"Mss7F))a8bZ/"'C=#AH~>
%AI9_PrivateDataEnd
